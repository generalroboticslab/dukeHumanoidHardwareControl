# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _mscl
else:
    import _mscl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_SwigPyIterator

    def value(self):
        return _mscl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mscl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mscl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mscl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mscl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mscl.SwigPyIterator_copy(self)

    def next(self):
        return _mscl.SwigPyIterator_next(self)

    def __next__(self):
        return _mscl.SwigPyIterator___next__(self)

    def previous(self):
        return _mscl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mscl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mscl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mscl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mscl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mscl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mscl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mscl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mscl:
_mscl.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _mscl.SHARED_PTR_DISOWN
valueType_float = _mscl.valueType_float
valueType_double = _mscl.valueType_double
valueType_uint8 = _mscl.valueType_uint8
valueType_uint16 = _mscl.valueType_uint16
valueType_uint32 = _mscl.valueType_uint32
valueType_int16 = _mscl.valueType_int16
valueType_int32 = _mscl.valueType_int32
valueType_bool = _mscl.valueType_bool
valueType_Vector = _mscl.valueType_Vector
valueType_Matrix = _mscl.valueType_Matrix
valueType_Timestamp = _mscl.valueType_Timestamp
valueType_string = _mscl.valueType_string
valueType_Bytes = _mscl.valueType_Bytes
valueType_StructuralHealth = _mscl.valueType_StructuralHealth
valueType_RfSweep = _mscl.valueType_RfSweep
valueType_ChannelMask = _mscl.valueType_ChannelMask
valueType_int8 = _mscl.valueType_int8
valueType_uint64 = _mscl.valueType_uint64
deviceState_idle = _mscl.deviceState_idle
deviceState_sleep = _mscl.deviceState_sleep
deviceState_sampling = _mscl.deviceState_sampling
deviceState_sampling_lostBeacon = _mscl.deviceState_sampling_lostBeacon
deviceState_sampling_inactive = _mscl.deviceState_sampling_inactive
deviceState_unknown = _mscl.deviceState_unknown
class BitMask(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.BitMask_swiginit(self, _mscl.new_BitMask(*args))
    __swig_destroy__ = _mscl.delete_BitMask

    def __eq__(self, other):
        return _mscl.BitMask___eq__(self, other)

    def __ne__(self, other):
        return _mscl.BitMask___ne__(self, other)

    def __lt__(self, other):
        return _mscl.BitMask___lt__(self, other)

    def __gt__(self, other):
        return _mscl.BitMask___gt__(self, other)

    def fromMask(self, val):
        return _mscl.BitMask_fromMask(self, val)

    def toMask(self):
        return _mscl.BitMask_toMask(self)

    def enabledCount(self):
        return _mscl.BitMask_enabledCount(self)

    def enabled(self, bitIndex):
        return _mscl.BitMask_enabled(self, bitIndex)

    def enable(self, bitIndex, enable=True):
        return _mscl.BitMask_enable(self, bitIndex, enable)

    def lastBitEnabled(self):
        return _mscl.BitMask_lastBitEnabled(self)

# Register BitMask in _mscl:
_mscl.BitMask_swigregister(BitMask)

class ChannelMask(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MAX_CHANNELS = _mscl.ChannelMask_MAX_CHANNELS

    def __init__(self, *args):
        _mscl.ChannelMask_swiginit(self, _mscl.new_ChannelMask(*args))
    __swig_destroy__ = _mscl.delete_ChannelMask

    def __eq__(self, other):
        return _mscl.ChannelMask___eq__(self, other)

    def __ne__(self, other):
        return _mscl.ChannelMask___ne__(self, other)

    def __lt__(self, other):
        return _mscl.ChannelMask___lt__(self, other)

    def __gt__(self, other):
        return _mscl.ChannelMask___gt__(self, other)

    def fromMask(self, channelMask):
        return _mscl.ChannelMask_fromMask(self, channelMask)

    def toMask(self):
        return _mscl.ChannelMask_toMask(self)

    def count(self):
        return _mscl.ChannelMask_count(self)

    def enabled(self, channel):
        return _mscl.ChannelMask_enabled(self, channel)

    def enable(self, channel, enable=True):
        return _mscl.ChannelMask_enable(self, channel, enable)

    def lastChEnabled(self):
        return _mscl.ChannelMask_lastChEnabled(self)

# Register ChannelMask in _mscl:
_mscl.ChannelMask_swigregister(ChannelMask)

class Value(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_Value

    def storedAs(self):
        return _mscl.Value_storedAs(self)

    def as_float(self):
        return _mscl.Value_as_float(self)

    def as_double(self):
        return _mscl.Value_as_double(self)

    def as_uint8(self):
        return _mscl.Value_as_uint8(self)

    def as_uint16(self):
        return _mscl.Value_as_uint16(self)

    def as_uint32(self):
        return _mscl.Value_as_uint32(self)

    def as_uint64(self):
        return _mscl.Value_as_uint64(self)

    def as_int8(self):
        return _mscl.Value_as_int8(self)

    def as_int16(self):
        return _mscl.Value_as_int16(self)

    def as_int32(self):
        return _mscl.Value_as_int32(self)

    def as_bool(self):
        return _mscl.Value_as_bool(self)

    def as_ChannelMask(self):
        return _mscl.Value_as_ChannelMask(self)

    def as_string(self):
        return _mscl.Value_as_string(self)

    def __init__(self):
        _mscl.Value_swiginit(self, _mscl.new_Value())

# Register Value in _mscl:
_mscl.Value_swigregister(Value)

class Bin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, start, end, count):
        _mscl.Bin_swiginit(self, _mscl.new_Bin(start, end, count))

    def start(self):
        return _mscl.Bin_start(self)

    def end(self):
        return _mscl.Bin_end(self)

    def count(self):
        return _mscl.Bin_count(self)
    __swig_destroy__ = _mscl.delete_Bin

# Register Bin in _mscl:
_mscl.Bin_swigregister(Bin)

class Histogram(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, binsStart, binsSize):
        _mscl.Histogram_swiginit(self, _mscl.new_Histogram(binsStart, binsSize))

    def binsStart(self):
        return _mscl.Histogram_binsStart(self)

    def binsSize(self):
        return _mscl.Histogram_binsSize(self)

    def bins(self):
        return _mscl.Histogram_bins(self)

    def addBin(self, bin):
        return _mscl.Histogram_addBin(self, bin)
    __swig_destroy__ = _mscl.delete_Histogram

# Register Histogram in _mscl:
_mscl.Histogram_swigregister(Histogram)

class Timestamp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UNIX = _mscl.Timestamp_UNIX
    GPS = _mscl.Timestamp_GPS

    def __init__(self, *args):
        _mscl.Timestamp_swiginit(self, _mscl.new_Timestamp(*args))
    __swig_destroy__ = _mscl.delete_Timestamp

    def nanoseconds(self, *args):
        return _mscl.Timestamp_nanoseconds(self, *args)

    def seconds(self, *args):
        return _mscl.Timestamp_seconds(self, *args)

    def storedEpoch(self):
        return _mscl.Timestamp_storedEpoch(self)

    def __str__(self):
        return _mscl.Timestamp___str__(self)

    def setTime(self, *args):
        return _mscl.Timestamp_setTime(self, *args)

    def setTimeNow(self):
        return _mscl.Timestamp_setTimeNow(self)

    @staticmethod
    def timeNow():
        return _mscl.Timestamp_timeNow()

    @staticmethod
    def setLeapSeconds(gpsLeapSeconds):
        return _mscl.Timestamp_setLeapSeconds(gpsLeapSeconds)

    @staticmethod
    def getLeapSeconds():
        return _mscl.Timestamp_getLeapSeconds()

    @staticmethod
    def gpsTimeToUtcTime(*args):
        return _mscl.Timestamp_gpsTimeToUtcTime(*args)

    @staticmethod
    def utcTimeToGpsTime(utcNanoseconds):
        return _mscl.Timestamp_utcTimeToGpsTime(utcNanoseconds)

# Register Timestamp in _mscl:
_mscl.Timestamp_swigregister(Timestamp)

def Timestamp_timeNow():
    return _mscl.Timestamp_timeNow()

def Timestamp_setLeapSeconds(gpsLeapSeconds):
    return _mscl.Timestamp_setLeapSeconds(gpsLeapSeconds)

def Timestamp_getLeapSeconds():
    return _mscl.Timestamp_getLeapSeconds()

def Timestamp_gpsTimeToUtcTime(*args):
    return _mscl.Timestamp_gpsTimeToUtcTime(*args)

def Timestamp_utcTimeToGpsTime(utcNanoseconds):
    return _mscl.Timestamp_utcTimeToGpsTime(utcNanoseconds)

class TimeSpan(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NANOSECONDS_PER_MICROSECOND = _mscl.TimeSpan_NANOSECONDS_PER_MICROSECOND
    NANOSECONDS_PER_MILLISECOND = _mscl.TimeSpan_NANOSECONDS_PER_MILLISECOND
    NANOSECONDS_PER_SECOND = _mscl.TimeSpan_NANOSECONDS_PER_SECOND

    def getNanoseconds(self):
        return _mscl.TimeSpan_getNanoseconds(self)

    def getMicroseconds(self):
        return _mscl.TimeSpan_getMicroseconds(self)

    def getMilliseconds(self):
        return _mscl.TimeSpan_getMilliseconds(self)

    def getSeconds(self):
        return _mscl.TimeSpan_getSeconds(self)

    @staticmethod
    def NanoSeconds(nanoseconds):
        return _mscl.TimeSpan_NanoSeconds(nanoseconds)

    @staticmethod
    def MicroSeconds(microseconds):
        return _mscl.TimeSpan_MicroSeconds(microseconds)

    @staticmethod
    def MilliSeconds(milliseconds):
        return _mscl.TimeSpan_MilliSeconds(milliseconds)

    @staticmethod
    def Seconds(seconds):
        return _mscl.TimeSpan_Seconds(seconds)

    @staticmethod
    def Minutes(minutes):
        return _mscl.TimeSpan_Minutes(minutes)

    @staticmethod
    def Hours(hours):
        return _mscl.TimeSpan_Hours(hours)

    @staticmethod
    def Days(days):
        return _mscl.TimeSpan_Days(days)
    __swig_destroy__ = _mscl.delete_TimeSpan

# Register TimeSpan in _mscl:
_mscl.TimeSpan_swigregister(TimeSpan)

def TimeSpan_NanoSeconds(nanoseconds):
    return _mscl.TimeSpan_NanoSeconds(nanoseconds)

def TimeSpan_MicroSeconds(microseconds):
    return _mscl.TimeSpan_MicroSeconds(microseconds)

def TimeSpan_MilliSeconds(milliseconds):
    return _mscl.TimeSpan_MilliSeconds(milliseconds)

def TimeSpan_Seconds(seconds):
    return _mscl.TimeSpan_Seconds(seconds)

def TimeSpan_Minutes(minutes):
    return _mscl.TimeSpan_Minutes(minutes)

def TimeSpan_Hours(hours):
    return _mscl.TimeSpan_Hours(hours)

def TimeSpan_Days(days):
    return _mscl.TimeSpan_Days(days)

class Version(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Version_swiginit(self, _mscl.new_Version(*args))

    def __eq__(self, cmp):
        return _mscl.Version___eq__(self, cmp)

    def __ne__(self, cmp):
        return _mscl.Version___ne__(self, cmp)

    def __lt__(self, cmp):
        return _mscl.Version___lt__(self, cmp)

    def __le__(self, cmp):
        return _mscl.Version___le__(self, cmp)

    def __gt__(self, cmp):
        return _mscl.Version___gt__(self, cmp)

    def __ge__(self, cmp):
        return _mscl.Version___ge__(self, cmp)

    def __str__(self):
        return _mscl.Version___str__(self)

    def fromString(self, strVersion):
        return _mscl.Version_fromString(self, strVersion)

    def majorPart(self):
        return _mscl.Version_majorPart(self)

    def minorPart(self):
        return _mscl.Version_minorPart(self)

    def patchPart(self):
        return _mscl.Version_patchPart(self)
    __swig_destroy__ = _mscl.delete_Version

# Register Version in _mscl:
_mscl.Version_swigregister(Version)

class DeviceInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    connectionType_serial = _mscl.DeviceInfo_connectionType_serial
    connectionType_tcp = _mscl.DeviceInfo_connectionType_tcp

    def __init__(self, *args):
        _mscl.DeviceInfo_swiginit(self, _mscl.new_DeviceInfo(*args))

    def description(self):
        return _mscl.DeviceInfo_description(self)

    def serial(self):
        return _mscl.DeviceInfo_serial(self)

    def baudRate(self):
        return _mscl.DeviceInfo_baudRate(self)

    def connectionType(self):
        return _mscl.DeviceInfo_connectionType(self)
    __swig_destroy__ = _mscl.delete_DeviceInfo

# Register DeviceInfo in _mscl:
_mscl.DeviceInfo_swigregister(DeviceInfo)
cvar = _mscl.cvar
MSCL_VERSION = cvar.MSCL_VERSION

class Devices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def listBaseStations():
        return _mscl.Devices_listBaseStations()

    @staticmethod
    def listInertialDevices():
        return _mscl.Devices_listInertialDevices()

    @staticmethod
    def listPorts():
        return _mscl.Devices_listPorts()
    __swig_destroy__ = _mscl.delete_Devices

# Register Devices in _mscl:
_mscl.Devices_swigregister(Devices)

def Devices_listBaseStations():
    return _mscl.Devices_listBaseStations()

def Devices_listInertialDevices():
    return _mscl.Devices_listInertialDevices()

def Devices_listPorts():
    return _mscl.Devices_listPorts()

class ConnectionDebugData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.ConnectionDebugData_swiginit(self, _mscl.new_ConnectionDebugData(*args))

    def fromRead(self):
        return _mscl.ConnectionDebugData_fromRead(self)

    def timestamp(self):
        return _mscl.ConnectionDebugData_timestamp(self)

    def data(self):
        return _mscl.ConnectionDebugData_data(self)
    __swig_destroy__ = _mscl.delete_ConnectionDebugData

# Register ConnectionDebugData in _mscl:
_mscl.ConnectionDebugData_swigregister(ConnectionDebugData)

class Connection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    connectionType_serial = _mscl.Connection_connectionType_serial
    connectionType_tcp = _mscl.Connection_connectionType_tcp
    connectionType_webSocket = _mscl.Connection_connectionType_webSocket
    connectionType_unixSocket = _mscl.Connection_connectionType_unixSocket

    def __init__(self):
        _mscl.Connection_swiginit(self, _mscl.new_Connection())

    @staticmethod
    def Serial(*args):
        return _mscl.Connection_Serial(*args)

    @staticmethod
    def TcpIp(*args):
        return _mscl.Connection_TcpIp(*args)

    @staticmethod
    def UnixSocket(path):
        return _mscl.Connection_UnixSocket(path)

    @staticmethod
    def Mock():
        return _mscl.Connection_Mock()

    def description(self):
        return _mscl.Connection_description(self)

    def port(self):
        return _mscl.Connection_port(self)

    def type(self):
        return _mscl.Connection_type(self)

    def disconnect(self):
        return _mscl.Connection_disconnect(self)

    def reconnect(self):
        return _mscl.Connection_reconnect(self)

    def write(self, bytes):
        return _mscl.Connection_write(self, bytes)

    def writeStr(self, bytes):
        return _mscl.Connection_writeStr(self, bytes)

    def clearBuffer(self):
        return _mscl.Connection_clearBuffer(self)

    def byteReadPos(self):
        return _mscl.Connection_byteReadPos(self)

    def byteAppendPos(self):
        return _mscl.Connection_byteAppendPos(self)

    def rawByteMode(self, *args):
        return _mscl.Connection_rawByteMode(self, *args)

    def getRawBytes(self, timeout=0, maxBytes=0, minBytes=0):
        return _mscl.Connection_getRawBytes(self, timeout, maxBytes, minBytes)

    def getRawBytesStr(self, timeout=0, maxBytes=0, minBytes=0):
        return _mscl.Connection_getRawBytesStr(self, timeout, maxBytes, minBytes)

    def getRawBytesWithPattern(self, pattern, timeout=0):
        return _mscl.Connection_getRawBytesWithPattern(self, pattern, timeout)

    def debugMode(self, *args):
        return _mscl.Connection_debugMode(self, *args)

    def getDebugData(self, timeout=0):
        return _mscl.Connection_getDebugData(self, timeout)

    def updateBaudRate(self, baudRate):
        return _mscl.Connection_updateBaudRate(self, baudRate)
    __swig_destroy__ = _mscl.delete_Connection

# Register Connection in _mscl:
_mscl.Connection_swigregister(Connection)

def Connection_Serial(*args):
    return _mscl.Connection_Serial(*args)

def Connection_TcpIp(*args):
    return _mscl.Connection_TcpIp(*args)

def Connection_UnixSocket(path):
    return _mscl.Connection_UnixSocket(path)

def Connection_Mock():
    return _mscl.Connection_Mock()

class WirelessTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    beacon_none = _mscl.WirelessTypes_beacon_none
    beacon_internalTimer = _mscl.WirelessTypes_beacon_internalTimer
    beacon_internalPPS = _mscl.WirelessTypes_beacon_internalPPS
    beacon_externalPPS = _mscl.WirelessTypes_beacon_externalPPS
    microcontroller_18F452 = _mscl.WirelessTypes_microcontroller_18F452
    microcontroller_18F4620 = _mscl.WirelessTypes_microcontroller_18F4620
    microcontroller_18F46K20 = _mscl.WirelessTypes_microcontroller_18F46K20
    microcontroller_18F67K90 = _mscl.WirelessTypes_microcontroller_18F67K90
    microcontroller_EFM32WG990F256 = _mscl.WirelessTypes_microcontroller_EFM32WG990F256
    microcontroller_EFR32FG1P132F256GM48 = _mscl.WirelessTypes_microcontroller_EFR32FG1P132F256GM48
    microcontroller_EFR32MG1P232F256GM48 = _mscl.WirelessTypes_microcontroller_EFR32MG1P232F256GM48
    collectionMethod_logOnly = _mscl.WirelessTypes_collectionMethod_logOnly
    collectionMethod_transmitOnly = _mscl.WirelessTypes_collectionMethod_transmitOnly
    collectionMethod_logAndTransmit = _mscl.WirelessTypes_collectionMethod_logAndTransmit
    dataType_first = _mscl.WirelessTypes_dataType_first
    dataType_uint16_shifted = _mscl.WirelessTypes_dataType_uint16_shifted
    dataType_float32 = _mscl.WirelessTypes_dataType_float32
    dataType_uint16_12bitRes = _mscl.WirelessTypes_dataType_uint16_12bitRes
    dataType_uint32 = _mscl.WirelessTypes_dataType_uint32
    dataType_uint16 = _mscl.WirelessTypes_dataType_uint16
    dataType_float32_noCals = _mscl.WirelessTypes_dataType_float32_noCals
    dataType_uint24_18bitRes = _mscl.WirelessTypes_dataType_uint24_18bitRes
    dataType_uint16_18bitTrunc = _mscl.WirelessTypes_dataType_uint16_18bitTrunc
    dataType_int24_20bit = _mscl.WirelessTypes_dataType_int24_20bit
    dataType_int16_20bitTrunc = _mscl.WirelessTypes_dataType_int16_20bitTrunc
    dataType_uint24 = _mscl.WirelessTypes_dataType_uint24
    dataType_uint16_24bitTrunc = _mscl.WirelessTypes_dataType_uint16_24bitTrunc
    dataType_int16_x10 = _mscl.WirelessTypes_dataType_int16_x10
    dataType_last = _mscl.WirelessTypes_dataType_last
    dataFormat_raw_uint16 = _mscl.WirelessTypes_dataFormat_raw_uint16
    dataFormat_cal_float = _mscl.WirelessTypes_dataFormat_cal_float
    dataFormat_raw_uint24 = _mscl.WirelessTypes_dataFormat_raw_uint24
    dataFormat_raw_int24 = _mscl.WirelessTypes_dataFormat_raw_int24
    dataFormat_raw_int16 = _mscl.WirelessTypes_dataFormat_raw_int16
    dataFormat_cal_int16_x10 = _mscl.WirelessTypes_dataFormat_cal_int16_x10
    syncMode_continuous = _mscl.WirelessTypes_syncMode_continuous
    syncMode_burst = _mscl.WirelessTypes_syncMode_burst
    samplingMode_sync = _mscl.WirelessTypes_samplingMode_sync
    samplingMode_syncBurst = _mscl.WirelessTypes_samplingMode_syncBurst
    samplingMode_nonSync = _mscl.WirelessTypes_samplingMode_nonSync
    samplingMode_armedDatalog = _mscl.WirelessTypes_samplingMode_armedDatalog
    samplingMode_syncEvent = _mscl.WirelessTypes_samplingMode_syncEvent
    samplingMode_nonSyncEvent = _mscl.WirelessTypes_samplingMode_nonSyncEvent
    defaultMode_idle = _mscl.WirelessTypes_defaultMode_idle
    defaultMode_ldc = _mscl.WirelessTypes_defaultMode_ldc
    defaultMode_datalog = _mscl.WirelessTypes_defaultMode_datalog
    defaultMode_sleep = _mscl.WirelessTypes_defaultMode_sleep
    defaultMode_sync = _mscl.WirelessTypes_defaultMode_sync
    freq_unknown = _mscl.WirelessTypes_freq_unknown
    freq_11 = _mscl.WirelessTypes_freq_11
    freq_12 = _mscl.WirelessTypes_freq_12
    freq_13 = _mscl.WirelessTypes_freq_13
    freq_14 = _mscl.WirelessTypes_freq_14
    freq_15 = _mscl.WirelessTypes_freq_15
    freq_16 = _mscl.WirelessTypes_freq_16
    freq_17 = _mscl.WirelessTypes_freq_17
    freq_18 = _mscl.WirelessTypes_freq_18
    freq_19 = _mscl.WirelessTypes_freq_19
    freq_20 = _mscl.WirelessTypes_freq_20
    freq_21 = _mscl.WirelessTypes_freq_21
    freq_22 = _mscl.WirelessTypes_freq_22
    freq_23 = _mscl.WirelessTypes_freq_23
    freq_24 = _mscl.WirelessTypes_freq_24
    freq_25 = _mscl.WirelessTypes_freq_25
    freq_26 = _mscl.WirelessTypes_freq_26
    power_20dBm = _mscl.WirelessTypes_power_20dBm
    power_16dBm = _mscl.WirelessTypes_power_16dBm
    power_15dBm = _mscl.WirelessTypes_power_15dBm
    power_12dBm = _mscl.WirelessTypes_power_12dBm
    power_11dBm = _mscl.WirelessTypes_power_11dBm
    power_10dBm = _mscl.WirelessTypes_power_10dBm
    power_5dBm = _mscl.WirelessTypes_power_5dBm
    power_1dBm = _mscl.WirelessTypes_power_1dBm
    power_0dBm = _mscl.WirelessTypes_power_0dBm
    retransmission_off = _mscl.WirelessTypes_retransmission_off
    retransmission_on = _mscl.WirelessTypes_retransmission_on
    retransmission_disabled = _mscl.WirelessTypes_retransmission_disabled
    trigger_userInit = _mscl.WirelessTypes_trigger_userInit
    trigger_ceiling = _mscl.WirelessTypes_trigger_ceiling
    trigger_floor = _mscl.WirelessTypes_trigger_floor
    trigger_rampUp = _mscl.WirelessTypes_trigger_rampUp
    trigger_rampDown = _mscl.WirelessTypes_trigger_rampDown
    equation_none = _mscl.WirelessTypes_equation_none
    equation_standard = _mscl.WirelessTypes_equation_standard
    unit_none = _mscl.WirelessTypes_unit_none
    unit_other_bits = _mscl.WirelessTypes_unit_other_bits
    unit_strain_strain = _mscl.WirelessTypes_unit_strain_strain
    unit_strain_microStrain = _mscl.WirelessTypes_unit_strain_microStrain
    unit_accel_g = _mscl.WirelessTypes_unit_accel_g
    unit_accel_mPerSec2 = _mscl.WirelessTypes_unit_accel_mPerSec2
    unit_volts_volts = _mscl.WirelessTypes_unit_volts_volts
    unit_volts_millivolts = _mscl.WirelessTypes_unit_volts_millivolts
    unit_volts_microvolts = _mscl.WirelessTypes_unit_volts_microvolts
    unit_temp_celsius = _mscl.WirelessTypes_unit_temp_celsius
    unit_temp_kelvin = _mscl.WirelessTypes_unit_temp_kelvin
    unit_temp_fahrenheit = _mscl.WirelessTypes_unit_temp_fahrenheit
    unit_displacement_meters = _mscl.WirelessTypes_unit_displacement_meters
    unit_displacement_millimeters = _mscl.WirelessTypes_unit_displacement_millimeters
    unit_displacement_micrometers = _mscl.WirelessTypes_unit_displacement_micrometers
    unit_force_lbf = _mscl.WirelessTypes_unit_force_lbf
    unit_force_newtons = _mscl.WirelessTypes_unit_force_newtons
    unit_force_kiloNewtons = _mscl.WirelessTypes_unit_force_kiloNewtons
    unit_mass_kilograms = _mscl.WirelessTypes_unit_mass_kilograms
    unit_pressure_bar = _mscl.WirelessTypes_unit_pressure_bar
    unit_pressure_psi = _mscl.WirelessTypes_unit_pressure_psi
    unit_pressure_atm = _mscl.WirelessTypes_unit_pressure_atm
    unit_pressure_mmHg = _mscl.WirelessTypes_unit_pressure_mmHg
    unit_pressure_pascal = _mscl.WirelessTypes_unit_pressure_pascal
    unit_pressure_megaPascal = _mscl.WirelessTypes_unit_pressure_megaPascal
    unit_pressure_kiloPascal = _mscl.WirelessTypes_unit_pressure_kiloPascal
    unit_angDisplacement_degrees = _mscl.WirelessTypes_unit_angDisplacement_degrees
    unit_angVelocity_degreesPerSec = _mscl.WirelessTypes_unit_angVelocity_degreesPerSec
    unit_angVelocity_radiansPerSec = _mscl.WirelessTypes_unit_angVelocity_radiansPerSec
    unit_other_percent = _mscl.WirelessTypes_unit_other_percent
    unit_freq_rpm = _mscl.WirelessTypes_unit_freq_rpm
    unit_freq_hertz = _mscl.WirelessTypes_unit_freq_hertz
    unit_rh_percentRh = _mscl.WirelessTypes_unit_rh_percentRh
    unit_other_mVperV = _mscl.WirelessTypes_unit_other_mVperV
    unit_accel_milliG = _mscl.WirelessTypes_unit_accel_milliG
    unit_accel_ftPerSec2 = _mscl.WirelessTypes_unit_accel_ftPerSec2
    unit_other_percentLife = _mscl.WirelessTypes_unit_other_percentLife
    unit_other_count = _mscl.WirelessTypes_unit_other_count
    unit_displacement_feet = _mscl.WirelessTypes_unit_displacement_feet
    unit_displacement_inches = _mscl.WirelessTypes_unit_displacement_inches
    unit_displacement_yards = _mscl.WirelessTypes_unit_displacement_yards
    unit_displacement_miles = _mscl.WirelessTypes_unit_displacement_miles
    unit_displacement_nautMiles = _mscl.WirelessTypes_unit_displacement_nautMiles
    unit_displacement_thouInch = _mscl.WirelessTypes_unit_displacement_thouInch
    unit_displacement_hundInch = _mscl.WirelessTypes_unit_displacement_hundInch
    unit_displacement_kilometers = _mscl.WirelessTypes_unit_displacement_kilometers
    unit_displacement_centimeters = _mscl.WirelessTypes_unit_displacement_centimeters
    unit_irradiance_wattsPerSqMeter = _mscl.WirelessTypes_unit_irradiance_wattsPerSqMeter
    unit_par_microEinstein = _mscl.WirelessTypes_unit_par_microEinstein
    unit_mass_pound = _mscl.WirelessTypes_unit_mass_pound
    unit_power_watt = _mscl.WirelessTypes_unit_power_watt
    unit_power_milliwatt = _mscl.WirelessTypes_unit_power_milliwatt
    unit_power_horsepower = _mscl.WirelessTypes_unit_power_horsepower
    unit_reactivePower_var = _mscl.WirelessTypes_unit_reactivePower_var
    unit_energy_wattHour = _mscl.WirelessTypes_unit_energy_wattHour
    unit_energy_kiloWattHour = _mscl.WirelessTypes_unit_energy_kiloWattHour
    unit_reactiveEnergy_VARh = _mscl.WirelessTypes_unit_reactiveEnergy_VARh
    unit_reactiveEnergy_kVARh = _mscl.WirelessTypes_unit_reactiveEnergy_kVARh
    unit_current_ampere = _mscl.WirelessTypes_unit_current_ampere
    unit_current_milliampere = _mscl.WirelessTypes_unit_current_milliampere
    unit_current_microampere = _mscl.WirelessTypes_unit_current_microampere
    unit_pressure_millibar = _mscl.WirelessTypes_unit_pressure_millibar
    unit_pressure_inHg = _mscl.WirelessTypes_unit_pressure_inHg
    unit_rssi_dBm = _mscl.WirelessTypes_unit_rssi_dBm
    unit_freq_kiloHertz = _mscl.WirelessTypes_unit_freq_kiloHertz
    unit_angDisplacement_radians = _mscl.WirelessTypes_unit_angDisplacement_radians
    unit_velocity_metersPerSec = _mscl.WirelessTypes_unit_velocity_metersPerSec
    unit_velocity_kilometersPerSec = _mscl.WirelessTypes_unit_velocity_kilometersPerSec
    unit_velocity_kilometersPerHr = _mscl.WirelessTypes_unit_velocity_kilometersPerHr
    unit_velocity_milesPerHr = _mscl.WirelessTypes_unit_velocity_milesPerHr
    unit_velocity_knots = _mscl.WirelessTypes_unit_velocity_knots
    unit_volume_cubicMeter = _mscl.WirelessTypes_unit_volume_cubicMeter
    unit_volume_cubicFt = _mscl.WirelessTypes_unit_volume_cubicFt
    unit_volume_liters = _mscl.WirelessTypes_unit_volume_liters
    unit_volume_gallon = _mscl.WirelessTypes_unit_volume_gallon
    unit_flowRate_cubicMetersPerSec = _mscl.WirelessTypes_unit_flowRate_cubicMetersPerSec
    unit_flowRate_cubicFtPerSec = _mscl.WirelessTypes_unit_flowRate_cubicFtPerSec
    unit_torque_newtonMeter = _mscl.WirelessTypes_unit_torque_newtonMeter
    unit_torque_footPounds = _mscl.WirelessTypes_unit_torque_footPounds
    unit_torque_inchPounds = _mscl.WirelessTypes_unit_torque_inchPounds
    unit_time_secs = _mscl.WirelessTypes_unit_time_secs
    unit_time_nanosecs = _mscl.WirelessTypes_unit_time_nanosecs
    unit_time_microsecs = _mscl.WirelessTypes_unit_time_microsecs
    unit_time_millisecs = _mscl.WirelessTypes_unit_time_millisecs
    unit_time_minutes = _mscl.WirelessTypes_unit_time_minutes
    unit_time_hours = _mscl.WirelessTypes_unit_time_hours
    unit_time_days = _mscl.WirelessTypes_unit_time_days
    unit_time_weeks = _mscl.WirelessTypes_unit_time_weeks
    unit_other_value = _mscl.WirelessTypes_unit_other_value
    unit_magneticFlux_gauss = _mscl.WirelessTypes_unit_magneticFlux_gauss
    unit_other_gSec = _mscl.WirelessTypes_unit_other_gSec
    unit_other_secsPerSec = _mscl.WirelessTypes_unit_other_secsPerSec
    unit_rssi_dBHz = _mscl.WirelessTypes_unit_rssi_dBHz
    unit_density_kgPerMeter3 = _mscl.WirelessTypes_unit_density_kgPerMeter3
    unit_other_unitless = _mscl.WirelessTypes_unit_other_unitless
    unit_velocity_inchesPerSec = _mscl.WirelessTypes_unit_velocity_inchesPerSec
    unit_force_kg = _mscl.WirelessTypes_unit_force_kg
    unit_rawVoltage_volts = _mscl.WirelessTypes_unit_rawVoltage_volts
    unit_rawVoltage_millivolts = _mscl.WirelessTypes_unit_rawVoltage_millivolts
    unit_rawVoltage_microvolts = _mscl.WirelessTypes_unit_rawVoltage_microvolts
    unit_resistance_ohm = _mscl.WirelessTypes_unit_resistance_ohm
    unit_resistance_milliohm = _mscl.WirelessTypes_unit_resistance_milliohm
    unit_resistance_kiloohm = _mscl.WirelessTypes_unit_resistance_kiloohm
    unit_velocity_mmPerSec = _mscl.WirelessTypes_unit_velocity_mmPerSec
    unit_mass_grams = _mscl.WirelessTypes_unit_mass_grams
    unit_mass_ton = _mscl.WirelessTypes_unit_mass_ton
    unit_mass_tonne = _mscl.WirelessTypes_unit_mass_tonne
    chType_none = _mscl.WirelessTypes_chType_none
    chType_fullDifferential = _mscl.WirelessTypes_chType_fullDifferential
    chType_singleEnded = _mscl.WirelessTypes_chType_singleEnded
    chType_battery = _mscl.WirelessTypes_chType_battery
    chType_temperature = _mscl.WirelessTypes_chType_temperature
    chType_rh = _mscl.WirelessTypes_chType_rh
    chType_acceleration = _mscl.WirelessTypes_chType_acceleration
    chType_displacement = _mscl.WirelessTypes_chType_displacement
    chType_voltage = _mscl.WirelessTypes_chType_voltage
    chType_diffTemperature = _mscl.WirelessTypes_chType_diffTemperature
    chType_digital = _mscl.WirelessTypes_chType_digital
    chType_tilt = _mscl.WirelessTypes_chType_tilt
    voltageType_singleEnded = _mscl.WirelessTypes_voltageType_singleEnded
    voltageType_differential = _mscl.WirelessTypes_voltageType_differential
    settling_4ms = _mscl.WirelessTypes_settling_4ms
    settling_8ms = _mscl.WirelessTypes_settling_8ms
    settling_16ms = _mscl.WirelessTypes_settling_16ms
    settling_32ms = _mscl.WirelessTypes_settling_32ms
    settling_40ms = _mscl.WirelessTypes_settling_40ms
    settling_48ms = _mscl.WirelessTypes_settling_48ms
    settling_60ms = _mscl.WirelessTypes_settling_60ms
    settling_101ms_90db = _mscl.WirelessTypes_settling_101ms_90db
    settling_120ms_80db = _mscl.WirelessTypes_settling_120ms_80db
    settling_120ms_65db = _mscl.WirelessTypes_settling_120ms_65db
    settling_160ms_69db = _mscl.WirelessTypes_settling_160ms_69db
    settling_200ms = _mscl.WirelessTypes_settling_200ms
    transducer_thermocouple = _mscl.WirelessTypes_transducer_thermocouple
    transducer_rtd = _mscl.WirelessTypes_transducer_rtd
    transducer_thermistor = _mscl.WirelessTypes_transducer_thermistor
    tc_uncompensated = _mscl.WirelessTypes_tc_uncompensated
    tc_K = _mscl.WirelessTypes_tc_K
    tc_J = _mscl.WirelessTypes_tc_J
    tc_R = _mscl.WirelessTypes_tc_R
    tc_S = _mscl.WirelessTypes_tc_S
    tc_T = _mscl.WirelessTypes_tc_T
    tc_E = _mscl.WirelessTypes_tc_E
    tc_B = _mscl.WirelessTypes_tc_B
    tc_N = _mscl.WirelessTypes_tc_N
    tc_customPolynomial = _mscl.WirelessTypes_tc_customPolynomial
    rtd_uncompensated = _mscl.WirelessTypes_rtd_uncompensated
    rtd_pt10 = _mscl.WirelessTypes_rtd_pt10
    rtd_pt50 = _mscl.WirelessTypes_rtd_pt50
    rtd_pt100 = _mscl.WirelessTypes_rtd_pt100
    rtd_pt200 = _mscl.WirelessTypes_rtd_pt200
    rtd_pt500 = _mscl.WirelessTypes_rtd_pt500
    rtd_pt1000 = _mscl.WirelessTypes_rtd_pt1000
    rtd_2wire = _mscl.WirelessTypes_rtd_2wire
    rtd_3wire = _mscl.WirelessTypes_rtd_3wire
    rtd_4wire = _mscl.WirelessTypes_rtd_4wire
    thermistor_uncompensated = _mscl.WirelessTypes_thermistor_uncompensated
    thermistor_44004_44033 = _mscl.WirelessTypes_thermistor_44004_44033
    thermistor_44005_44030 = _mscl.WirelessTypes_thermistor_44005_44030
    thermistor_44007_44034 = _mscl.WirelessTypes_thermistor_44007_44034
    thermistor_44006_44031 = _mscl.WirelessTypes_thermistor_44006_44031
    thermistor_44008_44032 = _mscl.WirelessTypes_thermistor_44008_44032
    thermistor_ysi_400 = _mscl.WirelessTypes_thermistor_ysi_400
    sampleRate_104170Hz = _mscl.WirelessTypes_sampleRate_104170Hz
    sampleRate_78125Hz = _mscl.WirelessTypes_sampleRate_78125Hz
    sampleRate_62500Hz = _mscl.WirelessTypes_sampleRate_62500Hz
    sampleRate_25000Hz = _mscl.WirelessTypes_sampleRate_25000Hz
    sampleRate_12500Hz = _mscl.WirelessTypes_sampleRate_12500Hz
    sampleRate_3200Hz = _mscl.WirelessTypes_sampleRate_3200Hz
    sampleRate_1600Hz = _mscl.WirelessTypes_sampleRate_1600Hz
    sampleRate_800Hz = _mscl.WirelessTypes_sampleRate_800Hz
    sampleRate_300Hz = _mscl.WirelessTypes_sampleRate_300Hz
    sampleRate_1kHz = _mscl.WirelessTypes_sampleRate_1kHz
    sampleRate_2kHz = _mscl.WirelessTypes_sampleRate_2kHz
    sampleRate_3kHz = _mscl.WirelessTypes_sampleRate_3kHz
    sampleRate_4kHz = _mscl.WirelessTypes_sampleRate_4kHz
    sampleRate_5kHz = _mscl.WirelessTypes_sampleRate_5kHz
    sampleRate_6kHz = _mscl.WirelessTypes_sampleRate_6kHz
    sampleRate_7kHz = _mscl.WirelessTypes_sampleRate_7kHz
    sampleRate_8kHz = _mscl.WirelessTypes_sampleRate_8kHz
    sampleRate_9kHz = _mscl.WirelessTypes_sampleRate_9kHz
    sampleRate_10kHz = _mscl.WirelessTypes_sampleRate_10kHz
    sampleRate_20kHz = _mscl.WirelessTypes_sampleRate_20kHz
    sampleRate_30kHz = _mscl.WirelessTypes_sampleRate_30kHz
    sampleRate_40kHz = _mscl.WirelessTypes_sampleRate_40kHz
    sampleRate_50kHz = _mscl.WirelessTypes_sampleRate_50kHz
    sampleRate_60kHz = _mscl.WirelessTypes_sampleRate_60kHz
    sampleRate_70kHz = _mscl.WirelessTypes_sampleRate_70kHz
    sampleRate_80kHz = _mscl.WirelessTypes_sampleRate_80kHz
    sampleRate_90kHz = _mscl.WirelessTypes_sampleRate_90kHz
    sampleRate_100kHz = _mscl.WirelessTypes_sampleRate_100kHz
    sampleRate_887Hz = _mscl.WirelessTypes_sampleRate_887Hz
    sampleRate_8192Hz = _mscl.WirelessTypes_sampleRate_8192Hz
    sampleRate_4096Hz = _mscl.WirelessTypes_sampleRate_4096Hz
    sampleRate_2048Hz = _mscl.WirelessTypes_sampleRate_2048Hz
    sampleRate_1024Hz = _mscl.WirelessTypes_sampleRate_1024Hz
    sampleRate_512Hz = _mscl.WirelessTypes_sampleRate_512Hz
    sampleRate_256Hz = _mscl.WirelessTypes_sampleRate_256Hz
    sampleRate_128Hz = _mscl.WirelessTypes_sampleRate_128Hz
    sampleRate_64Hz = _mscl.WirelessTypes_sampleRate_64Hz
    sampleRate_32Hz = _mscl.WirelessTypes_sampleRate_32Hz
    sampleRate_16Hz = _mscl.WirelessTypes_sampleRate_16Hz
    sampleRate_8Hz = _mscl.WirelessTypes_sampleRate_8Hz
    sampleRate_4Hz = _mscl.WirelessTypes_sampleRate_4Hz
    sampleRate_2Hz = _mscl.WirelessTypes_sampleRate_2Hz
    sampleRate_1Hz = _mscl.WirelessTypes_sampleRate_1Hz
    sampleRate_2Sec = _mscl.WirelessTypes_sampleRate_2Sec
    sampleRate_5Sec = _mscl.WirelessTypes_sampleRate_5Sec
    sampleRate_10Sec = _mscl.WirelessTypes_sampleRate_10Sec
    sampleRate_30Sec = _mscl.WirelessTypes_sampleRate_30Sec
    sampleRate_1Min = _mscl.WirelessTypes_sampleRate_1Min
    sampleRate_2Min = _mscl.WirelessTypes_sampleRate_2Min
    sampleRate_5Min = _mscl.WirelessTypes_sampleRate_5Min
    sampleRate_10Min = _mscl.WirelessTypes_sampleRate_10Min
    sampleRate_30Min = _mscl.WirelessTypes_sampleRate_30Min
    sampleRate_60Min = _mscl.WirelessTypes_sampleRate_60Min
    sampleRate_24Hours = _mscl.WirelessTypes_sampleRate_24Hours
    region_usa = _mscl.WirelessTypes_region_usa
    region_europeanUnion = _mscl.WirelessTypes_region_europeanUnion
    region_japan = _mscl.WirelessTypes_region_japan
    region_other = _mscl.WirelessTypes_region_other
    region_brazil = _mscl.WirelessTypes_region_brazil
    region_china = _mscl.WirelessTypes_region_china
    region_australia_newzealand = _mscl.WirelessTypes_region_australia_newzealand
    region_singapore = _mscl.WirelessTypes_region_singapore
    region_canada = _mscl.WirelessTypes_region_canada
    region_southAfrica = _mscl.WirelessTypes_region_southAfrica
    region_indonesia = _mscl.WirelessTypes_region_indonesia
    region_taiwan = _mscl.WirelessTypes_region_taiwan
    chSetting_inputRange = _mscl.WirelessTypes_chSetting_inputRange
    chSetting_filterSettlingTime = _mscl.WirelessTypes_chSetting_filterSettlingTime
    chSetting_thermocoupleType = _mscl.WirelessTypes_chSetting_thermocoupleType
    chSetting_linearEquation = _mscl.WirelessTypes_chSetting_linearEquation
    chSetting_unit = _mscl.WirelessTypes_chSetting_unit
    chSetting_equationType = _mscl.WirelessTypes_chSetting_equationType
    chSetting_hardwareOffset = _mscl.WirelessTypes_chSetting_hardwareOffset
    chSetting_autoBalance = _mscl.WirelessTypes_chSetting_autoBalance
    chSetting_gaugeFactor = _mscl.WirelessTypes_chSetting_gaugeFactor
    chSetting_antiAliasingFilter = _mscl.WirelessTypes_chSetting_antiAliasingFilter
    chSetting_legacyShuntCal = _mscl.WirelessTypes_chSetting_legacyShuntCal
    chSetting_autoShuntCal = _mscl.WirelessTypes_chSetting_autoShuntCal
    chSetting_lowPassFilter = _mscl.WirelessTypes_chSetting_lowPassFilter
    chSetting_highPassFilter = _mscl.WirelessTypes_chSetting_highPassFilter
    chSetting_tempSensorOptions = _mscl.WirelessTypes_chSetting_tempSensorOptions
    chSetting_debounceFilter = _mscl.WirelessTypes_chSetting_debounceFilter
    chSetting_pullUpResistor = _mscl.WirelessTypes_chSetting_pullUpResistor
    chSetting_factoryLinearEq = _mscl.WirelessTypes_chSetting_factoryLinearEq
    chSetting_factoryUnit = _mscl.WirelessTypes_chSetting_factoryUnit
    chSetting_factoryEqType = _mscl.WirelessTypes_chSetting_factoryEqType
    autobalance_success = _mscl.WirelessTypes_autobalance_success
    autobalance_maybeInvalid = _mscl.WirelessTypes_autobalance_maybeInvalid
    autobalance_notSupportedByNode = _mscl.WirelessTypes_autobalance_notSupportedByNode
    autobalance_notSupportedByCh = _mscl.WirelessTypes_autobalance_notSupportedByCh
    autobalance_targetOutOfRange = _mscl.WirelessTypes_autobalance_targetOutOfRange
    autobalance_failed = _mscl.WirelessTypes_autobalance_failed
    autobalance_legacyNone = _mscl.WirelessTypes_autobalance_legacyNone
    autobalance_notComplete = _mscl.WirelessTypes_autobalance_notComplete
    autocal_success = _mscl.WirelessTypes_autocal_success
    autocal_maybeInvalid_applied = _mscl.WirelessTypes_autocal_maybeInvalid_applied
    autocal_maybeInvalid_notApplied = _mscl.WirelessTypes_autocal_maybeInvalid_notApplied
    autocal_notComplete = _mscl.WirelessTypes_autocal_notComplete
    autocalError_none = _mscl.WirelessTypes_autocalError_none
    autocalError_sensorDetached = _mscl.WirelessTypes_autocalError_sensorDetached
    autocalError_sensorShorted = _mscl.WirelessTypes_autocalError_sensorShorted
    autocalError_unsupportedChannel = _mscl.WirelessTypes_autocalError_unsupportedChannel
    autocalError_baseHighRail = _mscl.WirelessTypes_autocalError_baseHighRail
    autocalError_baseLowRail = _mscl.WirelessTypes_autocalError_baseLowRail
    autocalError_shuntHighRail = _mscl.WirelessTypes_autocalError_shuntHighRail
    autocalError_shuntLowRail = _mscl.WirelessTypes_autocalError_shuntLowRail
    autocalError_ramp = _mscl.WirelessTypes_autocalError_ramp
    autocalError_noShunt = _mscl.WirelessTypes_autocalError_noShunt
    autocalError_timeout = _mscl.WirelessTypes_autocalError_timeout
    fatigueMode_angleStrain = _mscl.WirelessTypes_fatigueMode_angleStrain
    fatigueMode_distributedAngle = _mscl.WirelessTypes_fatigueMode_distributedAngle
    fatigueMode_rawGaugeStrain = _mscl.WirelessTypes_fatigueMode_rawGaugeStrain
    eventTrigger_ceiling = _mscl.WirelessTypes_eventTrigger_ceiling
    eventTrigger_floor = _mscl.WirelessTypes_eventTrigger_floor
    filter_33000hz = _mscl.WirelessTypes_filter_33000hz
    filter_20000hz = _mscl.WirelessTypes_filter_20000hz
    filter_10000hz = _mscl.WirelessTypes_filter_10000hz
    filter_5222hz = _mscl.WirelessTypes_filter_5222hz
    filter_5000hz = _mscl.WirelessTypes_filter_5000hz
    filter_4416hz = _mscl.WirelessTypes_filter_4416hz
    filter_4096hz = _mscl.WirelessTypes_filter_4096hz
    filter_4000hz = _mscl.WirelessTypes_filter_4000hz
    filter_2208hz = _mscl.WirelessTypes_filter_2208hz
    filter_2048hz = _mscl.WirelessTypes_filter_2048hz
    filter_2000hz = _mscl.WirelessTypes_filter_2000hz
    filter_1104hz = _mscl.WirelessTypes_filter_1104hz
    filter_1024hz = _mscl.WirelessTypes_filter_1024hz
    filter_1000hz = _mscl.WirelessTypes_filter_1000hz
    filter_800hz = _mscl.WirelessTypes_filter_800hz
    filter_552hz = _mscl.WirelessTypes_filter_552hz
    filter_512hz = _mscl.WirelessTypes_filter_512hz
    filter_500hz = _mscl.WirelessTypes_filter_500hz
    filter_418hz = _mscl.WirelessTypes_filter_418hz
    filter_294hz = _mscl.WirelessTypes_filter_294hz
    filter_256hz = _mscl.WirelessTypes_filter_256hz
    filter_250hz = _mscl.WirelessTypes_filter_250hz
    filter_209hz = _mscl.WirelessTypes_filter_209hz
    filter_200hz = _mscl.WirelessTypes_filter_200hz
    filter_147hz = _mscl.WirelessTypes_filter_147hz
    filter_128hz = _mscl.WirelessTypes_filter_128hz
    filter_125hz = _mscl.WirelessTypes_filter_125hz
    filter_104hz = _mscl.WirelessTypes_filter_104hz
    filter_100hz = _mscl.WirelessTypes_filter_100hz
    filter_62hz = _mscl.WirelessTypes_filter_62hz
    filter_52hz = _mscl.WirelessTypes_filter_52hz
    filter_50hz = _mscl.WirelessTypes_filter_50hz
    filter_31hz = _mscl.WirelessTypes_filter_31hz
    filter_26hz = _mscl.WirelessTypes_filter_26hz
    filter_12_66hz = _mscl.WirelessTypes_filter_12_66hz
    filter_2_6hz = _mscl.WirelessTypes_filter_2_6hz
    highPass_off = _mscl.WirelessTypes_highPass_off
    highPass_auto = _mscl.WirelessTypes_highPass_auto
    cfc_10 = _mscl.WirelessTypes_cfc_10
    cfc_21 = _mscl.WirelessTypes_cfc_21
    cfc_60 = _mscl.WirelessTypes_cfc_60
    storageLimit_overwrite = _mscl.WirelessTypes_storageLimit_overwrite
    storageLimit_stop = _mscl.WirelessTypes_storageLimit_stop
    range_14_545mV = _mscl.WirelessTypes_range_14_545mV
    range_10_236mV = _mscl.WirelessTypes_range_10_236mV
    range_7_608mV = _mscl.WirelessTypes_range_7_608mV
    range_4_046mV = _mscl.WirelessTypes_range_4_046mV
    range_2_008mV = _mscl.WirelessTypes_range_2_008mV
    range_1_511mV = _mscl.WirelessTypes_range_1_511mV
    range_1_001mV = _mscl.WirelessTypes_range_1_001mV
    range_0_812mV = _mscl.WirelessTypes_range_0_812mV
    range_75mV = _mscl.WirelessTypes_range_75mV
    range_37_5mV = _mscl.WirelessTypes_range_37_5mV
    range_18_75mV = _mscl.WirelessTypes_range_18_75mV
    range_9_38mV = _mscl.WirelessTypes_range_9_38mV
    range_4_69mV = _mscl.WirelessTypes_range_4_69mV
    range_2_34mV = _mscl.WirelessTypes_range_2_34mV
    range_1_17mV = _mscl.WirelessTypes_range_1_17mV
    range_0_586mV = _mscl.WirelessTypes_range_0_586mV
    range_70mV = _mscl.WirelessTypes_range_70mV
    range_35mV = _mscl.WirelessTypes_range_35mV
    range_17_5mV = _mscl.WirelessTypes_range_17_5mV
    range_8_75mV = _mscl.WirelessTypes_range_8_75mV
    range_4_38mV = _mscl.WirelessTypes_range_4_38mV
    range_2_19mV = _mscl.WirelessTypes_range_2_19mV
    range_1_09mV = _mscl.WirelessTypes_range_1_09mV
    range_0_547mV = _mscl.WirelessTypes_range_0_547mV
    range_44mV = _mscl.WirelessTypes_range_44mV
    range_30mV = _mscl.WirelessTypes_range_30mV
    range_20mV = _mscl.WirelessTypes_range_20mV
    range_15mV = _mscl.WirelessTypes_range_15mV
    range_10mV = _mscl.WirelessTypes_range_10mV
    range_5mV = _mscl.WirelessTypes_range_5mV
    range_3mV = _mscl.WirelessTypes_range_3mV
    range_2mV = _mscl.WirelessTypes_range_2mV
    range_6mV = _mscl.WirelessTypes_range_6mV
    range_1mV = _mscl.WirelessTypes_range_1mV
    range_50mV = _mscl.WirelessTypes_range_50mV
    range_2_5mV = _mscl.WirelessTypes_range_2_5mV
    range_0_6mV = _mscl.WirelessTypes_range_0_6mV
    range_0_35mV = _mscl.WirelessTypes_range_0_35mV
    range_0_1mV = _mscl.WirelessTypes_range_0_1mV
    range_156mV = _mscl.WirelessTypes_range_156mV
    range_78_1mV = _mscl.WirelessTypes_range_78_1mV
    range_39mV = _mscl.WirelessTypes_range_39mV
    range_19_5mV = _mscl.WirelessTypes_range_19_5mV
    range_9_76mV = _mscl.WirelessTypes_range_9_76mV
    range_4_88mV = _mscl.WirelessTypes_range_4_88mV
    range_2_44mV = _mscl.WirelessTypes_range_2_44mV
    range_1_22mV = _mscl.WirelessTypes_range_1_22mV
    range_10_24V = _mscl.WirelessTypes_range_10_24V
    range_5_12V = _mscl.WirelessTypes_range_5_12V
    range_2_56V = _mscl.WirelessTypes_range_2_56V
    range_0to10_24V = _mscl.WirelessTypes_range_0to10_24V
    range_0to5_12V = _mscl.WirelessTypes_range_0to5_12V
    range_1_147V = _mscl.WirelessTypes_range_1_147V
    range_585mV = _mscl.WirelessTypes_range_585mV
    range_292_5mV = _mscl.WirelessTypes_range_292_5mV
    range_146_25mV = _mscl.WirelessTypes_range_146_25mV
    range_73_13mV = _mscl.WirelessTypes_range_73_13mV
    range_36_56mV = _mscl.WirelessTypes_range_36_56mV
    range_18_23mV = _mscl.WirelessTypes_range_18_23mV
    range_9_14mV = _mscl.WirelessTypes_range_9_14mV
    range_5_74V = _mscl.WirelessTypes_range_5_74V
    range_2_93V = _mscl.WirelessTypes_range_2_93V
    range_1_46V = _mscl.WirelessTypes_range_1_46V
    range_731_3mV = _mscl.WirelessTypes_range_731_3mV
    range_365_6mV = _mscl.WirelessTypes_range_365_6mV
    range_182_8mV = _mscl.WirelessTypes_range_182_8mV
    range_91_4mV = _mscl.WirelessTypes_range_91_4mV
    range_45_7mV = _mscl.WirelessTypes_range_45_7mV
    range_62_5mV = _mscl.WirelessTypes_range_62_5mV
    range_31_25mV = _mscl.WirelessTypes_range_31_25mV
    range_15_63mV = _mscl.WirelessTypes_range_15_63mV
    range_7_81mV = _mscl.WirelessTypes_range_7_81mV
    range_3_91mV = _mscl.WirelessTypes_range_3_91mV
    range_1_95mV = _mscl.WirelessTypes_range_1_95mV
    range_0_976mV = _mscl.WirelessTypes_range_0_976mV
    range_0_488mV = _mscl.WirelessTypes_range_0_488mV
    range_2G = _mscl.WirelessTypes_range_2G
    range_4G = _mscl.WirelessTypes_range_4G
    range_8G = _mscl.WirelessTypes_range_8G
    range_10G = _mscl.WirelessTypes_range_10G
    range_20G = _mscl.WirelessTypes_range_20G
    range_40G = _mscl.WirelessTypes_range_40G
    range_2_5V = _mscl.WirelessTypes_range_2_5V
    range_1_25V = _mscl.WirelessTypes_range_1_25V
    range_625mV = _mscl.WirelessTypes_range_625mV
    range_312_5mV = _mscl.WirelessTypes_range_312_5mV
    range_156_25mV = _mscl.WirelessTypes_range_156_25mV
    range_78_125mV = _mscl.WirelessTypes_range_78_125mV
    range_39_063mV = _mscl.WirelessTypes_range_39_063mV
    range_19_532mV = _mscl.WirelessTypes_range_19_532mV
    range_0to2_5V = _mscl.WirelessTypes_range_0to2_5V
    range_0to1_25V = _mscl.WirelessTypes_range_0to1_25V
    range_0to625mV = _mscl.WirelessTypes_range_0to625mV
    range_0to312_5mV = _mscl.WirelessTypes_range_0to312_5mV
    range_0to156_25mV = _mscl.WirelessTypes_range_0to156_25mV
    range_0to78_125mV = _mscl.WirelessTypes_range_0to78_125mV
    range_0to39_063mV = _mscl.WirelessTypes_range_0to39_063mV
    range_0to19_532mV = _mscl.WirelessTypes_range_0to19_532mV
    range_9_766mV = _mscl.WirelessTypes_range_9_766mV
    range_1_35V_or_0to1000000ohm = _mscl.WirelessTypes_range_1_35V_or_0to1000000ohm
    range_1_25V_or_0to10000ohm = _mscl.WirelessTypes_range_1_25V_or_0to10000ohm
    range_625mV_or_0to3333_3ohm = _mscl.WirelessTypes_range_625mV_or_0to3333_3ohm
    range_312_5mV_or_0to1428_6ohm = _mscl.WirelessTypes_range_312_5mV_or_0to1428_6ohm
    range_156_25mV_or_0to666_67ohm = _mscl.WirelessTypes_range_156_25mV_or_0to666_67ohm
    range_78_125mV_or_0to322_58ohm = _mscl.WirelessTypes_range_78_125mV_or_0to322_58ohm
    range_39_0625mV_or_0to158_73ohm = _mscl.WirelessTypes_range_39_0625mV_or_0to158_73ohm
    range_19_5313mV_or_0to78_74ohm = _mscl.WirelessTypes_range_19_5313mV_or_0to78_74ohm
    range_750mV = _mscl.WirelessTypes_range_750mV
    range_375mV = _mscl.WirelessTypes_range_375mV
    range_187_5mV = _mscl.WirelessTypes_range_187_5mV
    range_93_75mV = _mscl.WirelessTypes_range_93_75mV
    range_46_875mV = _mscl.WirelessTypes_range_46_875mV
    range_23_438mV = _mscl.WirelessTypes_range_23_438mV
    range_11_719mV = _mscl.WirelessTypes_range_11_719mV
    range_5_859mV = _mscl.WirelessTypes_range_5_859mV
    range_0to1_5V = _mscl.WirelessTypes_range_0to1_5V
    range_0to750mV = _mscl.WirelessTypes_range_0to750mV
    range_0to375mV = _mscl.WirelessTypes_range_0to375mV
    range_0to187_5mV = _mscl.WirelessTypes_range_0to187_5mV
    range_0to93_75mV = _mscl.WirelessTypes_range_0to93_75mV
    range_0to46_875mV = _mscl.WirelessTypes_range_0to46_875mV
    range_0to23_438mV = _mscl.WirelessTypes_range_0to23_438mV
    range_0to11_719mV = _mscl.WirelessTypes_range_0to11_719mV
    range_1_5V = _mscl.WirelessTypes_range_1_5V
    range_1_35V = _mscl.WirelessTypes_range_1_35V
    range_0to1000000ohm = _mscl.WirelessTypes_range_0to1000000ohm
    range_0to10000ohm = _mscl.WirelessTypes_range_0to10000ohm
    range_0to3333_3ohm = _mscl.WirelessTypes_range_0to3333_3ohm
    range_0to1428_6ohm = _mscl.WirelessTypes_range_0to1428_6ohm
    range_0to666_67ohm = _mscl.WirelessTypes_range_0to666_67ohm
    range_0to322_58ohm = _mscl.WirelessTypes_range_0to322_58ohm
    range_0to158_73ohm = _mscl.WirelessTypes_range_0to158_73ohm
    range_0to78_74ohm = _mscl.WirelessTypes_range_0to78_74ohm
    range_39_0625mV = _mscl.WirelessTypes_range_39_0625mV
    range_19_5313mV = _mscl.WirelessTypes_range_19_5313mV
    range_125mV = _mscl.WirelessTypes_range_125mV
    range_invalid = _mscl.WirelessTypes_range_invalid
    dataMode_none = _mscl.WirelessTypes_dataMode_none
    dataMode_raw = _mscl.WirelessTypes_dataMode_raw
    dataMode_derived = _mscl.WirelessTypes_dataMode_derived
    dataMode_raw_derived = _mscl.WirelessTypes_dataMode_raw_derived
    derivedCategory_rms = _mscl.WirelessTypes_derivedCategory_rms
    derivedCategory_peakToPeak = _mscl.WirelessTypes_derivedCategory_peakToPeak
    derivedCategory_velocity = _mscl.WirelessTypes_derivedCategory_velocity
    derivedCategory_crestFactor = _mscl.WirelessTypes_derivedCategory_crestFactor
    derivedCategory_mean = _mscl.WirelessTypes_derivedCategory_mean
    derivedAlgId_rms = _mscl.WirelessTypes_derivedAlgId_rms
    derivedAlgId_peakToPeak = _mscl.WirelessTypes_derivedAlgId_peakToPeak
    derivedAlgId_ips = _mscl.WirelessTypes_derivedAlgId_ips
    derivedAlgId_crestFactor = _mscl.WirelessTypes_derivedAlgId_crestFactor
    derivedAlgId_mean = _mscl.WirelessTypes_derivedAlgId_mean
    derivedAlgId_mmps = _mscl.WirelessTypes_derivedAlgId_mmps
    derivedVelocity_ips = _mscl.WirelessTypes_derivedVelocity_ips
    derivedVelocity_mmps = _mscl.WirelessTypes_derivedVelocity_mmps
    commProtocol_lxrs = _mscl.WirelessTypes_commProtocol_lxrs
    commProtocol_lxrsPlus = _mscl.WirelessTypes_commProtocol_lxrsPlus
    voltage_5120mV = _mscl.WirelessTypes_voltage_5120mV
    voltage_5000mV = _mscl.WirelessTypes_voltage_5000mV
    voltage_4096mV = _mscl.WirelessTypes_voltage_4096mV
    voltage_3000mV = _mscl.WirelessTypes_voltage_3000mV
    voltage_2800mV = _mscl.WirelessTypes_voltage_2800mV
    voltage_2750mV = _mscl.WirelessTypes_voltage_2750mV
    voltage_2700mV = _mscl.WirelessTypes_voltage_2700mV
    voltage_2500mV = _mscl.WirelessTypes_voltage_2500mV
    voltage_1500mV = _mscl.WirelessTypes_voltage_1500mV
    sensorOutputMode_accel = _mscl.WirelessTypes_sensorOutputMode_accel
    sensorOutputMode_tilt = _mscl.WirelessTypes_sensorOutputMode_tilt
    batteryStatus_good = _mscl.WirelessTypes_batteryStatus_good
    batteryStatus_low = _mscl.WirelessTypes_batteryStatus_low
    batteryStatus_critical = _mscl.WirelessTypes_batteryStatus_critical
    externalPower_notConnected = _mscl.WirelessTypes_externalPower_notConnected
    externalPower_connected = _mscl.WirelessTypes_externalPower_connected
    delayVersion_v1 = _mscl.WirelessTypes_delayVersion_v1
    delayVersion_v2 = _mscl.WirelessTypes_delayVersion_v2
    delayVersion_v3 = _mscl.WirelessTypes_delayVersion_v3
    delayVersion_v4 = _mscl.WirelessTypes_delayVersion_v4
    UNKNOWN_RSSI = _mscl.WirelessTypes_UNKNOWN_RSSI

    def __init__(self):
        _mscl.WirelessTypes_swiginit(self, _mscl.new_WirelessTypes())
    __swig_destroy__ = _mscl.delete_WirelessTypes

# Register WirelessTypes in _mscl:
_mscl.WirelessTypes_swigregister(WirelessTypes)

class SampleRate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    rateType_seconds = _mscl.SampleRate_rateType_seconds
    rateType_hertz = _mscl.SampleRate_rateType_hertz
    rateType_event = _mscl.SampleRate_rateType_event
    rateType_decimation = _mscl.SampleRate_rateType_decimation

    def __init__(self, *args):
        _mscl.SampleRate_swiginit(self, _mscl.new_SampleRate(*args))

    def __str__(self):
        return _mscl.SampleRate___str__(self)

    def prettyStr(self):
        return _mscl.SampleRate_prettyStr(self)

    def samplePeriod(self):
        return _mscl.SampleRate_samplePeriod(self)

    def samplesPerSecond(self):
        return _mscl.SampleRate_samplesPerSecond(self)

    def rateType(self):
        return _mscl.SampleRate_rateType(self)

    def samples(self):
        return _mscl.SampleRate_samples(self)

    def toWirelessSampleRate(self):
        return _mscl.SampleRate_toWirelessSampleRate(self)

    def toDecimation(self, sampleRateBase):
        return _mscl.SampleRate_toDecimation(self, sampleRateBase)

    @staticmethod
    def Hertz(samplesPerSecond):
        return _mscl.SampleRate_Hertz(samplesPerSecond)

    @staticmethod
    def KiloHertz(kSamplesPerSecond):
        return _mscl.SampleRate_KiloHertz(kSamplesPerSecond)

    @staticmethod
    def Seconds(secondsBetweenSamples):
        return _mscl.SampleRate_Seconds(secondsBetweenSamples)

    @staticmethod
    def Event():
        return _mscl.SampleRate_Event()

    @staticmethod
    def Decimation(rateDecimation):
        return _mscl.SampleRate_Decimation(rateDecimation)

    @staticmethod
    def FromWirelessEepromValue(eepromValue):
        return _mscl.SampleRate_FromWirelessEepromValue(eepromValue)

    @staticmethod
    def FromInertialRateDecimationInfo(baseRate, rateDecimation):
        return _mscl.SampleRate_FromInertialRateDecimationInfo(baseRate, rateDecimation)
    __swig_destroy__ = _mscl.delete_SampleRate

# Register SampleRate in _mscl:
_mscl.SampleRate_swigregister(SampleRate)

def SampleRate_Hertz(samplesPerSecond):
    return _mscl.SampleRate_Hertz(samplesPerSecond)

def SampleRate_KiloHertz(kSamplesPerSecond):
    return _mscl.SampleRate_KiloHertz(kSamplesPerSecond)

def SampleRate_Seconds(secondsBetweenSamples):
    return _mscl.SampleRate_Seconds(secondsBetweenSamples)

def SampleRate_Event():
    return _mscl.SampleRate_Event()

def SampleRate_Decimation(rateDecimation):
    return _mscl.SampleRate_Decimation(rateDecimation)

def SampleRate_FromWirelessEepromValue(eepromValue):
    return _mscl.SampleRate_FromWirelessEepromValue(eepromValue)

def SampleRate_FromInertialRateDecimationInfo(baseRate, rateDecimation):
    return _mscl.SampleRate_FromInertialRateDecimationInfo(baseRate, rateDecimation)

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.Matrix_swiginit(self, _mscl.new_Matrix())

    def valuesType(self):
        return _mscl.Matrix_valuesType(self)

    def rows(self):
        return _mscl.Matrix_rows(self)

    def columns(self):
        return _mscl.Matrix_columns(self)

    def as_doubleAt(self, row, column):
        return _mscl.Matrix_as_doubleAt(self, row, column)

    def as_floatAt(self, row, column):
        return _mscl.Matrix_as_floatAt(self, row, column)

    def as_uint16At(self, row, column):
        return _mscl.Matrix_as_uint16At(self, row, column)

    def as_uint8At(self, row, column):
        return _mscl.Matrix_as_uint8At(self, row, column)

    def __str__(self):
        return _mscl.Matrix___str__(self)
    __swig_destroy__ = _mscl.delete_Matrix

# Register Matrix in _mscl:
_mscl.Matrix_swigregister(Matrix)

class Vector(Matrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.Vector_swiginit(self, _mscl.new_Vector())

    def size(self):
        return _mscl.Vector_size(self)

    def as_doubleAt(self, index):
        return _mscl.Vector_as_doubleAt(self, index)

    def as_floatAt(self, index):
        return _mscl.Vector_as_floatAt(self, index)

    def as_uint16At(self, index):
        return _mscl.Vector_as_uint16At(self, index)

    def as_uint8At(self, index):
        return _mscl.Vector_as_uint8At(self, index)
    __swig_destroy__ = _mscl.delete_Vector

# Register Vector in _mscl:
_mscl.Vector_swigregister(Vector)

class Bitfield(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Bitfield_swiginit(self, _mscl.new_Bitfield(*args))
    __swig_destroy__ = _mscl.delete_Bitfield

    def value(self, *args):
        return _mscl.Bitfield_value(self, *args)

    def get(self, mask, shiftToLsb=True):
        return _mscl.Bitfield_get(self, mask, shiftToLsb)

    def set(self, mask, value, shiftRequired=True):
        return _mscl.Bitfield_set(self, mask, value, shiftRequired)

    def checkBit(self, bitIndex, indexBase=0):
        return _mscl.Bitfield_checkBit(self, bitIndex, indexBase)

    def setBit(self, bitIndex, value, indexBase=0):
        return _mscl.Bitfield_setBit(self, bitIndex, value, indexBase)

# Register Bitfield in _mscl:
_mscl.Bitfield_swigregister(Bitfield)

class StructuralHealth(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, angle, uptime, damage, processingRate, histogram):
        _mscl.StructuralHealth_swiginit(self, _mscl.new_StructuralHealth(angle, uptime, damage, processingRate, histogram))

    def angle(self):
        return _mscl.StructuralHealth_angle(self)

    def uptime(self):
        return _mscl.StructuralHealth_uptime(self)

    def damage(self):
        return _mscl.StructuralHealth_damage(self)

    def processingRate(self):
        return _mscl.StructuralHealth_processingRate(self)

    def histogram(self):
        return _mscl.StructuralHealth_histogram(self)
    __swig_destroy__ = _mscl.delete_StructuralHealth

# Register StructuralHealth in _mscl:
_mscl.StructuralHealth_swigregister(StructuralHealth)

class DataPoint(Value):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    channelPropertyId_angle = _mscl.DataPoint_channelPropertyId_angle
    channelPropertyId_derivedFrom = _mscl.DataPoint_channelPropertyId_derivedFrom
    channelPropertyId_derivedAlgorithmId = _mscl.DataPoint_channelPropertyId_derivedAlgorithmId
    __swig_destroy__ = _mscl.delete_DataPoint

    def channelProperty(self, id):
        return _mscl.DataPoint_channelProperty(self, id)

    def as_Vector(self):
        return _mscl.DataPoint_as_Vector(self)

    def as_Matrix(self):
        return _mscl.DataPoint_as_Matrix(self)

    def as_Timestamp(self):
        return _mscl.DataPoint_as_Timestamp(self)

    def as_Bytes(self):
        return _mscl.DataPoint_as_Bytes(self)

    def as_StructuralHealth(self):
        return _mscl.DataPoint_as_StructuralHealth(self)

    def as_RfSweep(self):
        return _mscl.DataPoint_as_RfSweep(self)

    def as_string(self):
        return _mscl.DataPoint_as_string(self)

# Register DataPoint in _mscl:
_mscl.DataPoint_swigregister(DataPoint)

class ConfigIssue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CONFIG_SAMPLING_MODE = _mscl.ConfigIssue_CONFIG_SAMPLING_MODE
    CONFIG_ACTIVE_CHANNELS = _mscl.ConfigIssue_CONFIG_ACTIVE_CHANNELS
    CONFIG_SAMPLE_RATE = _mscl.ConfigIssue_CONFIG_SAMPLE_RATE
    CONFIG_SWEEPS = _mscl.ConfigIssue_CONFIG_SWEEPS
    CONFIG_UNLIMITED_DURATION = _mscl.ConfigIssue_CONFIG_UNLIMITED_DURATION
    CONFIG_DATA_FORMAT = _mscl.ConfigIssue_CONFIG_DATA_FORMAT
    CONFIG_DATA_COLLECTION_METHOD = _mscl.ConfigIssue_CONFIG_DATA_COLLECTION_METHOD
    CONFIG_TIME_BETWEEN_BURSTS = _mscl.ConfigIssue_CONFIG_TIME_BETWEEN_BURSTS
    CONFIG_THERMOCOUPLE_TYPE = _mscl.ConfigIssue_CONFIG_THERMOCOUPLE_TYPE
    CONFIG_FILTER_SETTLING_TIME = _mscl.ConfigIssue_CONFIG_FILTER_SETTLING_TIME
    CONFIG_BUTTON = _mscl.ConfigIssue_CONFIG_BUTTON
    CONFIG_ANALOG_PAIR = _mscl.ConfigIssue_CONFIG_ANALOG_PAIR
    CONFIG_INPUT_RANGE = _mscl.ConfigIssue_CONFIG_INPUT_RANGE
    CONFIG_INACTIVITY_TIMEOUT = _mscl.ConfigIssue_CONFIG_INACTIVITY_TIMEOUT
    CONFIG_CHECK_RADIO_INTERVAL = _mscl.ConfigIssue_CONFIG_CHECK_RADIO_INTERVAL
    CONFIG_LOST_BEACON_TIMEOUT = _mscl.ConfigIssue_CONFIG_LOST_BEACON_TIMEOUT
    CONFIG_DEFAULT_MODE = _mscl.ConfigIssue_CONFIG_DEFAULT_MODE
    CONFIG_TRANSMIT_POWER = _mscl.ConfigIssue_CONFIG_TRANSMIT_POWER
    CONFIG_LINEAR_EQUATION = _mscl.ConfigIssue_CONFIG_LINEAR_EQUATION
    CONFIG_FATIGUE = _mscl.ConfigIssue_CONFIG_FATIGUE
    CONFIG_FATIGUE_MODE = _mscl.ConfigIssue_CONFIG_FATIGUE_MODE
    CONFIG_FATIGUE_ANGLE_ID = _mscl.ConfigIssue_CONFIG_FATIGUE_ANGLE_ID
    CONFIG_FATIGUE_SN_CURVE = _mscl.ConfigIssue_CONFIG_FATIGUE_SN_CURVE
    CONFIG_FATIGUE_DIST_NUM_ANGLES = _mscl.ConfigIssue_CONFIG_FATIGUE_DIST_NUM_ANGLES
    CONFIG_FATIGUE_DIST_ANGLE = _mscl.ConfigIssue_CONFIG_FATIGUE_DIST_ANGLE
    CONFIG_HISTOGRAM = _mscl.ConfigIssue_CONFIG_HISTOGRAM
    CONFIG_HISTOGRAM_TX_RATE = _mscl.ConfigIssue_CONFIG_HISTOGRAM_TX_RATE
    CONFIG_HARDWARE_OFFSET = _mscl.ConfigIssue_CONFIG_HARDWARE_OFFSET
    CONFIG_ACTIVITY_SENSE = _mscl.ConfigIssue_CONFIG_ACTIVITY_SENSE
    CONFIG_GAUGE_FACTOR = _mscl.ConfigIssue_CONFIG_GAUGE_FACTOR
    CONFIG_EVENT_TRIGGER = _mscl.ConfigIssue_CONFIG_EVENT_TRIGGER
    CONFIG_EVENT_TRIGGER_DURATION = _mscl.ConfigIssue_CONFIG_EVENT_TRIGGER_DURATION
    CONFIG_EVENT_TRIGGER_MASK = _mscl.ConfigIssue_CONFIG_EVENT_TRIGGER_MASK
    CONFIG_DIAGNOSTIC_INTERVAL = _mscl.ConfigIssue_CONFIG_DIAGNOSTIC_INTERVAL
    CONFIG_ANTI_ALIASING_FILTER = _mscl.ConfigIssue_CONFIG_ANTI_ALIASING_FILTER
    CONFIG_STORAGE_LIMIT_MODE = _mscl.ConfigIssue_CONFIG_STORAGE_LIMIT_MODE
    CONFIG_SENSOR_DELAY = _mscl.ConfigIssue_CONFIG_SENSOR_DELAY
    CONFIG_LOW_PASS_FILTER = _mscl.ConfigIssue_CONFIG_LOW_PASS_FILTER
    CONFIG_DATA_MODE = _mscl.ConfigIssue_CONFIG_DATA_MODE
    CONFIG_DERIVED_DATA_RATE = _mscl.ConfigIssue_CONFIG_DERIVED_DATA_RATE
    CONFIG_DERIVED_MASK_RMS = _mscl.ConfigIssue_CONFIG_DERIVED_MASK_RMS
    CONFIG_DERIVED_MASK_P2P = _mscl.ConfigIssue_CONFIG_DERIVED_MASK_P2P
    CONFIG_DERIVED_MASK_IPS = _mscl.ConfigIssue_CONFIG_DERIVED_MASK_IPS
    CONFIG_DERIVED_MASK_CREST_FACTOR = _mscl.ConfigIssue_CONFIG_DERIVED_MASK_CREST_FACTOR
    CONFIG_HIGH_PASS_FILTER = _mscl.ConfigIssue_CONFIG_HIGH_PASS_FILTER
    CONFIG_DERIVED_MASK = _mscl.ConfigIssue_CONFIG_DERIVED_MASK
    CONFIG_COMM_PROTOCOL = _mscl.ConfigIssue_CONFIG_COMM_PROTOCOL
    CONFIG_DERIVED_MASK_MEAN = _mscl.ConfigIssue_CONFIG_DERIVED_MASK_MEAN
    CONFIG_GAUGE_RESISTANCE = _mscl.ConfigIssue_CONFIG_GAUGE_RESISTANCE
    CONFIG_NUM_ACTIVE_GAUGES = _mscl.ConfigIssue_CONFIG_NUM_ACTIVE_GAUGES
    CONFIG_TEMP_SENSOR_OPTS = _mscl.ConfigIssue_CONFIG_TEMP_SENSOR_OPTS
    CONFIG_DEBOUNCE_FILTER = _mscl.ConfigIssue_CONFIG_DEBOUNCE_FILTER
    CONFIG_PULLUP_RESISTOR = _mscl.ConfigIssue_CONFIG_PULLUP_RESISTOR
    CONFIG_EXCITATION_VOLTAGE = _mscl.ConfigIssue_CONFIG_EXCITATION_VOLTAGE
    CONFIG_DERIVED_UNIT = _mscl.ConfigIssue_CONFIG_DERIVED_UNIT
    CONFIG_SENSOR_OUTPUT_MODE = _mscl.ConfigIssue_CONFIG_SENSOR_OUTPUT_MODE
    CONFIG_LOW_BATTERY_THRESHOLD = _mscl.ConfigIssue_CONFIG_LOW_BATTERY_THRESHOLD
    CONFIG_CFC_FILTER = _mscl.ConfigIssue_CONFIG_CFC_FILTER

    def __init__(self, *args):
        _mscl.ConfigIssue_swiginit(self, _mscl.new_ConfigIssue(*args))

    def id(self):
        return _mscl.ConfigIssue_id(self)

    def description(self):
        return _mscl.ConfigIssue_description(self)

    def isChannelGroupIssue(self):
        return _mscl.ConfigIssue_isChannelGroupIssue(self)

    def channelMask(self):
        return _mscl.ConfigIssue_channelMask(self)
    __swig_destroy__ = _mscl.delete_ConfigIssue

# Register ConfigIssue in _mscl:
_mscl.ConfigIssue_swigregister(ConfigIssue)

class ActivitySense(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.ActivitySense_swiginit(self, _mscl.new_ActivitySense())

    def enabled(self, *args):
        return _mscl.ActivitySense_enabled(self, *args)

    def activityThreshold(self, *args):
        return _mscl.ActivitySense_activityThreshold(self, *args)

    def inactivityThreshold(self, *args):
        return _mscl.ActivitySense_inactivityThreshold(self, *args)

    def activityTime(self, *args):
        return _mscl.ActivitySense_activityTime(self, *args)

    def inactivityTimeout(self, *args):
        return _mscl.ActivitySense_inactivityTimeout(self, *args)
    __swig_destroy__ = _mscl.delete_ActivitySense

# Register ActivitySense in _mscl:
_mscl.ActivitySense_swigregister(ActivitySense)

class Trigger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Trigger_swiginit(self, _mscl.new_Trigger(*args))

    def channelNumber(self, *args):
        return _mscl.Trigger_channelNumber(self, *args)

    def triggerType(self, *args):
        return _mscl.Trigger_triggerType(self, *args)

    def triggerValue(self, *args):
        return _mscl.Trigger_triggerValue(self, *args)
    __swig_destroy__ = _mscl.delete_Trigger

# Register Trigger in _mscl:
_mscl.Trigger_swigregister(Trigger)

class EventTriggerOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.EventTriggerOptions_swiginit(self, _mscl.new_EventTriggerOptions())

    def triggerMask(self, *args):
        return _mscl.EventTriggerOptions_triggerMask(self, *args)

    def anyTriggersEnabled(self):
        return _mscl.EventTriggerOptions_anyTriggersEnabled(self)

    def triggerEnabled(self, triggerIndex):
        return _mscl.EventTriggerOptions_triggerEnabled(self, triggerIndex)

    def enableTrigger(self, triggerIndex, enable=True):
        return _mscl.EventTriggerOptions_enableTrigger(self, triggerIndex, enable)

    def preDuration(self, *args):
        return _mscl.EventTriggerOptions_preDuration(self, *args)

    def postDuration(self, *args):
        return _mscl.EventTriggerOptions_postDuration(self, *args)

    def trigger(self, *args):
        return _mscl.EventTriggerOptions_trigger(self, *args)

    def triggers(self):
        return _mscl.EventTriggerOptions_triggers(self)
    __swig_destroy__ = _mscl.delete_EventTriggerOptions

# Register EventTriggerOptions in _mscl:
_mscl.EventTriggerOptions_swigregister(EventTriggerOptions)

class SnCurveSegment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.SnCurveSegment_swiginit(self, _mscl.new_SnCurveSegment(*args))

    def m(self, *args):
        return _mscl.SnCurveSegment_m(self, *args)

    def logA(self, *args):
        return _mscl.SnCurveSegment_logA(self, *args)
    __swig_destroy__ = _mscl.delete_SnCurveSegment

# Register SnCurveSegment in _mscl:
_mscl.SnCurveSegment_swigregister(SnCurveSegment)

class FatigueOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.FatigueOptions_swiginit(self, _mscl.new_FatigueOptions())

    def youngsModulus(self, *args):
        return _mscl.FatigueOptions_youngsModulus(self, *args)

    def poissonsRatio(self, *args):
        return _mscl.FatigueOptions_poissonsRatio(self, *args)

    def peakValleyThreshold(self, *args):
        return _mscl.FatigueOptions_peakValleyThreshold(self, *args)

    def debugMode(self, *args):
        return _mscl.FatigueOptions_debugMode(self, *args)

    def damageAngles(self):
        return _mscl.FatigueOptions_damageAngles(self)

    def damageAngle(self, *args):
        return _mscl.FatigueOptions_damageAngle(self, *args)

    def snCurveSegments(self):
        return _mscl.FatigueOptions_snCurveSegments(self)

    def snCurveSegment(self, *args):
        return _mscl.FatigueOptions_snCurveSegment(self, *args)

    def fatigueMode(self, *args):
        return _mscl.FatigueOptions_fatigueMode(self, *args)

    def distributedAngleMode_numAngles(self, *args):
        return _mscl.FatigueOptions_distributedAngleMode_numAngles(self, *args)

    def distributedAngleMode_lowerBound(self, *args):
        return _mscl.FatigueOptions_distributedAngleMode_lowerBound(self, *args)

    def distributedAngleMode_upperBound(self, *args):
        return _mscl.FatigueOptions_distributedAngleMode_upperBound(self, *args)

    def histogramEnable(self, *args):
        return _mscl.FatigueOptions_histogramEnable(self, *args)
    __swig_destroy__ = _mscl.delete_FatigueOptions

# Register FatigueOptions in _mscl:
_mscl.FatigueOptions_swigregister(FatigueOptions)

class HistogramOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.HistogramOptions_swiginit(self, _mscl.new_HistogramOptions())

    def transmitRate(self, *args):
        return _mscl.HistogramOptions_transmitRate(self, *args)

    def binsStart(self, *args):
        return _mscl.HistogramOptions_binsStart(self, *args)

    def binsSize(self, *args):
        return _mscl.HistogramOptions_binsSize(self, *args)
    __swig_destroy__ = _mscl.delete_HistogramOptions

# Register HistogramOptions in _mscl:
_mscl.HistogramOptions_swigregister(HistogramOptions)

class InputRangeEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    inputRange = property(_mscl.InputRangeEntry_inputRange_get, _mscl.InputRangeEntry_inputRange_set)
    hasGain = property(_mscl.InputRangeEntry_hasGain_get, _mscl.InputRangeEntry_hasGain_set)
    gain = property(_mscl.InputRangeEntry_gain_get, _mscl.InputRangeEntry_gain_set)

    def __init__(self, *args):
        _mscl.InputRangeEntry_swiginit(self, _mscl.new_InputRangeEntry(*args))
    __swig_destroy__ = _mscl.delete_InputRangeEntry

# Register InputRangeEntry in _mscl:
_mscl.InputRangeEntry_swigregister(InputRangeEntry)

class TempSensorOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Thermocouple(thermocouple):
        return _mscl.TempSensorOptions_Thermocouple(thermocouple)

    @staticmethod
    def RTD(wire, rtd):
        return _mscl.TempSensorOptions_RTD(wire, rtd)

    @staticmethod
    def Thermistor(thermistor):
        return _mscl.TempSensorOptions_Thermistor(thermistor)

    def transducerType(self):
        return _mscl.TempSensorOptions_transducerType(self)

    def thermocoupleType(self):
        return _mscl.TempSensorOptions_thermocoupleType(self)

    def rtdType(self):
        return _mscl.TempSensorOptions_rtdType(self)

    def rtdWireType(self):
        return _mscl.TempSensorOptions_rtdWireType(self)

    def thermistorType(self):
        return _mscl.TempSensorOptions_thermistorType(self)
    __swig_destroy__ = _mscl.delete_TempSensorOptions

# Register TempSensorOptions in _mscl:
_mscl.TempSensorOptions_swigregister(TempSensorOptions)

def TempSensorOptions_Thermocouple(thermocouple):
    return _mscl.TempSensorOptions_Thermocouple(thermocouple)

def TempSensorOptions_RTD(wire, rtd):
    return _mscl.TempSensorOptions_RTD(wire, rtd)

def TempSensorOptions_Thermistor(thermistor):
    return _mscl.TempSensorOptions_Thermistor(thermistor)

class WirelessModels(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    node_vLink_legacy = _mscl.WirelessModels_node_vLink_legacy
    node_cfBearingTempLink = _mscl.WirelessModels_node_cfBearingTempLink
    node_envLink_pro = _mscl.WirelessModels_node_envLink_pro
    node_gLink_2g = _mscl.WirelessModels_node_gLink_2g
    node_gLink_10g = _mscl.WirelessModels_node_gLink_10g
    node_gLinkII_cust_in = _mscl.WirelessModels_node_gLinkII_cust_in
    node_gLinkII_2g_in = _mscl.WirelessModels_node_gLinkII_2g_in
    node_gLinkII_10g_in = _mscl.WirelessModels_node_gLinkII_10g_in
    node_gLinkII_cust_ex = _mscl.WirelessModels_node_gLinkII_cust_ex
    node_gLinkII_2g_ex = _mscl.WirelessModels_node_gLinkII_2g_ex
    node_gLinkII_10g_ex = _mscl.WirelessModels_node_gLinkII_10g_ex
    node_gLink_rgd_10g = _mscl.WirelessModels_node_gLink_rgd_10g
    node_gLink_200_8g = _mscl.WirelessModels_node_gLink_200_8g
    node_gLink_200_40g = _mscl.WirelessModels_node_gLink_200_40g
    node_gLink_200_8g_oem = _mscl.WirelessModels_node_gLink_200_8g_oem
    node_gLink_200_40g_oem = _mscl.WirelessModels_node_gLink_200_40g_oem
    node_gLink_200_8g_oem_mmcx = _mscl.WirelessModels_node_gLink_200_8g_oem_mmcx
    node_gLink_200_40g_oem_mmcx = _mscl.WirelessModels_node_gLink_200_40g_oem_mmcx
    node_gLink_200_8g_oem_u_fl = _mscl.WirelessModels_node_gLink_200_8g_oem_u_fl
    node_gLink_200_40g_oem_u_fl = _mscl.WirelessModels_node_gLink_200_40g_oem_u_fl
    node_gLink_200_r = _mscl.WirelessModels_node_gLink_200_r
    node_sgLink_oem_S = _mscl.WirelessModels_node_sgLink_oem_S
    node_sgLink = _mscl.WirelessModels_node_sgLink
    node_sgLink200 = _mscl.WirelessModels_node_sgLink200
    node_sgLink200_hbridge_1K = _mscl.WirelessModels_node_sgLink200_hbridge_1K
    node_sgLink200_hbridge_350 = _mscl.WirelessModels_node_sgLink200_hbridge_350
    node_sgLink200_hbridge_120 = _mscl.WirelessModels_node_sgLink200_hbridge_120
    node_sgLink200_qbridge_1K = _mscl.WirelessModels_node_sgLink200_qbridge_1K
    node_sgLink200_qbridge_350 = _mscl.WirelessModels_node_sgLink200_qbridge_350
    node_sgLink200_qbridge_120 = _mscl.WirelessModels_node_sgLink200_qbridge_120
    node_sgLink_oem = _mscl.WirelessModels_node_sgLink_oem
    node_sgLink_micro = _mscl.WirelessModels_node_sgLink_micro
    node_sgLink200_oem = _mscl.WirelessModels_node_sgLink200_oem
    node_sgLink200_oem_ufl = _mscl.WirelessModels_node_sgLink200_oem_ufl
    node_sgLink200_oem_hbridge_1K = _mscl.WirelessModels_node_sgLink200_oem_hbridge_1K
    node_sgLink200_oem_hbridge_1K_ufl = _mscl.WirelessModels_node_sgLink200_oem_hbridge_1K_ufl
    node_sgLink200_oem_hbridge_120 = _mscl.WirelessModels_node_sgLink200_oem_hbridge_120
    node_sgLink200_oem_hbridge_120_ufl = _mscl.WirelessModels_node_sgLink200_oem_hbridge_120_ufl
    node_sgLink200_oem_hbridge_350 = _mscl.WirelessModels_node_sgLink200_oem_hbridge_350
    node_sgLink200_oem_hbridge_350_ufl = _mscl.WirelessModels_node_sgLink200_oem_hbridge_350_ufl
    node_sgLink200_oem_qbridge_1K = _mscl.WirelessModels_node_sgLink200_oem_qbridge_1K
    node_sgLink200_oem_qbridge_1K_ufl = _mscl.WirelessModels_node_sgLink200_oem_qbridge_1K_ufl
    node_sgLink200_oem_qbridge_120 = _mscl.WirelessModels_node_sgLink200_oem_qbridge_120
    node_sgLink200_oem_qbridge_120_ufl = _mscl.WirelessModels_node_sgLink200_oem_qbridge_120_ufl
    node_sgLink200_oem_qbridge_350 = _mscl.WirelessModels_node_sgLink200_oem_qbridge_350
    node_sgLink200_oem_qbridge_350_ufl = _mscl.WirelessModels_node_sgLink200_oem_qbridge_350_ufl
    node_sgLink_rgd = _mscl.WirelessModels_node_sgLink_rgd
    node_shmLink = _mscl.WirelessModels_node_shmLink
    node_tcLink_1ch = _mscl.WirelessModels_node_tcLink_1ch
    node_tcLink_6ch = _mscl.WirelessModels_node_tcLink_6ch
    node_tcLink_3ch = _mscl.WirelessModels_node_tcLink_3ch
    node_tcLink_6ch_ip67 = _mscl.WirelessModels_node_tcLink_6ch_ip67
    node_tcLink200_oem = _mscl.WirelessModels_node_tcLink200_oem
    node_tcLink200_oem_ufl = _mscl.WirelessModels_node_tcLink200_oem_ufl
    node_tcLink200 = _mscl.WirelessModels_node_tcLink200
    node_rtdLink200 = _mscl.WirelessModels_node_rtdLink200
    node_tcLink_6ch_ip67_rht = _mscl.WirelessModels_node_tcLink_6ch_ip67_rht
    node_vLink = _mscl.WirelessModels_node_vLink
    node_vLink200 = _mscl.WirelessModels_node_vLink200
    node_vLink200_qbridge_1K = _mscl.WirelessModels_node_vLink200_qbridge_1K
    node_vLink200_qbridge_120 = _mscl.WirelessModels_node_vLink200_qbridge_120
    node_vLink200_qbridge_350 = _mscl.WirelessModels_node_vLink200_qbridge_350
    node_vLink200_hbridge_1K = _mscl.WirelessModels_node_vLink200_hbridge_1K
    node_vLink200_hbridge_120 = _mscl.WirelessModels_node_vLink200_hbridge_120
    node_vLink200_hbridge_350 = _mscl.WirelessModels_node_vLink200_hbridge_350
    node_iepeLink = _mscl.WirelessModels_node_iepeLink
    node_dvrtLink = _mscl.WirelessModels_node_dvrtLink
    node_envLink_mini = _mscl.WirelessModels_node_envLink_mini
    node_wattLink = _mscl.WirelessModels_node_wattLink
    node_wattLink_3Y208 = _mscl.WirelessModels_node_wattLink_3Y208
    node_wattLink_3D240 = _mscl.WirelessModels_node_wattLink_3D240
    node_wattLink_3Y400 = _mscl.WirelessModels_node_wattLink_3Y400
    node_wattLink_3D400 = _mscl.WirelessModels_node_wattLink_3D400
    node_wattLink_3Y480 = _mscl.WirelessModels_node_wattLink_3Y480
    node_wattLink_3D480 = _mscl.WirelessModels_node_wattLink_3D480
    node_wattLink_3Y600 = _mscl.WirelessModels_node_wattLink_3Y600
    node_ptLink200 = _mscl.WirelessModels_node_ptLink200
    node_rtdLink = _mscl.WirelessModels_node_rtdLink
    node_shmLink2_cust1_oldNumber = _mscl.WirelessModels_node_shmLink2_cust1_oldNumber
    node_shmLink2_cust1 = _mscl.WirelessModels_node_shmLink2_cust1
    node_shmLink200 = _mscl.WirelessModels_node_shmLink200
    node_shmLink201 = _mscl.WirelessModels_node_shmLink201
    node_shmLink201_qbridge_1K = _mscl.WirelessModels_node_shmLink201_qbridge_1K
    node_shmLink201_qbridge_348 = _mscl.WirelessModels_node_shmLink201_qbridge_348
    node_shmLink201_hbridge_1K = _mscl.WirelessModels_node_shmLink201_hbridge_1K
    node_shmLink201_hbridge_348 = _mscl.WirelessModels_node_shmLink201_hbridge_348
    node_shmLink201_fullbridge = _mscl.WirelessModels_node_shmLink201_fullbridge
    node_shmLink210_fullbridge = _mscl.WirelessModels_node_shmLink210_fullbridge
    node_shmLink210_qbridge_3K = _mscl.WirelessModels_node_shmLink210_qbridge_3K
    node_torqueLink = _mscl.WirelessModels_node_torqueLink
    node_torqueLink200_3ch = _mscl.WirelessModels_node_torqueLink200_3ch
    node_torqueLink200 = _mscl.WirelessModels_node_torqueLink200
    node_torqueLink200_3ch_s = _mscl.WirelessModels_node_torqueLink200_3ch_s
    node_sgLink_herm = _mscl.WirelessModels_node_sgLink_herm
    node_sgLink_herm_2600 = _mscl.WirelessModels_node_sgLink_herm_2600
    node_sgLink_herm_2700 = _mscl.WirelessModels_node_sgLink_herm_2700
    node_sgLink_herm_2800 = _mscl.WirelessModels_node_sgLink_herm_2800
    node_sgLink_herm_2900 = _mscl.WirelessModels_node_sgLink_herm_2900
    node_wirelessImpactSensor = _mscl.WirelessModels_node_wirelessImpactSensor
    node_gLink_200_40g_s = _mscl.WirelessModels_node_gLink_200_40g_s
    base_wsda_1000 = _mscl.WirelessModels_base_wsda_1000
    base_wsda_1500 = _mscl.WirelessModels_base_wsda_1500
    base_wsda_2000 = _mscl.WirelessModels_base_wsda_2000
    base_wsdaBase_200_legacy = _mscl.WirelessModels_base_wsdaBase_200_legacy
    base_wsdaBase_200 = _mscl.WirelessModels_base_wsdaBase_200
    base_wsdaBase_200_extAntenna = _mscl.WirelessModels_base_wsdaBase_200_extAntenna
    base_wsdaBase_101_analog = _mscl.WirelessModels_base_wsdaBase_101_analog
    base_wsdaBase_102_rs232 = _mscl.WirelessModels_base_wsdaBase_102_rs232
    base_wsdaBase_104_usb = _mscl.WirelessModels_base_wsdaBase_104_usb
    base_wsi_104 = _mscl.WirelessModels_base_wsi_104
    base_wsdaBase_mini = _mscl.WirelessModels_base_wsdaBase_mini

    def __init__(self):
        _mscl.WirelessModels_swiginit(self, _mscl.new_WirelessModels())
    __swig_destroy__ = _mscl.delete_WirelessModels

# Register WirelessModels in _mscl:
_mscl.WirelessModels_swigregister(WirelessModels)

class NodeDiscovery(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def nodeAddress(self):
        return _mscl.NodeDiscovery_nodeAddress(self)

    def frequency(self):
        return _mscl.NodeDiscovery_frequency(self)

    def panId(self):
        return _mscl.NodeDiscovery_panId(self)

    def model(self):
        return _mscl.NodeDiscovery_model(self)

    def serialNumber(self):
        return _mscl.NodeDiscovery_serialNumber(self)

    def firmwareVersion(self):
        return _mscl.NodeDiscovery_firmwareVersion(self)

    def defaultMode(self):
        return _mscl.NodeDiscovery_defaultMode(self)

    def builtInTestResult(self):
        return _mscl.NodeDiscovery_builtInTestResult(self)

    def communicationProtocol(self):
        return _mscl.NodeDiscovery_communicationProtocol(self)

    def asppVersion_lxrs(self):
        return _mscl.NodeDiscovery_asppVersion_lxrs(self)

    def asppVersion_lxrsPlus(self):
        return _mscl.NodeDiscovery_asppVersion_lxrsPlus(self)

    def baseRssi(self):
        return _mscl.NodeDiscovery_baseRssi(self)

    def timestamp(self):
        return _mscl.NodeDiscovery_timestamp(self)

    def __init__(self):
        _mscl.NodeDiscovery_swiginit(self, _mscl.new_NodeDiscovery())
    __swig_destroy__ = _mscl.delete_NodeDiscovery

# Register NodeDiscovery in _mscl:
_mscl.NodeDiscovery_swigregister(NodeDiscovery)

class LinearEquation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.LinearEquation_swiginit(self, _mscl.new_LinearEquation(*args))

    def slope(self, *args):
        return _mscl.LinearEquation_slope(self, *args)

    def offset(self, *args):
        return _mscl.LinearEquation_offset(self, *args)
    __swig_destroy__ = _mscl.delete_LinearEquation

# Register LinearEquation in _mscl:
_mscl.LinearEquation_swigregister(LinearEquation)

class CalCoefficients(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CalCoefficients_swiginit(self, _mscl.new_CalCoefficients(*args))

    def equationType(self):
        return _mscl.CalCoefficients_equationType(self)

    def unit(self):
        return _mscl.CalCoefficients_unit(self)

    def linearEquation(self):
        return _mscl.CalCoefficients_linearEquation(self)
    __swig_destroy__ = _mscl.delete_CalCoefficients

# Register CalCoefficients in _mscl:
_mscl.CalCoefficients_swigregister(CalCoefficients)

class ChannelGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.ChannelGroup_swiginit(self, _mscl.new_ChannelGroup())

    def channels(self):
        return _mscl.ChannelGroup_channels(self)

    def name(self):
        return _mscl.ChannelGroup_name(self)

    def eepromLocation(self, setting):
        return _mscl.ChannelGroup_eepromLocation(self, setting)

    def settings(self):
        return _mscl.ChannelGroup_settings(self)

    def hasSetting(self, setting):
        return _mscl.ChannelGroup_hasSetting(self, setting)

    def hasSettingAndChannel(self, setting, channelNumber):
        return _mscl.ChannelGroup_hasSettingAndChannel(self, setting, channelNumber)
    __swig_destroy__ = _mscl.delete_ChannelGroup

# Register ChannelGroup in _mscl:
_mscl.ChannelGroup_swigregister(ChannelGroup)

class WirelessChannel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    channel_unknown = _mscl.WirelessChannel_channel_unknown
    channel_1 = _mscl.WirelessChannel_channel_1
    channel_2 = _mscl.WirelessChannel_channel_2
    channel_3 = _mscl.WirelessChannel_channel_3
    channel_4 = _mscl.WirelessChannel_channel_4
    channel_5 = _mscl.WirelessChannel_channel_5
    channel_6 = _mscl.WirelessChannel_channel_6
    channel_7 = _mscl.WirelessChannel_channel_7
    channel_8 = _mscl.WirelessChannel_channel_8
    channel_9 = _mscl.WirelessChannel_channel_9
    channel_10 = _mscl.WirelessChannel_channel_10
    channel_11 = _mscl.WirelessChannel_channel_11
    channel_12 = _mscl.WirelessChannel_channel_12
    channel_13 = _mscl.WirelessChannel_channel_13
    channel_14 = _mscl.WirelessChannel_channel_14
    channel_15 = _mscl.WirelessChannel_channel_15
    channel_16 = _mscl.WirelessChannel_channel_16
    channel_digital_1 = _mscl.WirelessChannel_channel_digital_1
    channel_digital_2 = _mscl.WirelessChannel_channel_digital_2
    channel_digital_3 = _mscl.WirelessChannel_channel_digital_3
    channel_digital_4 = _mscl.WirelessChannel_channel_digital_4
    channel_digital_5 = _mscl.WirelessChannel_channel_digital_5
    channel_digital_6 = _mscl.WirelessChannel_channel_digital_6
    channel_digital_7 = _mscl.WirelessChannel_channel_digital_7
    channel_digital_8 = _mscl.WirelessChannel_channel_digital_8
    channel_digital_9 = _mscl.WirelessChannel_channel_digital_9
    channel_digital_10 = _mscl.WirelessChannel_channel_digital_10
    channel_digital_11 = _mscl.WirelessChannel_channel_digital_11
    channel_digital_12 = _mscl.WirelessChannel_channel_digital_12
    channel_digital_13 = _mscl.WirelessChannel_channel_digital_13
    channel_digital_14 = _mscl.WirelessChannel_channel_digital_14
    channel_digital_15 = _mscl.WirelessChannel_channel_digital_15
    channel_digital_16 = _mscl.WirelessChannel_channel_digital_16
    channel_structuralHealth = _mscl.WirelessChannel_channel_structuralHealth
    channel_hcl_rawBase_mag1_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag1_x
    channel_hcl_rawBase_mag1_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag1_y
    channel_hcl_rawBase_mag1_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag1_z
    channel_hcl_rawBase_mag2_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag2_x
    channel_hcl_rawBase_mag2_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag2_y
    channel_hcl_rawBase_mag2_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag2_z
    channel_hcl_rawBase_mag3_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag3_x
    channel_hcl_rawBase_mag3_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag3_y
    channel_hcl_rawBase_mag3_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag3_z
    channel_hcl_rawBase_mag4_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag4_x
    channel_hcl_rawBase_mag4_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag4_y
    channel_hcl_rawBase_mag4_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag4_z
    channel_hcl_rawBase_mag5_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag5_x
    channel_hcl_rawBase_mag5_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag5_y
    channel_hcl_rawBase_mag5_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag5_z
    channel_hcl_rawBase_mag6_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag6_x
    channel_hcl_rawBase_mag6_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag6_y
    channel_hcl_rawBase_mag6_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag6_z
    channel_hcl_rawBase_mag7_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag7_x
    channel_hcl_rawBase_mag7_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag7_y
    channel_hcl_rawBase_mag7_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag7_z
    channel_hcl_rawBase_mag8_x = _mscl.WirelessChannel_channel_hcl_rawBase_mag8_x
    channel_hcl_rawBase_mag8_y = _mscl.WirelessChannel_channel_hcl_rawBase_mag8_y
    channel_hcl_rawBase_mag8_z = _mscl.WirelessChannel_channel_hcl_rawBase_mag8_z
    channel_hcl_rawBase_gyro_x = _mscl.WirelessChannel_channel_hcl_rawBase_gyro_x
    channel_hcl_rawBase_gyro_y = _mscl.WirelessChannel_channel_hcl_rawBase_gyro_y
    channel_hcl_rawBase_gyro_z = _mscl.WirelessChannel_channel_hcl_rawBase_gyro_z
    channel_error_code = _mscl.WirelessChannel_channel_error_code
    channel_hcl_rawStrain_BL30 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL30
    channel_hcl_rawStrain_BL120 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL120
    channel_hcl_rawStrain_A60 = _mscl.WirelessChannel_channel_hcl_rawStrain_A60
    channel_hcl_rawStrain_A150 = _mscl.WirelessChannel_channel_hcl_rawStrain_A150
    channel_hcl_rawStrain_AL30 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL30
    channel_hcl_rawStrain_AL120 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL120
    channel_hcl_rawStrain_BR60 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR60
    channel_hcl_rawStrain_BR150 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR150
    channel_hcl_rawStrain_B30 = _mscl.WirelessChannel_channel_hcl_rawStrain_B30
    channel_hcl_rawStrain_T120 = _mscl.WirelessChannel_channel_hcl_rawStrain_T120
    channel_hcl_rawStrain_AR60 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR60
    channel_hcl_rawStrain_AR150 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR150
    channel_hcl_rawStrain_A30 = _mscl.WirelessChannel_channel_hcl_rawStrain_A30
    channel_hcl_rawStrain_A120 = _mscl.WirelessChannel_channel_hcl_rawStrain_A120
    channel_hcl_rawStrain_BL90 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL90
    channel_hcl_rawStrain_BL180 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL180
    channel_hcl_rawStrain_BR30 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR30
    channel_hcl_rawStrain_BR120 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR120
    channel_hcl_rawStrain_AL90 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL90
    channel_hcl_rawStrain_AL180 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL180
    channel_hcl_rawStrain_AR30 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR30
    channel_hcl_rawStrain_AR120 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR120
    channel_hcl_rawStrain_B90 = _mscl.WirelessChannel_channel_hcl_rawStrain_B90
    channel_hcl_rawStrain_T0 = _mscl.WirelessChannel_channel_hcl_rawStrain_T0
    channel_hcl_rawStrain_BL60 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL60
    channel_hcl_rawStrain_BL150 = _mscl.WirelessChannel_channel_hcl_rawStrain_BL150
    channel_hcl_rawStrain_A90 = _mscl.WirelessChannel_channel_hcl_rawStrain_A90
    channel_hcl_rawStrain_A0 = _mscl.WirelessChannel_channel_hcl_rawStrain_A0
    channel_hcl_rawStrain_AL60 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL60
    channel_hcl_rawStrain_AL150 = _mscl.WirelessChannel_channel_hcl_rawStrain_AL150
    channel_hcl_rawStrain_BR90 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR90
    channel_hcl_rawStrain_BR0 = _mscl.WirelessChannel_channel_hcl_rawStrain_BR0
    channel_hcl_rawStrain_T60 = _mscl.WirelessChannel_channel_hcl_rawStrain_T60
    channel_hcl_rawStrain_B150 = _mscl.WirelessChannel_channel_hcl_rawStrain_B150
    channel_hcl_rawStrain_AR90 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR90
    channel_hcl_rawStrain_AR0 = _mscl.WirelessChannel_channel_hcl_rawStrain_AR0
    channel_hcl_rawInertial_accel1 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel1
    channel_hcl_rawInertial_accel2 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel2
    channel_hcl_rawInertial_accel3 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel3
    channel_hcl_rawInertial_accel4 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel4
    channel_hcl_rawInertial_accel5 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel5
    channel_hcl_rawInertial_accel6 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel6
    channel_hcl_rawInertial_accel7 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel7
    channel_hcl_rawInertial_accel8 = _mscl.WirelessChannel_channel_hcl_rawInertial_accel8
    channel_hcl_rawInertial_gyroX = _mscl.WirelessChannel_channel_hcl_rawInertial_gyroX
    channel_hcl_rawInertial_gyroY = _mscl.WirelessChannel_channel_hcl_rawInertial_gyroY
    channel_hcl_rawInertial_gyroZ = _mscl.WirelessChannel_channel_hcl_rawInertial_gyroZ
    channel_rawAngleStrain = _mscl.WirelessChannel_channel_rawAngleStrain
    channel_beaconEcho = _mscl.WirelessChannel_channel_beaconEcho
    channel_rfSweep = _mscl.WirelessChannel_channel_rfSweep
    channel_diag_state = _mscl.WirelessChannel_channel_diag_state
    channel_diag_runtime_idle = _mscl.WirelessChannel_channel_diag_runtime_idle
    channel_diag_runtime_sleep = _mscl.WirelessChannel_channel_diag_runtime_sleep
    channel_diag_runtime_activeRun = _mscl.WirelessChannel_channel_diag_runtime_activeRun
    channel_diag_runtime_inactiveRun = _mscl.WirelessChannel_channel_diag_runtime_inactiveRun
    channel_diag_resetCounter = _mscl.WirelessChannel_channel_diag_resetCounter
    channel_diag_lowBatteryFlag = _mscl.WirelessChannel_channel_diag_lowBatteryFlag
    channel_diag_sweepIndex = _mscl.WirelessChannel_channel_diag_sweepIndex
    channel_diag_badSweepCount = _mscl.WirelessChannel_channel_diag_badSweepCount
    channel_diag_totalTx = _mscl.WirelessChannel_channel_diag_totalTx
    channel_diag_totalReTx = _mscl.WirelessChannel_channel_diag_totalReTx
    channel_diag_totalDroppedPackets = _mscl.WirelessChannel_channel_diag_totalDroppedPackets
    channel_diag_builtInTestResult = _mscl.WirelessChannel_channel_diag_builtInTestResult
    channel_diag_eventIndex = _mscl.WirelessChannel_channel_diag_eventIndex
    channel_hcl_axialLoadX = _mscl.WirelessChannel_channel_hcl_axialLoadX
    channel_hcl_axialLoadY = _mscl.WirelessChannel_channel_hcl_axialLoadY
    channel_hcl_axialLoadZ = _mscl.WirelessChannel_channel_hcl_axialLoadZ
    channel_hcl_bendingMomentFlap = _mscl.WirelessChannel_channel_hcl_bendingMomentFlap
    channel_hcl_bendingMomentLag = _mscl.WirelessChannel_channel_hcl_bendingMomentLag
    channel_hcl_bendingMomentPitch = _mscl.WirelessChannel_channel_hcl_bendingMomentPitch
    channel_hcl_motionFlap_mag = _mscl.WirelessChannel_channel_hcl_motionFlap_mag
    channel_hcl_motionLag_mag = _mscl.WirelessChannel_channel_hcl_motionLag_mag
    channel_hcl_motionPitch_mag = _mscl.WirelessChannel_channel_hcl_motionPitch_mag
    channel_hcl_motionFlap_inertial = _mscl.WirelessChannel_channel_hcl_motionFlap_inertial
    channel_hcl_motionLag_inertial = _mscl.WirelessChannel_channel_hcl_motionLag_inertial
    channel_hcl_motionPitch_inertial = _mscl.WirelessChannel_channel_hcl_motionPitch_inertial
    channel_hcl_cockingStiffness_mag = _mscl.WirelessChannel_channel_hcl_cockingStiffness_mag
    channel_hcl_cockingStiffness_inertial = _mscl.WirelessChannel_channel_hcl_cockingStiffness_inertial
    channel_hcl_temperature = _mscl.WirelessChannel_channel_hcl_temperature
    channel_diag_externalPower = _mscl.WirelessChannel_channel_diag_externalPower
    channel_diag_internalTemp = _mscl.WirelessChannel_channel_diag_internalTemp
    channel_1_rms = _mscl.WirelessChannel_channel_1_rms
    channel_2_rms = _mscl.WirelessChannel_channel_2_rms
    channel_3_rms = _mscl.WirelessChannel_channel_3_rms
    channel_4_rms = _mscl.WirelessChannel_channel_4_rms
    channel_5_rms = _mscl.WirelessChannel_channel_5_rms
    channel_6_rms = _mscl.WirelessChannel_channel_6_rms
    channel_7_rms = _mscl.WirelessChannel_channel_7_rms
    channel_8_rms = _mscl.WirelessChannel_channel_8_rms
    channel_9_rms = _mscl.WirelessChannel_channel_9_rms
    channel_10_rms = _mscl.WirelessChannel_channel_10_rms
    channel_11_rms = _mscl.WirelessChannel_channel_11_rms
    channel_12_rms = _mscl.WirelessChannel_channel_12_rms
    channel_13_rms = _mscl.WirelessChannel_channel_13_rms
    channel_14_rms = _mscl.WirelessChannel_channel_14_rms
    channel_15_rms = _mscl.WirelessChannel_channel_15_rms
    channel_16_rms = _mscl.WirelessChannel_channel_16_rms
    channel_1_peakToPeak = _mscl.WirelessChannel_channel_1_peakToPeak
    channel_2_peakToPeak = _mscl.WirelessChannel_channel_2_peakToPeak
    channel_3_peakToPeak = _mscl.WirelessChannel_channel_3_peakToPeak
    channel_4_peakToPeak = _mscl.WirelessChannel_channel_4_peakToPeak
    channel_5_peakToPeak = _mscl.WirelessChannel_channel_5_peakToPeak
    channel_6_peakToPeak = _mscl.WirelessChannel_channel_6_peakToPeak
    channel_7_peakToPeak = _mscl.WirelessChannel_channel_7_peakToPeak
    channel_8_peakToPeak = _mscl.WirelessChannel_channel_8_peakToPeak
    channel_9_peakToPeak = _mscl.WirelessChannel_channel_9_peakToPeak
    channel_10_peakToPeak = _mscl.WirelessChannel_channel_10_peakToPeak
    channel_11_peakToPeak = _mscl.WirelessChannel_channel_11_peakToPeak
    channel_12_peakToPeak = _mscl.WirelessChannel_channel_12_peakToPeak
    channel_13_peakToPeak = _mscl.WirelessChannel_channel_13_peakToPeak
    channel_14_peakToPeak = _mscl.WirelessChannel_channel_14_peakToPeak
    channel_15_peakToPeak = _mscl.WirelessChannel_channel_15_peakToPeak
    channel_16_peakToPeak = _mscl.WirelessChannel_channel_16_peakToPeak
    channel_1_ips = _mscl.WirelessChannel_channel_1_ips
    channel_2_ips = _mscl.WirelessChannel_channel_2_ips
    channel_3_ips = _mscl.WirelessChannel_channel_3_ips
    channel_4_ips = _mscl.WirelessChannel_channel_4_ips
    channel_5_ips = _mscl.WirelessChannel_channel_5_ips
    channel_6_ips = _mscl.WirelessChannel_channel_6_ips
    channel_7_ips = _mscl.WirelessChannel_channel_7_ips
    channel_8_ips = _mscl.WirelessChannel_channel_8_ips
    channel_9_ips = _mscl.WirelessChannel_channel_9_ips
    channel_10_ips = _mscl.WirelessChannel_channel_10_ips
    channel_11_ips = _mscl.WirelessChannel_channel_11_ips
    channel_12_ips = _mscl.WirelessChannel_channel_12_ips
    channel_13_ips = _mscl.WirelessChannel_channel_13_ips
    channel_14_ips = _mscl.WirelessChannel_channel_14_ips
    channel_15_ips = _mscl.WirelessChannel_channel_15_ips
    channel_16_ips = _mscl.WirelessChannel_channel_16_ips
    channel_1_crestFactor = _mscl.WirelessChannel_channel_1_crestFactor
    channel_2_crestFactor = _mscl.WirelessChannel_channel_2_crestFactor
    channel_3_crestFactor = _mscl.WirelessChannel_channel_3_crestFactor
    channel_4_crestFactor = _mscl.WirelessChannel_channel_4_crestFactor
    channel_5_crestFactor = _mscl.WirelessChannel_channel_5_crestFactor
    channel_6_crestFactor = _mscl.WirelessChannel_channel_6_crestFactor
    channel_7_crestFactor = _mscl.WirelessChannel_channel_7_crestFactor
    channel_8_crestFactor = _mscl.WirelessChannel_channel_8_crestFactor
    channel_9_crestFactor = _mscl.WirelessChannel_channel_9_crestFactor
    channel_10_crestFactor = _mscl.WirelessChannel_channel_10_crestFactor
    channel_11_crestFactor = _mscl.WirelessChannel_channel_11_crestFactor
    channel_12_crestFactor = _mscl.WirelessChannel_channel_12_crestFactor
    channel_13_crestFactor = _mscl.WirelessChannel_channel_13_crestFactor
    channel_14_crestFactor = _mscl.WirelessChannel_channel_14_crestFactor
    channel_15_crestFactor = _mscl.WirelessChannel_channel_15_crestFactor
    channel_16_crestFactor = _mscl.WirelessChannel_channel_16_crestFactor
    channel_diag_syncAttempts = _mscl.WirelessChannel_channel_diag_syncAttempts
    channel_diag_syncFailures = _mscl.WirelessChannel_channel_diag_syncFailures
    channel_diag_secsSinceLastSync = _mscl.WirelessChannel_channel_diag_secsSinceLastSync
    channel_beaconConflict = _mscl.WirelessChannel_channel_beaconConflict
    channel_1_mean = _mscl.WirelessChannel_channel_1_mean
    channel_2_mean = _mscl.WirelessChannel_channel_2_mean
    channel_3_mean = _mscl.WirelessChannel_channel_3_mean
    channel_4_mean = _mscl.WirelessChannel_channel_4_mean
    channel_5_mean = _mscl.WirelessChannel_channel_5_mean
    channel_6_mean = _mscl.WirelessChannel_channel_6_mean
    channel_7_mean = _mscl.WirelessChannel_channel_7_mean
    channel_8_mean = _mscl.WirelessChannel_channel_8_mean
    channel_9_mean = _mscl.WirelessChannel_channel_9_mean
    channel_10_mean = _mscl.WirelessChannel_channel_10_mean
    channel_11_mean = _mscl.WirelessChannel_channel_11_mean
    channel_12_mean = _mscl.WirelessChannel_channel_12_mean
    channel_13_mean = _mscl.WirelessChannel_channel_13_mean
    channel_14_mean = _mscl.WirelessChannel_channel_14_mean
    channel_15_mean = _mscl.WirelessChannel_channel_15_mean
    channel_16_mean = _mscl.WirelessChannel_channel_16_mean
    channel_1_mmps = _mscl.WirelessChannel_channel_1_mmps
    channel_2_mmps = _mscl.WirelessChannel_channel_2_mmps
    channel_3_mmps = _mscl.WirelessChannel_channel_3_mmps
    channel_4_mmps = _mscl.WirelessChannel_channel_4_mmps
    channel_5_mmps = _mscl.WirelessChannel_channel_5_mmps
    channel_6_mmps = _mscl.WirelessChannel_channel_6_mmps
    channel_7_mmps = _mscl.WirelessChannel_channel_7_mmps
    channel_8_mmps = _mscl.WirelessChannel_channel_8_mmps
    channel_9_mmps = _mscl.WirelessChannel_channel_9_mmps
    channel_10_mmps = _mscl.WirelessChannel_channel_10_mmps
    channel_11_mmps = _mscl.WirelessChannel_channel_11_mmps
    channel_12_mmps = _mscl.WirelessChannel_channel_12_mmps
    channel_13_mmps = _mscl.WirelessChannel_channel_13_mmps
    channel_14_mmps = _mscl.WirelessChannel_channel_14_mmps
    channel_15_mmps = _mscl.WirelessChannel_channel_15_mmps
    channel_16_mmps = _mscl.WirelessChannel_channel_16_mmps
    channel_diag_memoryFull = _mscl.WirelessChannel_channel_diag_memoryFull

    def __init__(self, *args):
        _mscl.WirelessChannel_swiginit(self, _mscl.new_WirelessChannel(*args))

    def channelNumber(self):
        return _mscl.WirelessChannel_channelNumber(self)

    def id(self):
        return _mscl.WirelessChannel_id(self)

    def type(self):
        return _mscl.WirelessChannel_type(self)

    def description(self):
        return _mscl.WirelessChannel_description(self)

    def adcResolution(self):
        return _mscl.WirelessChannel_adcResolution(self)

    def adcMaxValue(self):
        return _mscl.WirelessChannel_adcMaxValue(self)

    def name(self):
        return _mscl.WirelessChannel_name(self)
    __swig_destroy__ = _mscl.delete_WirelessChannel

# Register WirelessChannel in _mscl:
_mscl.WirelessChannel_swigregister(WirelessChannel)

class WirelessDataPoint(DataPoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.WirelessDataPoint_swiginit(self, _mscl.new_WirelessDataPoint())

    def channelId(self):
        return _mscl.WirelessDataPoint_channelId(self)

    def channelNumber(self):
        return _mscl.WirelessDataPoint_channelNumber(self)

    def channelName(self):
        return _mscl.WirelessDataPoint_channelName(self)
    __swig_destroy__ = _mscl.delete_WirelessDataPoint

# Register WirelessDataPoint in _mscl:
_mscl.WirelessDataPoint_swigregister(WirelessDataPoint)

class DataSweep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    samplingType_NonSync = _mscl.DataSweep_samplingType_NonSync
    samplingType_NonSync_Buffered = _mscl.DataSweep_samplingType_NonSync_Buffered
    samplingType_SyncSampling = _mscl.DataSweep_samplingType_SyncSampling
    samplingType_SyncSampling_Burst = _mscl.DataSweep_samplingType_SyncSampling_Burst
    samplingType_AsyncDigital = _mscl.DataSweep_samplingType_AsyncDigital
    samplingType_AsyncDigitalAnalog = _mscl.DataSweep_samplingType_AsyncDigitalAnalog
    samplingType_SHM = _mscl.DataSweep_samplingType_SHM
    samplingType_BeaconEcho = _mscl.DataSweep_samplingType_BeaconEcho
    samplingType_RfSweep = _mscl.DataSweep_samplingType_RfSweep
    samplingType_Diagnostic = _mscl.DataSweep_samplingType_Diagnostic

    def __init__(self):
        _mscl.DataSweep_swiginit(self, _mscl.new_DataSweep())

    def timestamp(self):
        return _mscl.DataSweep_timestamp(self)

    def tick(self):
        return _mscl.DataSweep_tick(self)

    def sampleRate(self):
        return _mscl.DataSweep_sampleRate(self)

    def nodeAddress(self):
        return _mscl.DataSweep_nodeAddress(self)

    def data(self):
        return _mscl.DataSweep_data(self)

    def samplingType(self):
        return _mscl.DataSweep_samplingType(self)

    def nodeRssi(self):
        return _mscl.DataSweep_nodeRssi(self)

    def baseRssi(self):
        return _mscl.DataSweep_baseRssi(self)

    def frequency(self):
        return _mscl.DataSweep_frequency(self)

    def calApplied(self):
        return _mscl.DataSweep_calApplied(self)
    __swig_destroy__ = _mscl.delete_DataSweep

# Register DataSweep in _mscl:
_mscl.DataSweep_swigregister(DataSweep)

class BaseStationAnalogPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.BaseStationAnalogPair_swiginit(self, _mscl.new_BaseStationAnalogPair())

    @staticmethod
    def Float(nodeAddress, nodeChannel, output_0V, output_3V):
        return _mscl.BaseStationAnalogPair_Float(nodeAddress, nodeChannel, output_0V, output_3V)

    @staticmethod
    def NonFloat(nodeAddress, nodeChannel):
        return _mscl.BaseStationAnalogPair_NonFloat(nodeAddress, nodeChannel)

    def nodeAddress(self, *args):
        return _mscl.BaseStationAnalogPair_nodeAddress(self, *args)

    def nodeChannel(self, *args):
        return _mscl.BaseStationAnalogPair_nodeChannel(self, *args)

    def expectFloatData(self, *args):
        return _mscl.BaseStationAnalogPair_expectFloatData(self, *args)

    def outputVal_0V(self, *args):
        return _mscl.BaseStationAnalogPair_outputVal_0V(self, *args)

    def outputVal_3V(self, *args):
        return _mscl.BaseStationAnalogPair_outputVal_3V(self, *args)
    __swig_destroy__ = _mscl.delete_BaseStationAnalogPair

# Register BaseStationAnalogPair in _mscl:
_mscl.BaseStationAnalogPair_swigregister(BaseStationAnalogPair)
BaseStationAnalogPair.CHANNEL_NOT_FLOAT = _mscl.cvar.BaseStationAnalogPair_CHANNEL_NOT_FLOAT

def BaseStationAnalogPair_Float(nodeAddress, nodeChannel, output_0V, output_3V):
    return _mscl.BaseStationAnalogPair_Float(nodeAddress, nodeChannel, output_0V, output_3V)

def BaseStationAnalogPair_NonFloat(nodeAddress, nodeChannel):
    return _mscl.BaseStationAnalogPair_NonFloat(nodeAddress, nodeChannel)

class BaseStationButton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    btn_nodeSleep = _mscl.BaseStationButton_btn_nodeSleep
    btn_nodeStop = _mscl.BaseStationButton_btn_nodeStop
    btn_enableBeacon = _mscl.BaseStationButton_btn_enableBeacon
    btn_disableBeacon = _mscl.BaseStationButton_btn_disableBeacon
    btn_nodeNonSyncSampling = _mscl.BaseStationButton_btn_nodeNonSyncSampling
    btn_nodeSyncSampling = _mscl.BaseStationButton_btn_nodeSyncSampling
    btn_nodeArmedDatalogging = _mscl.BaseStationButton_btn_nodeArmedDatalogging
    btn_cyclePower = _mscl.BaseStationButton_btn_cyclePower
    btn_disabled = _mscl.BaseStationButton_btn_disabled

    def __init__(self, *args):
        _mscl.BaseStationButton_swiginit(self, _mscl.new_BaseStationButton(*args))

    def command(self, *args):
        return _mscl.BaseStationButton_command(self, *args)

    def nodeAddress(self, *args):
        return _mscl.BaseStationButton_nodeAddress(self, *args)
    __swig_destroy__ = _mscl.delete_BaseStationButton

# Register BaseStationButton in _mscl:
_mscl.BaseStationButton_swigregister(BaseStationButton)

class BaseStationConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.BaseStationConfig_swiginit(self, _mscl.new_BaseStationConfig())

    def transmitPower(self, *args):
        return _mscl.BaseStationConfig_transmitPower(self, *args)

    def communicationProtocol(self, *args):
        return _mscl.BaseStationConfig_communicationProtocol(self, *args)

    def buttonLongPress(self, *args):
        return _mscl.BaseStationConfig_buttonLongPress(self, *args)

    def buttonShortPress(self, *args):
        return _mscl.BaseStationConfig_buttonShortPress(self, *args)

    def analogPairingEnable(self, *args):
        return _mscl.BaseStationConfig_analogPairingEnable(self, *args)

    def analogTimeoutTime(self, *args):
        return _mscl.BaseStationConfig_analogTimeoutTime(self, *args)

    def analogTimeoutVoltage(self, *args):
        return _mscl.BaseStationConfig_analogTimeoutVoltage(self, *args)

    def analogExceedanceEnable(self, *args):
        return _mscl.BaseStationConfig_analogExceedanceEnable(self, *args)

    def analogPairing(self, *args):
        return _mscl.BaseStationConfig_analogPairing(self, *args)
    __swig_destroy__ = _mscl.delete_BaseStationConfig

# Register BaseStationConfig in _mscl:
_mscl.BaseStationConfig_swigregister(BaseStationConfig)

class BeaconStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.BeaconStatus_swiginit(self, _mscl.new_BeaconStatus(*args))

    def enabled(self):
        return _mscl.BeaconStatus_enabled(self)

    def timestamp(self):
        return _mscl.BeaconStatus_timestamp(self)
    __swig_destroy__ = _mscl.delete_BeaconStatus

# Register BeaconStatus in _mscl:
_mscl.BeaconStatus_swigregister(BeaconStatus)

class BaseStationInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fw, model, region, asppVer_lxrs, asppVer_lxrsPlus):
        _mscl.BaseStationInfo_swiginit(self, _mscl.new_BaseStationInfo(fw, model, region, asppVer_lxrs, asppVer_lxrsPlus))
    __swig_destroy__ = _mscl.delete_BaseStationInfo

# Register BaseStationInfo in _mscl:
_mscl.BaseStationInfo_swigregister(BaseStationInfo)

class BaseStation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    BASE_COMMANDS_DEFAULT_TIMEOUT = _mscl.BaseStation_BASE_COMMANDS_DEFAULT_TIMEOUT
    ETHERNET_BASE_COMMANDS_DEFAULT_TIMEOUT = _mscl.BaseStation_ETHERNET_BASE_COMMANDS_DEFAULT_TIMEOUT
    BROADCAST_NODE_ADDRESS = _mscl.BaseStation_BROADCAST_NODE_ADDRESS
    BROADCAST_NODE_ADDRESS_ASPP3 = _mscl.BaseStation_BROADCAST_NODE_ADDRESS_ASPP3

    def __init__(self, *args):
        _mscl.BaseStation_swiginit(self, _mscl.new_BaseStation(*args))
    __swig_destroy__ = _mscl.delete_BaseStation

    @staticmethod
    def Mock(*args):
        return _mscl.BaseStation_Mock(*args)

    @staticmethod
    def deviceName(serial):
        return _mscl.BaseStation_deviceName(serial)

    def connection(self):
        return _mscl.BaseStation_connection(self)

    def features(self):
        return _mscl.BaseStation_features(self)

    def lastCommunicationTime(self):
        return _mscl.BaseStation_lastCommunicationTime(self)

    def readWriteRetries(self, *args):
        return _mscl.BaseStation_readWriteRetries(self, *args)

    def useEepromCache(self, useCache):
        return _mscl.BaseStation_useEepromCache(self, useCache)

    def clearEepromCache(self):
        return _mscl.BaseStation_clearEepromCache(self)

    def frequency(self):
        return _mscl.BaseStation_frequency(self)

    def communicationProtocol(self):
        return _mscl.BaseStation_communicationProtocol(self)

    def firmwareVersion(self):
        return _mscl.BaseStation_firmwareVersion(self)

    def model(self):
        return _mscl.BaseStation_model(self)

    def serial(self):
        return _mscl.BaseStation_serial(self)

    def name(self):
        return _mscl.BaseStation_name(self)

    def microcontroller(self):
        return _mscl.BaseStation_microcontroller(self)

    def regionCode(self):
        return _mscl.BaseStation_regionCode(self)

    def getData(self, timeout=0, maxSweeps=0):
        return _mscl.BaseStation_getData(self, timeout, maxSweeps)

    def totalData(self):
        return _mscl.BaseStation_totalData(self)

    def getNodeDiscoveries(self):
        return _mscl.BaseStation_getNodeDiscoveries(self)

    def timeout(self, *args):
        return _mscl.BaseStation_timeout(self, *args)

    def ping(self):
        return _mscl.BaseStation_ping(self)

    def readEeprom(self, eepromAddress):
        return _mscl.BaseStation_readEeprom(self, eepromAddress)

    def writeEeprom(self, eepromAddress, value):
        return _mscl.BaseStation_writeEeprom(self, eepromAddress, value)

    def enableBeacon(self, *args):
        return _mscl.BaseStation_enableBeacon(self, *args)

    def disableBeacon(self):
        return _mscl.BaseStation_disableBeacon(self)

    def beaconStatus(self):
        return _mscl.BaseStation_beaconStatus(self)

    def startRfSweepMode(self, *args):
        return _mscl.BaseStation_startRfSweepMode(self, *args)

    def cyclePower(self, checkComm=True):
        return _mscl.BaseStation_cyclePower(self, checkComm)

    def resetRadio(self):
        return _mscl.BaseStation_resetRadio(self)

    def changeFrequency(self, frequency):
        return _mscl.BaseStation_changeFrequency(self, frequency)

    def broadcastSetToIdle(self):
        return _mscl.BaseStation_broadcastSetToIdle(self)

    def verifyConfig(self, config, outIssues):
        return _mscl.BaseStation_verifyConfig(self, config, outIssues)

    def applyConfig(self, config):
        return _mscl.BaseStation_applyConfig(self, config)

    def getTransmitPower(self):
        return _mscl.BaseStation_getTransmitPower(self)

    def getButtonLongPress(self, buttonNumber):
        return _mscl.BaseStation_getButtonLongPress(self, buttonNumber)

    def getButtonShortPress(self, buttonNumber):
        return _mscl.BaseStation_getButtonShortPress(self, buttonNumber)

    def getAnalogPairingEnabled(self):
        return _mscl.BaseStation_getAnalogPairingEnabled(self)

    def getAnalogTimeoutTime(self):
        return _mscl.BaseStation_getAnalogTimeoutTime(self)

    def getAnalogTimeoutVoltage(self):
        return _mscl.BaseStation_getAnalogTimeoutVoltage(self)

    def getAnalogExceedanceEnabled(self):
        return _mscl.BaseStation_getAnalogExceedanceEnabled(self)

    def getAnalogPair(self, portNumber):
        return _mscl.BaseStation_getAnalogPair(self, portNumber)

# Register BaseStation in _mscl:
_mscl.BaseStation_swigregister(BaseStation)

def BaseStation_Mock(*args):
    return _mscl.BaseStation_Mock(*args)

def BaseStation_deviceName(serial):
    return _mscl.BaseStation_deviceName(serial)

class LoggedDataSweep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.LoggedDataSweep_swiginit(self, _mscl.new_LoggedDataSweep(*args))

    def timestamp(self):
        return _mscl.LoggedDataSweep_timestamp(self)

    def tick(self):
        return _mscl.LoggedDataSweep_tick(self)

    def data(self):
        return _mscl.LoggedDataSweep_data(self)

    def calApplied(self):
        return _mscl.LoggedDataSweep_calApplied(self)
    __swig_destroy__ = _mscl.delete_LoggedDataSweep

# Register LoggedDataSweep in _mscl:
_mscl.LoggedDataSweep_swigregister(LoggedDataSweep)

class RadioFeatures(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.RadioFeatures_swiginit(self, _mscl.new_RadioFeatures(*args))

    def extendedRange(self):
        return _mscl.RadioFeatures_extendedRange(self)
    __swig_destroy__ = _mscl.delete_RadioFeatures

# Register RadioFeatures in _mscl:
_mscl.RadioFeatures_swigregister(RadioFeatures)

class WirelessNodeConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.WirelessNodeConfig_swiginit(self, _mscl.new_WirelessNodeConfig())
    SENSOR_DELAY_ALWAYS_ON = _mscl.WirelessNodeConfig_SENSOR_DELAY_ALWAYS_ON

    def defaultMode(self, *args):
        return _mscl.WirelessNodeConfig_defaultMode(self, *args)

    def inactivityTimeout(self, *args):
        return _mscl.WirelessNodeConfig_inactivityTimeout(self, *args)

    def checkRadioInterval(self, *args):
        return _mscl.WirelessNodeConfig_checkRadioInterval(self, *args)

    def transmitPower(self, *args):
        return _mscl.WirelessNodeConfig_transmitPower(self, *args)

    def samplingMode(self, *args):
        return _mscl.WirelessNodeConfig_samplingMode(self, *args)

    def sampleRate(self, *args):
        return _mscl.WirelessNodeConfig_sampleRate(self, *args)

    def activeChannels(self, *args):
        return _mscl.WirelessNodeConfig_activeChannels(self, *args)

    def numSweeps(self, *args):
        return _mscl.WirelessNodeConfig_numSweeps(self, *args)

    def unlimitedDuration(self, *args):
        return _mscl.WirelessNodeConfig_unlimitedDuration(self, *args)

    def dataFormat(self, *args):
        return _mscl.WirelessNodeConfig_dataFormat(self, *args)

    def dataCollectionMethod(self, *args):
        return _mscl.WirelessNodeConfig_dataCollectionMethod(self, *args)

    def timeBetweenBursts(self, *args):
        return _mscl.WirelessNodeConfig_timeBetweenBursts(self, *args)

    def lostBeaconTimeout(self, *args):
        return _mscl.WirelessNodeConfig_lostBeaconTimeout(self, *args)

    def pullUpResistor(self, *args):
        return _mscl.WirelessNodeConfig_pullUpResistor(self, *args)

    def inputRange(self, *args):
        return _mscl.WirelessNodeConfig_inputRange(self, *args)

    def hardwareOffset(self, *args):
        return _mscl.WirelessNodeConfig_hardwareOffset(self, *args)

    def antiAliasingFilter(self, *args):
        return _mscl.WirelessNodeConfig_antiAliasingFilter(self, *args)

    def cfcFilterConfig(self, *args):
        return _mscl.WirelessNodeConfig_cfcFilterConfig(self, *args)

    def lowPassFilter(self, *args):
        return _mscl.WirelessNodeConfig_lowPassFilter(self, *args)

    def highPassFilter(self, *args):
        return _mscl.WirelessNodeConfig_highPassFilter(self, *args)

    def gaugeFactor(self, *args):
        return _mscl.WirelessNodeConfig_gaugeFactor(self, *args)

    def gaugeResistance(self, *args):
        return _mscl.WirelessNodeConfig_gaugeResistance(self, *args)

    def excitationVoltage(self, *args):
        return _mscl.WirelessNodeConfig_excitationVoltage(self, *args)

    def numActiveGauges(self, *args):
        return _mscl.WirelessNodeConfig_numActiveGauges(self, *args)

    def lowBatteryThreshold(self, *args):
        return _mscl.WirelessNodeConfig_lowBatteryThreshold(self, *args)

    def linearEquation(self, *args):
        return _mscl.WirelessNodeConfig_linearEquation(self, *args)

    def unit(self, *args):
        return _mscl.WirelessNodeConfig_unit(self, *args)

    def equationType(self, *args):
        return _mscl.WirelessNodeConfig_equationType(self, *args)

    def filterSettlingTime(self, *args):
        return _mscl.WirelessNodeConfig_filterSettlingTime(self, *args)

    def thermocoupleType(self, *args):
        return _mscl.WirelessNodeConfig_thermocoupleType(self, *args)

    def tempSensorOptions(self, *args):
        return _mscl.WirelessNodeConfig_tempSensorOptions(self, *args)

    def debounceFilter(self, *args):
        return _mscl.WirelessNodeConfig_debounceFilter(self, *args)

    def fatigueOptions(self, *args):
        return _mscl.WirelessNodeConfig_fatigueOptions(self, *args)

    def histogramOptions(self, *args):
        return _mscl.WirelessNodeConfig_histogramOptions(self, *args)

    def activitySense(self, *args):
        return _mscl.WirelessNodeConfig_activitySense(self, *args)

    def eventTriggerOptions(self, *args):
        return _mscl.WirelessNodeConfig_eventTriggerOptions(self, *args)

    def diagnosticInterval(self, *args):
        return _mscl.WirelessNodeConfig_diagnosticInterval(self, *args)

    def storageLimitMode(self, *args):
        return _mscl.WirelessNodeConfig_storageLimitMode(self, *args)

    def sensorDelay(self, *args):
        return _mscl.WirelessNodeConfig_sensorDelay(self, *args)

    def dataMode(self, *args):
        return _mscl.WirelessNodeConfig_dataMode(self, *args)

    def derivedDataRate(self, *args):
        return _mscl.WirelessNodeConfig_derivedDataRate(self, *args)

    def derivedChannelMask(self, *args):
        return _mscl.WirelessNodeConfig_derivedChannelMask(self, *args)

    def derivedVelocityUnit(self, *args):
        return _mscl.WirelessNodeConfig_derivedVelocityUnit(self, *args)

    def communicationProtocol(self, *args):
        return _mscl.WirelessNodeConfig_communicationProtocol(self, *args)

    def sensorOutputMode(self, *args):
        return _mscl.WirelessNodeConfig_sensorOutputMode(self, *args)

    @staticmethod
    def flashBandwidth(rawSampleRate, dataFormat, numRawChannels, derivedBytesPerSweep, derivedRate):
        return _mscl.WirelessNodeConfig_flashBandwidth(rawSampleRate, dataFormat, numRawChannels, derivedBytesPerSweep, derivedRate)

    @staticmethod
    def flashBandwidth_burst(rawSampleRate, dataFormat, numRawChannels, derivedBytesPerSweep, numSweeps, timeBetweenBursts):
        return _mscl.WirelessNodeConfig_flashBandwidth_burst(rawSampleRate, dataFormat, numRawChannels, derivedBytesPerSweep, numSweeps, timeBetweenBursts)
    __swig_destroy__ = _mscl.delete_WirelessNodeConfig

# Register WirelessNodeConfig in _mscl:
_mscl.WirelessNodeConfig_swigregister(WirelessNodeConfig)

def WirelessNodeConfig_flashBandwidth(rawSampleRate, dataFormat, numRawChannels, derivedBytesPerSweep, derivedRate):
    return _mscl.WirelessNodeConfig_flashBandwidth(rawSampleRate, dataFormat, numRawChannels, derivedBytesPerSweep, derivedRate)

def WirelessNodeConfig_flashBandwidth_burst(rawSampleRate, dataFormat, numRawChannels, derivedBytesPerSweep, numSweeps, timeBetweenBursts):
    return _mscl.WirelessNodeConfig_flashBandwidth_burst(rawSampleRate, dataFormat, numRawChannels, derivedBytesPerSweep, numSweeps, timeBetweenBursts)

class AutoBalanceResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.AutoBalanceResult_swiginit(self, _mscl.new_AutoBalanceResult())

    def errorCode(self):
        return _mscl.AutoBalanceResult_errorCode(self)

    def percentAchieved(self):
        return _mscl.AutoBalanceResult_percentAchieved(self)

    def hardwareOffset(self):
        return _mscl.AutoBalanceResult_hardwareOffset(self)
    __swig_destroy__ = _mscl.delete_AutoBalanceResult

# Register AutoBalanceResult in _mscl:
_mscl.AutoBalanceResult_swigregister(AutoBalanceResult)

class ShuntCalCmdInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    useInternalShunt = property(_mscl.ShuntCalCmdInfo_useInternalShunt_get, _mscl.ShuntCalCmdInfo_useInternalShunt_set)
    numActiveGauges = property(_mscl.ShuntCalCmdInfo_numActiveGauges_get, _mscl.ShuntCalCmdInfo_numActiveGauges_set)
    gaugeResistance = property(_mscl.ShuntCalCmdInfo_gaugeResistance_get, _mscl.ShuntCalCmdInfo_gaugeResistance_set)
    shuntResistance = property(_mscl.ShuntCalCmdInfo_shuntResistance_get, _mscl.ShuntCalCmdInfo_shuntResistance_set)
    gaugeFactor = property(_mscl.ShuntCalCmdInfo_gaugeFactor_get, _mscl.ShuntCalCmdInfo_gaugeFactor_set)
    inputRange = property(_mscl.ShuntCalCmdInfo_inputRange_get, _mscl.ShuntCalCmdInfo_inputRange_set)
    hardwareOffset = property(_mscl.ShuntCalCmdInfo_hardwareOffset_get, _mscl.ShuntCalCmdInfo_hardwareOffset_set)
    excitationVoltage = property(_mscl.ShuntCalCmdInfo_excitationVoltage_get, _mscl.ShuntCalCmdInfo_excitationVoltage_set)

    def __init__(self):
        _mscl.ShuntCalCmdInfo_swiginit(self, _mscl.new_ShuntCalCmdInfo())
    __swig_destroy__ = _mscl.delete_ShuntCalCmdInfo

# Register ShuntCalCmdInfo in _mscl:
_mscl.ShuntCalCmdInfo_swigregister(ShuntCalCmdInfo)

class AutoCalResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_AutoCalResult

    def completionFlag(self):
        return _mscl.AutoCalResult_completionFlag(self)

# Register AutoCalResult in _mscl:
_mscl.AutoCalResult_swigregister(AutoCalResult)

class AutoCalResult_shmLink(AutoCalResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.AutoCalResult_shmLink_swiginit(self, _mscl.new_AutoCalResult_shmLink())
    __swig_destroy__ = _mscl.delete_AutoCalResult_shmLink

    def errorFlagCh1(self):
        return _mscl.AutoCalResult_shmLink_errorFlagCh1(self)

    def errorFlagCh2(self):
        return _mscl.AutoCalResult_shmLink_errorFlagCh2(self)

    def errorFlagCh3(self):
        return _mscl.AutoCalResult_shmLink_errorFlagCh3(self)

    def offsetCh1(self):
        return _mscl.AutoCalResult_shmLink_offsetCh1(self)

    def offsetCh2(self):
        return _mscl.AutoCalResult_shmLink_offsetCh2(self)

    def offsetCh3(self):
        return _mscl.AutoCalResult_shmLink_offsetCh3(self)

    def temperature(self):
        return _mscl.AutoCalResult_shmLink_temperature(self)

# Register AutoCalResult_shmLink in _mscl:
_mscl.AutoCalResult_shmLink_swigregister(AutoCalResult_shmLink)

class AutoCalResult_shmLink201(AutoCalResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.AutoCalResult_shmLink201_swiginit(self, _mscl.new_AutoCalResult_shmLink201())
    __swig_destroy__ = _mscl.delete_AutoCalResult_shmLink201

    def errorFlagCh1(self):
        return _mscl.AutoCalResult_shmLink201_errorFlagCh1(self)

    def errorFlagCh2(self):
        return _mscl.AutoCalResult_shmLink201_errorFlagCh2(self)

    def errorFlagCh3(self):
        return _mscl.AutoCalResult_shmLink201_errorFlagCh3(self)

    def slopeCh1(self):
        return _mscl.AutoCalResult_shmLink201_slopeCh1(self)

    def offsetCh1(self):
        return _mscl.AutoCalResult_shmLink201_offsetCh1(self)

    def slopeCh2(self):
        return _mscl.AutoCalResult_shmLink201_slopeCh2(self)

    def offsetCh2(self):
        return _mscl.AutoCalResult_shmLink201_offsetCh2(self)

    def slopeCh3(self):
        return _mscl.AutoCalResult_shmLink201_slopeCh3(self)

    def offsetCh3(self):
        return _mscl.AutoCalResult_shmLink201_offsetCh3(self)

    def temperature(self):
        return _mscl.AutoCalResult_shmLink201_temperature(self)

# Register AutoCalResult_shmLink201 in _mscl:
_mscl.AutoCalResult_shmLink201_swigregister(AutoCalResult_shmLink201)

class AutoShuntCalResult(AutoCalResult):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.AutoShuntCalResult_swiginit(self, _mscl.new_AutoShuntCalResult())
    __swig_destroy__ = _mscl.delete_AutoShuntCalResult

    def errorFlag(self):
        return _mscl.AutoShuntCalResult_errorFlag(self)

    def slope(self):
        return _mscl.AutoShuntCalResult_slope(self)

    def offset(self):
        return _mscl.AutoShuntCalResult_offset(self)

    def baseMedian(self):
        return _mscl.AutoShuntCalResult_baseMedian(self)

    def baseMin(self):
        return _mscl.AutoShuntCalResult_baseMin(self)

    def baseMax(self):
        return _mscl.AutoShuntCalResult_baseMax(self)

    def shuntMedian(self):
        return _mscl.AutoShuntCalResult_shuntMedian(self)

    def shuntMin(self):
        return _mscl.AutoShuntCalResult_shuntMin(self)

    def shuntMax(self):
        return _mscl.AutoShuntCalResult_shuntMax(self)

# Register AutoShuntCalResult in _mscl:
_mscl.AutoShuntCalResult_swigregister(AutoShuntCalResult)

class PingResponse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.PingResponse_swiginit(self, _mscl.new_PingResponse())

    def success(self):
        return _mscl.PingResponse_success(self)

    def nodeRssi(self):
        return _mscl.PingResponse_nodeRssi(self)

    def baseRssi(self):
        return _mscl.PingResponse_baseRssi(self)
    __swig_destroy__ = _mscl.delete_PingResponse

# Register PingResponse in _mscl:
_mscl.PingResponse_swigregister(PingResponse)

class SetToIdleStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    setToIdleResult_success = _mscl.SetToIdleStatus_setToIdleResult_success
    setToIdleResult_canceled = _mscl.SetToIdleStatus_setToIdleResult_canceled
    setToIdleResult_failed = _mscl.SetToIdleStatus_setToIdleResult_failed
    setToIdleResult_notCompleted = _mscl.SetToIdleStatus_setToIdleResult_notCompleted

    def result(self):
        return _mscl.SetToIdleStatus_result(self)

    def complete(self, timeout=10):
        return _mscl.SetToIdleStatus_complete(self, timeout)

    def cancel(self):
        return _mscl.SetToIdleStatus_cancel(self)
    __swig_destroy__ = _mscl.delete_SetToIdleStatus

# Register SetToIdleStatus in _mscl:
_mscl.SetToIdleStatus_swigregister(SetToIdleStatus)

class NodeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fw, model, region):
        _mscl.NodeInfo_swiginit(self, _mscl.new_NodeInfo(fw, model, region))
    __swig_destroy__ = _mscl.delete_NodeInfo

# Register NodeInfo in _mscl:
_mscl.NodeInfo_swigregister(NodeInfo)

class WirelessNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nodeAddress, basestation):
        _mscl.WirelessNode_swiginit(self, _mscl.new_WirelessNode(nodeAddress, basestation))
    __swig_destroy__ = _mscl.delete_WirelessNode

    @staticmethod
    def Mock(*args):
        return _mscl.WirelessNode_Mock(*args)

    @staticmethod
    def deviceName(nodeAddress):
        return _mscl.WirelessNode_deviceName(nodeAddress)

    def features(self):
        return _mscl.WirelessNode_features(self)

    def lastCommunicationTime(self):
        return _mscl.WirelessNode_lastCommunicationTime(self)

    def lastDeviceState(self):
        return _mscl.WirelessNode_lastDeviceState(self)

    def setBaseStation(self, basestation):
        return _mscl.WirelessNode_setBaseStation(self, basestation)

    def getBaseStation(self):
        return _mscl.WirelessNode_getBaseStation(self)

    def hasBaseStation(self, basestation):
        return _mscl.WirelessNode_hasBaseStation(self, basestation)

    def useGroupRead(self, useGroup):
        return _mscl.WirelessNode_useGroupRead(self, useGroup)

    def readWriteRetries(self, *args):
        return _mscl.WirelessNode_readWriteRetries(self, *args)

    def useEepromCache(self, useCache):
        return _mscl.WirelessNode_useEepromCache(self, useCache)

    def clearEepromCache(self):
        return _mscl.WirelessNode_clearEepromCache(self)

    def updateEepromCacheFromNodeDiscovery(self, nodeDisovery):
        return _mscl.WirelessNode_updateEepromCacheFromNodeDiscovery(self, nodeDisovery)

    def getEepromCache(self):
        return _mscl.WirelessNode_getEepromCache(self)

    def nodeAddress(self):
        return _mscl.WirelessNode_nodeAddress(self)

    def frequency(self):
        return _mscl.WirelessNode_frequency(self)

    def communicationProtocol(self):
        return _mscl.WirelessNode_communicationProtocol(self)

    def firmwareVersion(self):
        return _mscl.WirelessNode_firmwareVersion(self)

    def model(self):
        return _mscl.WirelessNode_model(self)

    def serial(self):
        return _mscl.WirelessNode_serial(self)

    def name(self):
        return _mscl.WirelessNode_name(self)

    def microcontroller(self):
        return _mscl.WirelessNode_microcontroller(self)

    def radioFeatures(self):
        return _mscl.WirelessNode_radioFeatures(self)

    def dataStorageSize(self):
        return _mscl.WirelessNode_dataStorageSize(self)

    def regionCode(self):
        return _mscl.WirelessNode_regionCode(self)

    def ping(self):
        return _mscl.WirelessNode_ping(self)

    def sleep(self):
        return _mscl.WirelessNode_sleep(self)

    def cyclePower(self):
        return _mscl.WirelessNode_cyclePower(self)

    def resetRadio(self):
        return _mscl.WirelessNode_resetRadio(self)

    def changeFrequency(self, frequency):
        return _mscl.WirelessNode_changeFrequency(self, frequency)

    def setToIdle(self):
        return _mscl.WirelessNode_setToIdle(self)

    def erase(self):
        return _mscl.WirelessNode_erase(self)

    def startNonSyncSampling(self):
        return _mscl.WirelessNode_startNonSyncSampling(self)

    def resendStartSyncSampling(self):
        return _mscl.WirelessNode_resendStartSyncSampling(self)

    def clearHistogram(self):
        return _mscl.WirelessNode_clearHistogram(self)

    def autoBalance(self, mask, targetPercent):
        return _mscl.WirelessNode_autoBalance(self, mask, targetPercent)

    def autoCal_shmLink(self):
        return _mscl.WirelessNode_autoCal_shmLink(self)

    def autoCal_shmLink201(self):
        return _mscl.WirelessNode_autoCal_shmLink201(self)

    def autoShuntCal(self, mask, commandInfo):
        return _mscl.WirelessNode_autoShuntCal(self, mask, commandInfo)

    def poll(self, mask):
        return _mscl.WirelessNode_poll(self, mask)

    def readEeprom(self, location):
        return _mscl.WirelessNode_readEeprom(self, location)

    def writeEeprom(self, location, value):
        return _mscl.WirelessNode_writeEeprom(self, location, value)

    def getDiagnosticInfo(self):
        return _mscl.WirelessNode_getDiagnosticInfo(self)

    def testCommunicationProtocol(self, protocol):
        return _mscl.WirelessNode_testCommunicationProtocol(self, protocol)

    def verifyConfig(self, config, outIssues):
        return _mscl.WirelessNode_verifyConfig(self, config, outIssues)

    def applyConfig(self, config):
        return _mscl.WirelessNode_applyConfig(self, config)

    def getNumDatalogSessions(self):
        return _mscl.WirelessNode_getNumDatalogSessions(self)

    def percentFull(self):
        return _mscl.WirelessNode_percentFull(self)

    def getDefaultMode(self):
        return _mscl.WirelessNode_getDefaultMode(self)

    def getInactivityTimeout(self):
        return _mscl.WirelessNode_getInactivityTimeout(self)

    def getCheckRadioInterval(self):
        return _mscl.WirelessNode_getCheckRadioInterval(self)

    def getTransmitPower(self):
        return _mscl.WirelessNode_getTransmitPower(self)

    def getSamplingMode(self):
        return _mscl.WirelessNode_getSamplingMode(self)

    def getActiveChannels(self):
        return _mscl.WirelessNode_getActiveChannels(self)

    def getSampleRate(self):
        return _mscl.WirelessNode_getSampleRate(self)

    def getNumSweeps(self):
        return _mscl.WirelessNode_getNumSweeps(self)

    def getUnlimitedDuration(self):
        return _mscl.WirelessNode_getUnlimitedDuration(self)

    def getDataFormat(self):
        return _mscl.WirelessNode_getDataFormat(self)

    def getDataCollectionMethod(self):
        return _mscl.WirelessNode_getDataCollectionMethod(self)

    def getTimeBetweenBursts(self):
        return _mscl.WirelessNode_getTimeBetweenBursts(self)

    def getLostBeaconTimeout(self):
        return _mscl.WirelessNode_getLostBeaconTimeout(self)

    def getInputRange(self, mask):
        return _mscl.WirelessNode_getInputRange(self, mask)

    def getHardwareOffset(self, mask):
        return _mscl.WirelessNode_getHardwareOffset(self, mask)

    def getAntiAliasingFilter(self, mask):
        return _mscl.WirelessNode_getAntiAliasingFilter(self, mask)

    def getCfcFilterConfiguration(self):
        return _mscl.WirelessNode_getCfcFilterConfiguration(self)

    def getLowPassFilter(self, mask):
        return _mscl.WirelessNode_getLowPassFilter(self, mask)

    def getHighPassFilter(self, mask):
        return _mscl.WirelessNode_getHighPassFilter(self, mask)

    def getDebounceFilter(self, mask):
        return _mscl.WirelessNode_getDebounceFilter(self, mask)

    def getPullUpResistor(self, mask):
        return _mscl.WirelessNode_getPullUpResistor(self, mask)

    def getSensorOutputMode(self):
        return _mscl.WirelessNode_getSensorOutputMode(self)

    def getGaugeFactor(self, mask):
        return _mscl.WirelessNode_getGaugeFactor(self, mask)

    def getExcitationVoltage(self):
        return _mscl.WirelessNode_getExcitationVoltage(self)

    def getAdcVoltageRef(self):
        return _mscl.WirelessNode_getAdcVoltageRef(self)

    def getGainAmplifierVoltageRef(self):
        return _mscl.WirelessNode_getGainAmplifierVoltageRef(self)

    def getGaugeResistance(self):
        return _mscl.WirelessNode_getGaugeResistance(self)

    def getNumActiveGauges(self):
        return _mscl.WirelessNode_getNumActiveGauges(self)

    def getLowBatteryThreshold(self):
        return _mscl.WirelessNode_getLowBatteryThreshold(self)

    def getLinearEquation(self, mask):
        return _mscl.WirelessNode_getLinearEquation(self, mask)

    def getUnit(self, mask):
        return _mscl.WirelessNode_getUnit(self, mask)

    def getEquationType(self, mask):
        return _mscl.WirelessNode_getEquationType(self, mask)

    def getFactoryCalibrationLinearEq(self, mask):
        return _mscl.WirelessNode_getFactoryCalibrationLinearEq(self, mask)

    def getFactoryCalibrationUnit(self, mask):
        return _mscl.WirelessNode_getFactoryCalibrationUnit(self, mask)

    def getFactoryCalibrationEqType(self, mask):
        return _mscl.WirelessNode_getFactoryCalibrationEqType(self, mask)

    def getFilterSettlingTime(self, mask):
        return _mscl.WirelessNode_getFilterSettlingTime(self, mask)

    def getThermocoupleType(self, mask):
        return _mscl.WirelessNode_getThermocoupleType(self, mask)

    def getTempSensorOptions(self, mask):
        return _mscl.WirelessNode_getTempSensorOptions(self, mask)

    def getFatigueOptions(self):
        return _mscl.WirelessNode_getFatigueOptions(self)

    def getHistogramOptions(self):
        return _mscl.WirelessNode_getHistogramOptions(self)

    def getActivitySense(self):
        return _mscl.WirelessNode_getActivitySense(self)

    def getEventTriggerOptions(self):
        return _mscl.WirelessNode_getEventTriggerOptions(self)

    def getDiagnosticInterval(self):
        return _mscl.WirelessNode_getDiagnosticInterval(self)

    def getStorageLimitMode(self):
        return _mscl.WirelessNode_getStorageLimitMode(self)

    def getSensorDelay(self):
        return _mscl.WirelessNode_getSensorDelay(self)

    def getDataMode(self):
        return _mscl.WirelessNode_getDataMode(self)

    def getDerivedDataRate(self):
        return _mscl.WirelessNode_getDerivedDataRate(self)

    def getDerivedChannelMask(self, category):
        return _mscl.WirelessNode_getDerivedChannelMask(self, category)

    def getDerivedVelocityUnit(self):
        return _mscl.WirelessNode_getDerivedVelocityUnit(self)

# Register WirelessNode in _mscl:
_mscl.WirelessNode_swigregister(WirelessNode)

def WirelessNode_Mock(*args):
    return _mscl.WirelessNode_Mock(*args)

def WirelessNode_deviceName(nodeAddress):
    return _mscl.WirelessNode_deviceName(nodeAddress)

class DatalogDownloader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.DatalogDownloader_swiginit(self, _mscl.new_DatalogDownloader(*args))
    __swig_destroy__ = _mscl.delete_DatalogDownloader

    def complete(self):
        return _mscl.DatalogDownloader_complete(self)

    def percentComplete(self):
        return _mscl.DatalogDownloader_percentComplete(self)

    def getNextData(self):
        return _mscl.DatalogDownloader_getNextData(self)

    def metaDataUpdated(self):
        return _mscl.DatalogDownloader_metaDataUpdated(self)

    def calCoefficientsUpdated(self):
        return _mscl.DatalogDownloader_calCoefficientsUpdated(self)

    def startOfSession(self):
        return _mscl.DatalogDownloader_startOfSession(self)

    def sessionIndex(self):
        return _mscl.DatalogDownloader_sessionIndex(self)

    def sampleRate(self):
        return _mscl.DatalogDownloader_sampleRate(self)

    def userString(self):
        return _mscl.DatalogDownloader_userString(self)

    def calCoefficients(self):
        return _mscl.DatalogDownloader_calCoefficients(self)

# Register DatalogDownloader in _mscl:
_mscl.DatalogDownloader_swigregister(DatalogDownloader)

class ArmedDataloggingNetwork(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, networkBaseStation):
        _mscl.ArmedDataloggingNetwork_swiginit(self, _mscl.new_ArmedDataloggingNetwork(networkBaseStation))

    def addNode(self, *args):
        return _mscl.ArmedDataloggingNetwork_addNode(self, *args)

    def removeNode(self, nodeAddress):
        return _mscl.ArmedDataloggingNetwork_removeNode(self, nodeAddress)

    def startSampling(self):
        return _mscl.ArmedDataloggingNetwork_startSampling(self)
    __swig_destroy__ = _mscl.delete_ArmedDataloggingNetwork

# Register ArmedDataloggingNetwork in _mscl:
_mscl.ArmedDataloggingNetwork_swigregister(ArmedDataloggingNetwork)

class SyncNetworkInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    status_OK = _mscl.SyncNetworkInfo_status_OK
    status_PoorCommunication = _mscl.SyncNetworkInfo_status_PoorCommunication
    status_DoesNotFit = _mscl.SyncNetworkInfo_status_DoesNotFit
    status_Contention = _mscl.SyncNetworkInfo_status_Contention

    def __init__(self, node):
        _mscl.SyncNetworkInfo_swiginit(self, _mscl.new_SyncNetworkInfo(node))

    def status(self):
        return _mscl.SyncNetworkInfo_status(self)

    def startedSampling(self):
        return _mscl.SyncNetworkInfo_startedSampling(self)

    def configurationApplied(self):
        return _mscl.SyncNetworkInfo_configurationApplied(self)

    def percentBandwidth(self):
        return _mscl.SyncNetworkInfo_percentBandwidth(self)

    def tdmaAddress(self):
        return _mscl.SyncNetworkInfo_tdmaAddress(self)

    def maxTdmaAddress(self):
        return _mscl.SyncNetworkInfo_maxTdmaAddress(self)

    def transmissionPerGroup(self):
        return _mscl.SyncNetworkInfo_transmissionPerGroup(self)

    def groupSize(self):
        return _mscl.SyncNetworkInfo_groupSize(self)
    __swig_destroy__ = _mscl.delete_SyncNetworkInfo

# Register SyncNetworkInfo in _mscl:
_mscl.SyncNetworkInfo_swigregister(SyncNetworkInfo)

class SyncSamplingNetwork(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, networkBaseStation):
        _mscl.SyncSamplingNetwork_swiginit(self, _mscl.new_SyncSamplingNetwork(networkBaseStation))

    def addNode(self, *args):
        return _mscl.SyncSamplingNetwork_addNode(self, *args)

    def removeNode(self, nodeAddress):
        return _mscl.SyncSamplingNetwork_removeNode(self, nodeAddress)

    def percentBandwidth(self):
        return _mscl.SyncSamplingNetwork_percentBandwidth(self)

    def ok(self):
        return _mscl.SyncSamplingNetwork_ok(self)

    def refresh(self):
        return _mscl.SyncSamplingNetwork_refresh(self)

    def lossless(self, *args):
        return _mscl.SyncSamplingNetwork_lossless(self, *args)

    def communicationProtocol(self, *args):
        return _mscl.SyncSamplingNetwork_communicationProtocol(self, *args)

    def applyConfiguration(self):
        return _mscl.SyncSamplingNetwork_applyConfiguration(self)

    def startSampling(self, *args):
        return _mscl.SyncSamplingNetwork_startSampling(self, *args)

    def startSampling_noBeacon(self):
        return _mscl.SyncSamplingNetwork_startSampling_noBeacon(self)

    def getNodeNetworkInfo(self, nodeAddress):
        return _mscl.SyncSamplingNetwork_getNodeNetworkInfo(self, nodeAddress)
    __swig_destroy__ = _mscl.delete_SyncSamplingNetwork

# Register SyncSamplingNetwork in _mscl:
_mscl.SyncSamplingNetwork_swigregister(SyncSamplingNetwork)

class NodeFeatures(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_NodeFeatures

    def normalizeNumSweeps(self, sweeps):
        return _mscl.NodeFeatures_normalizeNumSweeps(self, sweeps)

    def normalizeTimeBetweenBursts(self, time):
        return _mscl.NodeFeatures_normalizeTimeBetweenBursts(self, time)

    def channels(self):
        return _mscl.NodeFeatures_channels(self)

    def channelGroups(self):
        return _mscl.NodeFeatures_channelGroups(self)

    def channelType(self, channelNumber):
        return _mscl.NodeFeatures_channelType(self, channelNumber)

    def supportsChannelSetting(self, setting, mask):
        return _mscl.NodeFeatures_supportsChannelSetting(self, setting, mask)

    def supportsInputRangePerExcitationVoltage(self):
        return _mscl.NodeFeatures_supportsInputRangePerExcitationVoltage(self)

    def supportsHardwareOffset(self):
        return _mscl.NodeFeatures_supportsHardwareOffset(self)

    def supportsAntiAliasingFilter(self):
        return _mscl.NodeFeatures_supportsAntiAliasingFilter(self)

    def supportsLowPassFilter(self):
        return _mscl.NodeFeatures_supportsLowPassFilter(self)

    def supportsHighPassFilter(self):
        return _mscl.NodeFeatures_supportsHighPassFilter(self)

    def supportsGaugeFactor(self):
        return _mscl.NodeFeatures_supportsGaugeFactor(self)

    def supportsGaugeResistance(self):
        return _mscl.NodeFeatures_supportsGaugeResistance(self)

    def supportsNumActiveGauges(self):
        return _mscl.NodeFeatures_supportsNumActiveGauges(self)

    def supportsLostBeaconTimeout(self):
        return _mscl.NodeFeatures_supportsLostBeaconTimeout(self)

    def supportsPullUpResistor(self):
        return _mscl.NodeFeatures_supportsPullUpResistor(self)

    def supportsFilterSettlingTime(self):
        return _mscl.NodeFeatures_supportsFilterSettlingTime(self)

    def supportsThermocoupleType(self):
        return _mscl.NodeFeatures_supportsThermocoupleType(self)

    def supportsTempSensorOptions(self):
        return _mscl.NodeFeatures_supportsTempSensorOptions(self)

    def supportsDebounceFilter(self):
        return _mscl.NodeFeatures_supportsDebounceFilter(self)

    def supportsFatigueConfig(self):
        return _mscl.NodeFeatures_supportsFatigueConfig(self)

    def supportsYoungsModConfig(self):
        return _mscl.NodeFeatures_supportsYoungsModConfig(self)

    def supportsPoissonsRatioConfig(self):
        return _mscl.NodeFeatures_supportsPoissonsRatioConfig(self)

    def supportsFatigueDebugModeConfig(self):
        return _mscl.NodeFeatures_supportsFatigueDebugModeConfig(self)

    def supportsFatigueModeConfig(self):
        return _mscl.NodeFeatures_supportsFatigueModeConfig(self)

    def supportsHistogramConfig(self):
        return _mscl.NodeFeatures_supportsHistogramConfig(self)

    def supportsHistogramRateConfig(self):
        return _mscl.NodeFeatures_supportsHistogramRateConfig(self)

    def supportsHistogramEnableConfig(self):
        return _mscl.NodeFeatures_supportsHistogramEnableConfig(self)

    def supportsActivitySense(self):
        return _mscl.NodeFeatures_supportsActivitySense(self)

    def supportsAutoBalance(self):
        return _mscl.NodeFeatures_supportsAutoBalance(self)

    def supportsLegacyShuntCal(self):
        return _mscl.NodeFeatures_supportsLegacyShuntCal(self)

    def supportsAutoCal_shm(self):
        return _mscl.NodeFeatures_supportsAutoCal_shm(self)

    def supportsAutoCal_shm201(self):
        return _mscl.NodeFeatures_supportsAutoCal_shm201(self)

    def supportsAutoShuntCal(self):
        return _mscl.NodeFeatures_supportsAutoShuntCal(self)

    def supportsGetFactoryCal(self):
        return _mscl.NodeFeatures_supportsGetFactoryCal(self)

    def supportsLimitedDuration(self):
        return _mscl.NodeFeatures_supportsLimitedDuration(self)

    def supportsEventTrigger(self):
        return _mscl.NodeFeatures_supportsEventTrigger(self)

    def supportsDiagnosticInfo(self):
        return _mscl.NodeFeatures_supportsDiagnosticInfo(self)

    def supportsLoggedData(self):
        return _mscl.NodeFeatures_supportsLoggedData(self)

    def supportsPoll(self):
        return _mscl.NodeFeatures_supportsPoll(self)

    def supportsSensorDelayConfig(self):
        return _mscl.NodeFeatures_supportsSensorDelayConfig(self)

    def supportsSensorDelayAlwaysOn(self):
        return _mscl.NodeFeatures_supportsSensorDelayAlwaysOn(self)

    def supportsSensorOutputMode(self):
        return _mscl.NodeFeatures_supportsSensorOutputMode(self)

    def supportsCfcFilterConfiguration(self):
        return _mscl.NodeFeatures_supportsCfcFilterConfiguration(self)

    def supportsChannel(self, channelNumber):
        return _mscl.NodeFeatures_supportsChannel(self, channelNumber)

    def supportsSamplingMode(self, samplingMode):
        return _mscl.NodeFeatures_supportsSamplingMode(self, samplingMode)

    def supportsSampleRate(self, sampleRate, samplingMode, dataCollectionMethod, dataMode):
        return _mscl.NodeFeatures_supportsSampleRate(self, sampleRate, samplingMode, dataCollectionMethod, dataMode)

    def supportsCommunicationProtocol(self, protocol):
        return _mscl.NodeFeatures_supportsCommunicationProtocol(self, protocol)

    def supportsDataFormat(self, dataFormat):
        return _mscl.NodeFeatures_supportsDataFormat(self, dataFormat)

    def supportsDefaultMode(self, mode):
        return _mscl.NodeFeatures_supportsDefaultMode(self, mode)

    def supportsDataCollectionMethod(self, collectionMethod):
        return _mscl.NodeFeatures_supportsDataCollectionMethod(self, collectionMethod)

    def supportsTransmitPower(self, power, commProtocol):
        return _mscl.NodeFeatures_supportsTransmitPower(self, power, commProtocol)

    def supportsDataMode(self, dataMode):
        return _mscl.NodeFeatures_supportsDataMode(self, dataMode)

    def supportsTransducerType(self, transducerType):
        return _mscl.NodeFeatures_supportsTransducerType(self, transducerType)

    def supportsFatigueMode(self, mode):
        return _mscl.NodeFeatures_supportsFatigueMode(self, mode)

    def supportsInputRange(self, *args):
        return _mscl.NodeFeatures_supportsInputRange(self, *args)

    def supportsCentisecondEventDuration(self):
        return _mscl.NodeFeatures_supportsCentisecondEventDuration(self)

    def supportsGetDiagnosticInfo(self):
        return _mscl.NodeFeatures_supportsGetDiagnosticInfo(self)

    def supportsNonSyncLogWithTimestamps(self):
        return _mscl.NodeFeatures_supportsNonSyncLogWithTimestamps(self)

    def supportsDerivedCategory(self, category):
        return _mscl.NodeFeatures_supportsDerivedCategory(self, category)

    def supportsRawDataMode(self):
        return _mscl.NodeFeatures_supportsRawDataMode(self)

    def supportsDerivedDataMode(self):
        return _mscl.NodeFeatures_supportsDerivedDataMode(self)

    def supportsDerivedVelocityUnitConfig(self):
        return _mscl.NodeFeatures_supportsDerivedVelocityUnitConfig(self)

    def supportsExcitationVoltageConfig(self):
        return _mscl.NodeFeatures_supportsExcitationVoltageConfig(self)

    def supportsLowBatteryThresholdConfig(self):
        return _mscl.NodeFeatures_supportsLowBatteryThresholdConfig(self)

    def maxSampleRate(self, samplingMode, channels, dataCollectionMethod, dataMode):
        return _mscl.NodeFeatures_maxSampleRate(self, samplingMode, channels, dataCollectionMethod, dataMode)

    def maxSampleRateForSettlingTime(self, filterSettlingTime, samplingMode, dataCollectionMethod, dataMode):
        return _mscl.NodeFeatures_maxSampleRateForSettlingTime(self, filterSettlingTime, samplingMode, dataCollectionMethod, dataMode)

    def maxSampleRateForLowPassFilter(self, lowPassFilter, samplingMode, dataCollectionMethod, dataMode, channels):
        return _mscl.NodeFeatures_maxSampleRateForLowPassFilter(self, lowPassFilter, samplingMode, dataCollectionMethod, dataMode, channels)

    def maxFilterSettlingTime(self, rate):
        return _mscl.NodeFeatures_maxFilterSettlingTime(self, rate)

    def minInactivityTimeout(self):
        return _mscl.NodeFeatures_minInactivityTimeout(self)

    def minLostBeaconTimeout(self):
        return _mscl.NodeFeatures_minLostBeaconTimeout(self)

    def maxLostBeaconTimeout(self):
        return _mscl.NodeFeatures_maxLostBeaconTimeout(self)

    def minCheckRadioInterval(self):
        return _mscl.NodeFeatures_minCheckRadioInterval(self)

    def maxCheckRadioInterval(self):
        return _mscl.NodeFeatures_maxCheckRadioInterval(self)

    def minSweeps(self):
        return _mscl.NodeFeatures_minSweeps(self)

    def maxSweeps(self, samplingMode, dataMode, dataFormat, channels):
        return _mscl.NodeFeatures_maxSweeps(self, samplingMode, dataMode, dataFormat, channels)

    def maxSweepsPerBurst(self, dataMode, dataFormat, channels):
        return _mscl.NodeFeatures_maxSweepsPerBurst(self, dataMode, dataFormat, channels)

    def minTimeBetweenBursts(self, dataMode, dataFormat, rawChannels, derivedChannelMasks, rawSampleRate, sweepsPerBurst, commProtocol):
        return _mscl.NodeFeatures_minTimeBetweenBursts(self, dataMode, dataFormat, rawChannels, derivedChannelMasks, rawSampleRate, sweepsPerBurst, commProtocol)

    def minSensorDelay(self):
        return _mscl.NodeFeatures_minSensorDelay(self)

    def maxSensorDelay(self):
        return _mscl.NodeFeatures_maxSensorDelay(self)

    def defaultSensorDelay(self):
        return _mscl.NodeFeatures_defaultSensorDelay(self)

    def maxEventTriggerTotalDuration(self, dataMode, dataFormat, rawChannels, derivedChannelMasks, rawSampleRate, derivedDataRate):
        return _mscl.NodeFeatures_maxEventTriggerTotalDuration(self, dataMode, dataFormat, rawChannels, derivedChannelMasks, rawSampleRate, derivedDataRate)

    def normalizeEventDuration(self, duration):
        return _mscl.NodeFeatures_normalizeEventDuration(self, duration)

    def normalizeSensorDelay(self, delay):
        return _mscl.NodeFeatures_normalizeSensorDelay(self, delay)

    def numDamageAngles(self):
        return _mscl.NodeFeatures_numDamageAngles(self)

    def numSnCurveSegments(self):
        return _mscl.NodeFeatures_numSnCurveSegments(self)

    def numEventTriggers(self):
        return _mscl.NodeFeatures_numEventTriggers(self)

    def defaultModes(self):
        return _mscl.NodeFeatures_defaultModes(self)

    def dataCollectionMethods(self):
        return _mscl.NodeFeatures_dataCollectionMethods(self)

    def dataFormats(self):
        return _mscl.NodeFeatures_dataFormats(self)

    def samplingModes(self):
        return _mscl.NodeFeatures_samplingModes(self)

    def sampleRates(self, samplingMode, dataCollectionMethod, dataMode):
        return _mscl.NodeFeatures_sampleRates(self, samplingMode, dataCollectionMethod, dataMode)

    def derivedDataRates(self):
        return _mscl.NodeFeatures_derivedDataRates(self)

    def transmitPowers(self, *args):
        return _mscl.NodeFeatures_transmitPowers(self, *args)

    def commProtocols(self):
        return _mscl.NodeFeatures_commProtocols(self)

    def sensorOutputModes(self):
        return _mscl.NodeFeatures_sensorOutputModes(self)

    def cfcFilters(self):
        return _mscl.NodeFeatures_cfcFilters(self)

    def histogramTransmitRates(self):
        return _mscl.NodeFeatures_histogramTransmitRates(self)

    def fatigueModes(self):
        return _mscl.NodeFeatures_fatigueModes(self)

    def antiAliasingFilters(self):
        return _mscl.NodeFeatures_antiAliasingFilters(self)

    def lowPassFilters(self):
        return _mscl.NodeFeatures_lowPassFilters(self)

    def highPassFilters(self):
        return _mscl.NodeFeatures_highPassFilters(self)

    def storageLimitModes(self):
        return _mscl.NodeFeatures_storageLimitModes(self)

    def inputRanges(self, *args):
        return _mscl.NodeFeatures_inputRanges(self, *args)

    def dataModes(self):
        return _mscl.NodeFeatures_dataModes(self)

    def transducerTypes(self):
        return _mscl.NodeFeatures_transducerTypes(self)

    def channelsPerDerivedCategory(self):
        return _mscl.NodeFeatures_channelsPerDerivedCategory(self)

    def excitationVoltages(self):
        return _mscl.NodeFeatures_excitationVoltages(self)

    def adcVoltageInputType(self):
        return _mscl.NodeFeatures_adcVoltageInputType(self)

    def maxTransmitPower(self, *args):
        return _mscl.NodeFeatures_maxTransmitPower(self, *args)

    def minTransmitPower(self, *args):
        return _mscl.NodeFeatures_minTransmitPower(self, *args)

# Register NodeFeatures in _mscl:
_mscl.NodeFeatures_swigregister(NodeFeatures)

class BaseStationFeatures(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_BaseStationFeatures

    def supportsTransmitPower(self, power, commProtocol):
        return _mscl.BaseStationFeatures_supportsTransmitPower(self, power, commProtocol)

    def supportsCommunicationProtocol(self, protocol):
        return _mscl.BaseStationFeatures_supportsCommunicationProtocol(self, protocol)

    def supportsButtons(self):
        return _mscl.BaseStationFeatures_supportsButtons(self)

    def supportsAnalogPairing(self):
        return _mscl.BaseStationFeatures_supportsAnalogPairing(self)

    def supportsBeaconStatus(self):
        return _mscl.BaseStationFeatures_supportsBeaconStatus(self)

    def supportsRfSweepMode(self):
        return _mscl.BaseStationFeatures_supportsRfSweepMode(self)

    def supportsCustomRfSweepMode(self):
        return _mscl.BaseStationFeatures_supportsCustomRfSweepMode(self)

    def buttonCount(self):
        return _mscl.BaseStationFeatures_buttonCount(self)

    def analogPortCount(self):
        return _mscl.BaseStationFeatures_analogPortCount(self)

    def transmitPowers(self, *args):
        return _mscl.BaseStationFeatures_transmitPowers(self, *args)

    def commProtocols(self):
        return _mscl.BaseStationFeatures_commProtocols(self)

    def maxTransmitPower(self, region, commProtocol):
        return _mscl.BaseStationFeatures_maxTransmitPower(self, region, commProtocol)

    def minTransmitPower(self, region, commProtocol):
        return _mscl.BaseStationFeatures_minTransmitPower(self, region, commProtocol)

# Register BaseStationFeatures in _mscl:
_mscl.BaseStationFeatures_swigregister(BaseStationFeatures)

class EulerAngles(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.EulerAngles_swiginit(self, _mscl.new_EulerAngles(*args))

    def roll(self):
        return _mscl.EulerAngles_roll(self)

    def pitch(self):
        return _mscl.EulerAngles_pitch(self)

    def yaw(self):
        return _mscl.EulerAngles_yaw(self)

    def heading(self):
        return _mscl.EulerAngles_heading(self)
    __swig_destroy__ = _mscl.delete_EulerAngles

# Register EulerAngles in _mscl:
_mscl.EulerAngles_swigregister(EulerAngles)

class PositionOffset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.PositionOffset_swiginit(self, _mscl.new_PositionOffset(*args))

    def x(self):
        return _mscl.PositionOffset_x(self)

    def y(self):
        return _mscl.PositionOffset_y(self)

    def z(self):
        return _mscl.PositionOffset_z(self)
    __swig_destroy__ = _mscl.delete_PositionOffset

# Register PositionOffset in _mscl:
_mscl.PositionOffset_swigregister(PositionOffset)

class MipModels(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    node_3dm_dh3 = _mscl.MipModels_node_3dm_dh3
    node_3dm_gx3_15 = _mscl.MipModels_node_3dm_gx3_15
    node_3dm_gx3_25 = _mscl.MipModels_node_3dm_gx3_25
    node_3dm_gx3_35 = _mscl.MipModels_node_3dm_gx3_35
    node_3dm_gx3_45 = _mscl.MipModels_node_3dm_gx3_45
    node_3dm_rq1_45_lt = _mscl.MipModels_node_3dm_rq1_45_lt
    node_3dm_gx4_15 = _mscl.MipModels_node_3dm_gx4_15
    node_3dm_gx4_25 = _mscl.MipModels_node_3dm_gx4_25
    node_3dm_gx4_45 = _mscl.MipModels_node_3dm_gx4_45
    node_3dm_rq1_45_st = _mscl.MipModels_node_3dm_rq1_45_st
    node_mv5_ar = _mscl.MipModels_node_mv5_ar
    node_3dm_gx5_10 = _mscl.MipModels_node_3dm_gx5_10
    node_3dm_gx5_15 = _mscl.MipModels_node_3dm_gx5_15
    node_3dm_gx5_25 = _mscl.MipModels_node_3dm_gx5_25
    node_3dm_gx5_35 = _mscl.MipModels_node_3dm_gx5_35
    node_3dm_gx5_45 = _mscl.MipModels_node_3dm_gx5_45
    node_3dm_cv5_10 = _mscl.MipModels_node_3dm_cv5_10
    node_3dm_cv5_15 = _mscl.MipModels_node_3dm_cv5_15
    node_3dm_cv5_25 = _mscl.MipModels_node_3dm_cv5_25
    node_3dm_cv5_45 = _mscl.MipModels_node_3dm_cv5_45
    node_3dm_gq4_45 = _mscl.MipModels_node_3dm_gq4_45
    node_3dm_cx5_45 = _mscl.MipModels_node_3dm_cx5_45
    node_3dm_cx5_35 = _mscl.MipModels_node_3dm_cx5_35
    node_3dm_cx5_25 = _mscl.MipModels_node_3dm_cx5_25
    node_3dm_cx5_15 = _mscl.MipModels_node_3dm_cx5_15
    node_3dm_cx5_10 = _mscl.MipModels_node_3dm_cx5_10
    node_3dm_cl5_15 = _mscl.MipModels_node_3dm_cl5_15
    node_3dm_cl5_25 = _mscl.MipModels_node_3dm_cl5_25
    node_3dm_gq7 = _mscl.MipModels_node_3dm_gq7
    node_3dm_rtk = _mscl.MipModels_node_3dm_rtk
    node_3dm_cv7_ahrs = _mscl.MipModels_node_3dm_cv7_ahrs
    node_3dm_cv7_ar = _mscl.MipModels_node_3dm_cv7_ar
    placeholder_matchAll = _mscl.MipModels_placeholder_matchAll
    rtk_v1 = _mscl.MipModels_rtk_v1
    rtk_v2 = _mscl.MipModels_rtk_v2
    model_3dm_dh3 = _mscl.MipModels_model_3dm_dh3
    model_3dm_gx3_15 = _mscl.MipModels_model_3dm_gx3_15
    model_3dm_gx3_25 = _mscl.MipModels_model_3dm_gx3_25
    model_3dm_gx3_35 = _mscl.MipModels_model_3dm_gx3_35
    model_3dm_gx3_45 = _mscl.MipModels_model_3dm_gx3_45
    model_3dm_rq1_45_lt = _mscl.MipModels_model_3dm_rq1_45_lt
    model_3dm_gx4_15 = _mscl.MipModels_model_3dm_gx4_15
    model_3dm_gx4_25 = _mscl.MipModels_model_3dm_gx4_25
    model_3dm_gx4_45 = _mscl.MipModels_model_3dm_gx4_45
    model_3dm_rq1_45_st = _mscl.MipModels_model_3dm_rq1_45_st
    model_mv5_ar = _mscl.MipModels_model_mv5_ar
    model_3dm_gx5_10 = _mscl.MipModels_model_3dm_gx5_10
    model_3dm_gx5_15 = _mscl.MipModels_model_3dm_gx5_15
    model_3dm_gx5_25 = _mscl.MipModels_model_3dm_gx5_25
    model_3dm_gx5_35 = _mscl.MipModels_model_3dm_gx5_35
    model_3dm_gx5_45 = _mscl.MipModels_model_3dm_gx5_45
    model_3dm_cv5_10 = _mscl.MipModels_model_3dm_cv5_10
    model_3dm_cv5_15 = _mscl.MipModels_model_3dm_cv5_15
    model_3dm_cv5_25 = _mscl.MipModels_model_3dm_cv5_25
    model_3dm_cv5_45 = _mscl.MipModels_model_3dm_cv5_45
    model_3dm_gq4_45 = _mscl.MipModels_model_3dm_gq4_45
    model_3dm_cx5_45 = _mscl.MipModels_model_3dm_cx5_45
    model_3dm_cx5_35 = _mscl.MipModels_model_3dm_cx5_35
    model_3dm_cx5_25 = _mscl.MipModels_model_3dm_cx5_25
    model_3dm_cx5_15 = _mscl.MipModels_model_3dm_cx5_15
    model_3dm_cx5_10 = _mscl.MipModels_model_3dm_cx5_10
    model_3dm_cl5_15 = _mscl.MipModels_model_3dm_cl5_15
    model_3dm_cl5_25 = _mscl.MipModels_model_3dm_cl5_25
    model_3dm_gq7 = _mscl.MipModels_model_3dm_gq7
    model_3dm_rtk_v1 = _mscl.MipModels_model_3dm_rtk_v1
    model_3dm_rtk = _mscl.MipModels_model_3dm_rtk
    model_3dm_cv7_ahrs = _mscl.MipModels_model_3dm_cv7_ahrs
    model_3dm_cv7_ar = _mscl.MipModels_model_3dm_cv7_ar

    @staticmethod
    def modelNumbersEqual(model1, model2):
        return _mscl.MipModels_modelNumbersEqual(model1, model2)

    @staticmethod
    def modelNumberFromStr(modelNumberString):
        return _mscl.MipModels_modelNumberFromStr(modelNumberString)

    @staticmethod
    def modelNumberFromParts(nodeModel, modifier):
        return _mscl.MipModels_modelNumberFromParts(nodeModel, modifier)

    @staticmethod
    def nodeModelFromStr(modelNumberString):
        return _mscl.MipModels_nodeModelFromStr(modelNumberString)

    @staticmethod
    def modifierFromStr(modelNumberString):
        return _mscl.MipModels_modifierFromStr(modelNumberString)

    @staticmethod
    def nodeModelFromModelNumber(modelNumber):
        return _mscl.MipModels_nodeModelFromModelNumber(modelNumber)

    @staticmethod
    def modifierFromModelNumber(modelNumber):
        return _mscl.MipModels_modifierFromModelNumber(modelNumber)

    @staticmethod
    def stringFromModelNumber(modelNumber):
        return _mscl.MipModels_stringFromModelNumber(modelNumber)

    def __init__(self):
        _mscl.MipModels_swiginit(self, _mscl.new_MipModels())
    __swig_destroy__ = _mscl.delete_MipModels

# Register MipModels in _mscl:
_mscl.MipModels_swigregister(MipModels)

def MipModels_modelNumbersEqual(model1, model2):
    return _mscl.MipModels_modelNumbersEqual(model1, model2)

def MipModels_modelNumberFromStr(modelNumberString):
    return _mscl.MipModels_modelNumberFromStr(modelNumberString)

def MipModels_modelNumberFromParts(nodeModel, modifier):
    return _mscl.MipModels_modelNumberFromParts(nodeModel, modifier)

def MipModels_nodeModelFromStr(modelNumberString):
    return _mscl.MipModels_nodeModelFromStr(modelNumberString)

def MipModels_modifierFromStr(modelNumberString):
    return _mscl.MipModels_modifierFromStr(modelNumberString)

def MipModels_nodeModelFromModelNumber(modelNumber):
    return _mscl.MipModels_nodeModelFromModelNumber(modelNumber)

def MipModels_modifierFromModelNumber(modelNumber):
    return _mscl.MipModels_modifierFromModelNumber(modelNumber)

def MipModels_stringFromModelNumber(modelNumber):
    return _mscl.MipModels_stringFromModelNumber(modelNumber)

class MipModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.MipModel_swiginit(self, _mscl.new_MipModel(*args))

    def equals(self, compare):
        return _mscl.MipModel_equals(self, compare)

    def __str__(self):
        return _mscl.MipModel___str__(self)

    def nodeModel(self):
        return _mscl.MipModel_nodeModel(self)

    def modifier(self):
        return _mscl.MipModel_modifier(self)

    def modelNumber(self):
        return _mscl.MipModel_modelNumber(self)

    def baseModel(self):
        return _mscl.MipModel_baseModel(self)
    __swig_destroy__ = _mscl.delete_MipModel

# Register MipModel in _mscl:
_mscl.MipModel_swigregister(MipModel)
MipModel.mip_model_none = _mscl.cvar.MipModel_mip_model_none
MipModel.mip_model_3dm_dh3 = _mscl.cvar.MipModel_mip_model_3dm_dh3
MipModel.mip_model_3dm_gx3_15 = _mscl.cvar.MipModel_mip_model_3dm_gx3_15
MipModel.mip_model_3dm_gx3_25 = _mscl.cvar.MipModel_mip_model_3dm_gx3_25
MipModel.mip_model_3dm_gx3_35 = _mscl.cvar.MipModel_mip_model_3dm_gx3_35
MipModel.mip_model_3dm_gx3_45 = _mscl.cvar.MipModel_mip_model_3dm_gx3_45
MipModel.mip_model_3dm_rq1_45_lt = _mscl.cvar.MipModel_mip_model_3dm_rq1_45_lt
MipModel.mip_model_3dm_rq1_45_st = _mscl.cvar.MipModel_mip_model_3dm_rq1_45_st
MipModel.mip_model_3dm_gx4_15 = _mscl.cvar.MipModel_mip_model_3dm_gx4_15
MipModel.mip_model_3dm_gx4_25 = _mscl.cvar.MipModel_mip_model_3dm_gx4_25
MipModel.mip_model_3dm_gx4_45 = _mscl.cvar.MipModel_mip_model_3dm_gx4_45
MipModel.mip_model_mv5_ar = _mscl.cvar.MipModel_mip_model_mv5_ar
MipModel.mip_model_3dm_gx5_10 = _mscl.cvar.MipModel_mip_model_3dm_gx5_10
MipModel.mip_model_3dm_gx5_15 = _mscl.cvar.MipModel_mip_model_3dm_gx5_15
MipModel.mip_model_3dm_gx5_25 = _mscl.cvar.MipModel_mip_model_3dm_gx5_25
MipModel.mip_model_3dm_gx5_35 = _mscl.cvar.MipModel_mip_model_3dm_gx5_35
MipModel.mip_model_3dm_gx5_45 = _mscl.cvar.MipModel_mip_model_3dm_gx5_45
MipModel.mip_model_3dm_cv5_10 = _mscl.cvar.MipModel_mip_model_3dm_cv5_10
MipModel.mip_model_3dm_cv5_15 = _mscl.cvar.MipModel_mip_model_3dm_cv5_15
MipModel.mip_model_3dm_cv5_25 = _mscl.cvar.MipModel_mip_model_3dm_cv5_25
MipModel.mip_model_3dm_cv5_45 = _mscl.cvar.MipModel_mip_model_3dm_cv5_45
MipModel.mip_model_3dm_gq4_45 = _mscl.cvar.MipModel_mip_model_3dm_gq4_45
MipModel.mip_model_3dm_cx5_45 = _mscl.cvar.MipModel_mip_model_3dm_cx5_45
MipModel.mip_model_3dm_cx5_35 = _mscl.cvar.MipModel_mip_model_3dm_cx5_35
MipModel.mip_model_3dm_cx5_25 = _mscl.cvar.MipModel_mip_model_3dm_cx5_25
MipModel.mip_model_3dm_cx5_15 = _mscl.cvar.MipModel_mip_model_3dm_cx5_15
MipModel.mip_model_3dm_cx5_10 = _mscl.cvar.MipModel_mip_model_3dm_cx5_10
MipModel.mip_model_3dm_cl5_15 = _mscl.cvar.MipModel_mip_model_3dm_cl5_15
MipModel.mip_model_3dm_cl5_25 = _mscl.cvar.MipModel_mip_model_3dm_cl5_25
MipModel.mip_model_3dm_gq7 = _mscl.cvar.MipModel_mip_model_3dm_gq7
MipModel.mip_model_3dm_rtk_v1 = _mscl.cvar.MipModel_mip_model_3dm_rtk_v1
MipModel.mip_model_3dm_rtk = _mscl.cvar.MipModel_mip_model_3dm_rtk
MipModel.mip_model_3dm_cv7_ahrs = _mscl.cvar.MipModel_mip_model_3dm_cv7_ahrs
MipModel.mip_model_3dm_cv7_ar = _mscl.cvar.MipModel_mip_model_3dm_cv7_ar

class DisplacementModels(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    node_digitalDemod = _mscl.DisplacementModels_node_digitalDemod

    def __init__(self):
        _mscl.DisplacementModels_swiginit(self, _mscl.new_DisplacementModels())
    __swig_destroy__ = _mscl.delete_DisplacementModels

# Register DisplacementModels in _mscl:
_mscl.DisplacementModels_swigregister(DisplacementModels)

class MipTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CLASS_AHRS_IMU = _mscl.MipTypes_CLASS_AHRS_IMU
    CLASS_GNSS = _mscl.MipTypes_CLASS_GNSS
    CLASS_ESTFILTER = _mscl.MipTypes_CLASS_ESTFILTER
    CLASS_DISPLACEMENT = _mscl.MipTypes_CLASS_DISPLACEMENT
    CLASS_GNSS1 = _mscl.MipTypes_CLASS_GNSS1
    CLASS_GNSS2 = _mscl.MipTypes_CLASS_GNSS2
    CLASS_GNSS3 = _mscl.MipTypes_CLASS_GNSS3
    CLASS_RTK = _mscl.MipTypes_CLASS_RTK
    CLASS_GNSS4 = _mscl.MipTypes_CLASS_GNSS4
    CLASS_GNSS5 = _mscl.MipTypes_CLASS_GNSS5
    CLASS_SYSTEM = _mscl.MipTypes_CLASS_SYSTEM
    USE_NEW_SETTINGS = _mscl.MipTypes_USE_NEW_SETTINGS
    READ_BACK_CURRENT_SETTINGS = _mscl.MipTypes_READ_BACK_CURRENT_SETTINGS
    SAVE_CURRENT_SETTINGS = _mscl.MipTypes_SAVE_CURRENT_SETTINGS
    LOAD_STARTUP_SETTINGS = _mscl.MipTypes_LOAD_STARTUP_SETTINGS
    RESET_TO_DEFAULT = _mscl.MipTypes_RESET_TO_DEFAULT
    USE_NEW_SETTINGS_NO_ACKNACK = _mscl.MipTypes_USE_NEW_SETTINGS_NO_ACKNACK
    DISABLED = _mscl.MipTypes_DISABLED
    ENABLED = _mscl.MipTypes_ENABLED
    TIME_FRAME_WEEKS = _mscl.MipTypes_TIME_FRAME_WEEKS
    TIME_FRAME_SECONDS = _mscl.MipTypes_TIME_FRAME_SECONDS
    CMD_PING = _mscl.MipTypes_CMD_PING
    CMD_SET_IDLE = _mscl.MipTypes_CMD_SET_IDLE
    CMD_GET_DEVICE_INFO = _mscl.MipTypes_CMD_GET_DEVICE_INFO
    CMD_GET_DESCRIPTOR_SETS = _mscl.MipTypes_CMD_GET_DESCRIPTOR_SETS
    CMD_BUILT_IN_TEST = _mscl.MipTypes_CMD_BUILT_IN_TEST
    CMD_RESUME = _mscl.MipTypes_CMD_RESUME
    CMD_GET_EXT_DESCRIPTOR_SETS = _mscl.MipTypes_CMD_GET_EXT_DESCRIPTOR_SETS
    CMD_COMM_PORT_SPEED = _mscl.MipTypes_CMD_COMM_PORT_SPEED
    CMD_GPS_TIME_UPDATE = _mscl.MipTypes_CMD_GPS_TIME_UPDATE
    CMD_RESET = _mscl.MipTypes_CMD_RESET
    CMD_POLL_SENSOR_DATA = _mscl.MipTypes_CMD_POLL_SENSOR_DATA
    CMD_POLL_GNSS_DATA = _mscl.MipTypes_CMD_POLL_GNSS_DATA
    CMD_POLL_EF_DATA = _mscl.MipTypes_CMD_POLL_EF_DATA
    CMD_GET_SENSOR_RATE_BASE = _mscl.MipTypes_CMD_GET_SENSOR_RATE_BASE
    CMD_GET_GNSS_RATE_BASE = _mscl.MipTypes_CMD_GET_GNSS_RATE_BASE
    CMD_GET_EF_RATE_BASE = _mscl.MipTypes_CMD_GET_EF_RATE_BASE
    CMD_SENSOR_MESSAGE_FORMAT = _mscl.MipTypes_CMD_SENSOR_MESSAGE_FORMAT
    CMD_GNSS_MESSAGE_FORMAT = _mscl.MipTypes_CMD_GNSS_MESSAGE_FORMAT
    CMD_EF_MESSAGE_FORMAT = _mscl.MipTypes_CMD_EF_MESSAGE_FORMAT
    CMD_NMEA_MESSAGE_FORMAT = _mscl.MipTypes_CMD_NMEA_MESSAGE_FORMAT
    CMD_POLL = _mscl.MipTypes_CMD_POLL
    CMD_GET_BASE_RATE = _mscl.MipTypes_CMD_GET_BASE_RATE
    CMD_MESSAGE_FORMAT = _mscl.MipTypes_CMD_MESSAGE_FORMAT
    CMD_FACTORY_STREAMING = _mscl.MipTypes_CMD_FACTORY_STREAMING
    CMD_CONTINUOUS_DATA_STREAM = _mscl.MipTypes_CMD_CONTINUOUS_DATA_STREAM
    CMD_RAW_RTCM_2_3_MESSAGE = _mscl.MipTypes_CMD_RAW_RTCM_2_3_MESSAGE
    CMD_GNSS_CONSTELLATION_SETTINGS = _mscl.MipTypes_CMD_GNSS_CONSTELLATION_SETTINGS
    CMD_GNSS_SBAS_SETTINGS = _mscl.MipTypes_CMD_GNSS_SBAS_SETTINGS
    CMD_GNSS_ASSIST_FIX_CONTROL = _mscl.MipTypes_CMD_GNSS_ASSIST_FIX_CONTROL
    CMD_GNSS_ASSIST_TIME_UPDATE = _mscl.MipTypes_CMD_GNSS_ASSIST_TIME_UPDATE
    CMD_PPS_SOURCE = _mscl.MipTypes_CMD_PPS_SOURCE
    CMD_EVENT_SUPPORT = _mscl.MipTypes_CMD_EVENT_SUPPORT
    CMD_EVENT_CONTROL = _mscl.MipTypes_CMD_EVENT_CONTROL
    CMD_EVENT_TRIGGER_STATUS = _mscl.MipTypes_CMD_EVENT_TRIGGER_STATUS
    CMD_EVENT_ACTION_STATUS = _mscl.MipTypes_CMD_EVENT_ACTION_STATUS
    CMD_EVENT_TRIGGER_CONFIGURATION = _mscl.MipTypes_CMD_EVENT_TRIGGER_CONFIGURATION
    CMD_EVENT_ACTION_CONFIGURATION = _mscl.MipTypes_CMD_EVENT_ACTION_CONFIGURATION
    CMD_SAVE_STARTUP_SETTINGS = _mscl.MipTypes_CMD_SAVE_STARTUP_SETTINGS
    CMD_EF_SENS_VEHIC_FRAME_TRANSFORM_EULER = _mscl.MipTypes_CMD_EF_SENS_VEHIC_FRAME_TRANSFORM_EULER
    CMD_EF_SENS_VEHIC_FRAME_TRANSFORM_QUAT = _mscl.MipTypes_CMD_EF_SENS_VEHIC_FRAME_TRANSFORM_QUAT
    CMD_EF_SENS_VEHIC_FRAME_TRANSFORM_DCM = _mscl.MipTypes_CMD_EF_SENS_VEHIC_FRAME_TRANSFORM_DCM
    CMD_GPS_DYNAMICS_MODE = _mscl.MipTypes_CMD_GPS_DYNAMICS_MODE
    CMD_SENSOR_SIG_COND_SETTINGS = _mscl.MipTypes_CMD_SENSOR_SIG_COND_SETTINGS
    CMD_SENSOR_TIMESTAMP = _mscl.MipTypes_CMD_SENSOR_TIMESTAMP
    CMD_ACCEL_BIAS = _mscl.MipTypes_CMD_ACCEL_BIAS
    CMD_GYRO_BIAS = _mscl.MipTypes_CMD_GYRO_BIAS
    CMD_CAP_GYRO_BIAS = _mscl.MipTypes_CMD_CAP_GYRO_BIAS
    CMD_MAG_HARD_IRON_OFFSET = _mscl.MipTypes_CMD_MAG_HARD_IRON_OFFSET
    CMD_MAG_SOFT_IRON_MATRIX = _mscl.MipTypes_CMD_MAG_SOFT_IRON_MATRIX
    CMD_CF_REALIGN_UP = _mscl.MipTypes_CMD_CF_REALIGN_UP
    CMD_CF_REALIGN_NORTH = _mscl.MipTypes_CMD_CF_REALIGN_NORTH
    CMD_CONING_SCULLING = _mscl.MipTypes_CMD_CONING_SCULLING
    CMD_UART_BAUD_RATE = _mscl.MipTypes_CMD_UART_BAUD_RATE
    CMD_GPIO_CONFIGURATION = _mscl.MipTypes_CMD_GPIO_CONFIGURATION
    CMD_GPIO_STATE = _mscl.MipTypes_CMD_GPIO_STATE
    CMD_ODOMETER_SETTINGS = _mscl.MipTypes_CMD_ODOMETER_SETTINGS
    CMD_LOWPASS_FILTER_SETTINGS = _mscl.MipTypes_CMD_LOWPASS_FILTER_SETTINGS
    CMD_COMPLEMENTARY_FILTER_SETTINGS = _mscl.MipTypes_CMD_COMPLEMENTARY_FILTER_SETTINGS
    CMD_SENSOR_RANGE = _mscl.MipTypes_CMD_SENSOR_RANGE
    CMD_SUPPORTED_SENSOR_RANGES = _mscl.MipTypes_CMD_SUPPORTED_SENSOR_RANGES
    CMD_LOWPASS_ANTIALIASING_FILTER = _mscl.MipTypes_CMD_LOWPASS_ANTIALIASING_FILTER
    CMD_DATA_STREAM_FORMAT = _mscl.MipTypes_CMD_DATA_STREAM_FORMAT
    CMD_POWER_STATES = _mscl.MipTypes_CMD_POWER_STATES
    CMD_GPS_STARTUP_SETTINGS = _mscl.MipTypes_CMD_GPS_STARTUP_SETTINGS
    CMD_DEVICE_STATUS = _mscl.MipTypes_CMD_DEVICE_STATUS
    CMD_EF_RESET_FILTER = _mscl.MipTypes_CMD_EF_RESET_FILTER
    CMD_EF_INIT_ATTITUDE = _mscl.MipTypes_CMD_EF_INIT_ATTITUDE
    CMD_EF_INIT_HEADING = _mscl.MipTypes_CMD_EF_INIT_HEADING
    CMD_EF_INIT_ATTITUDE_FROM_AHRS = _mscl.MipTypes_CMD_EF_INIT_ATTITUDE_FROM_AHRS
    CMD_EF_RUN_FILTER = _mscl.MipTypes_CMD_EF_RUN_FILTER
    CMD_EF_VEHIC_DYNAMICS_MODE = _mscl.MipTypes_CMD_EF_VEHIC_DYNAMICS_MODE
    CMD_EF_SENS_VEHIC_FRAME_ROTATION_EULER = _mscl.MipTypes_CMD_EF_SENS_VEHIC_FRAME_ROTATION_EULER
    CMD_EF_SENS_VEHIC_FRAME_OFFSET = _mscl.MipTypes_CMD_EF_SENS_VEHIC_FRAME_OFFSET
    CMD_EF_ANTENNA_OFFSET = _mscl.MipTypes_CMD_EF_ANTENNA_OFFSET
    CMD_EF_BIAS_EST_CTRL = _mscl.MipTypes_CMD_EF_BIAS_EST_CTRL
    CMD_EF_GNSS_SRC_CTRL = _mscl.MipTypes_CMD_EF_GNSS_SRC_CTRL
    CMD_EF_EXTERN_GNSS_UPDATE = _mscl.MipTypes_CMD_EF_EXTERN_GNSS_UPDATE
    CMD_EF_EXTERN_HEADING_UPDATE = _mscl.MipTypes_CMD_EF_EXTERN_HEADING_UPDATE
    CMD_EF_HEADING_UPDATE_CTRL = _mscl.MipTypes_CMD_EF_HEADING_UPDATE_CTRL
    CMD_EF_AUTO_INIT_CTRL = _mscl.MipTypes_CMD_EF_AUTO_INIT_CTRL
    CMD_EF_ACCEL_WHT_NSE_STD_DEV = _mscl.MipTypes_CMD_EF_ACCEL_WHT_NSE_STD_DEV
    CMD_EF_GYRO_WHT_NSE_STD_DEV = _mscl.MipTypes_CMD_EF_GYRO_WHT_NSE_STD_DEV
    CMD_EF_ACCEL_BIAS_MODEL_PARAMS = _mscl.MipTypes_CMD_EF_ACCEL_BIAS_MODEL_PARAMS
    CMD_EF_GYRO_BIAS_MODEL_PARAMS = _mscl.MipTypes_CMD_EF_GYRO_BIAS_MODEL_PARAMS
    CMD_EF_ZERO_VEL_UPDATE_CTRL = _mscl.MipTypes_CMD_EF_ZERO_VEL_UPDATE_CTRL
    CMD_EF_EXT_HEADING_UPDATE_TS = _mscl.MipTypes_CMD_EF_EXT_HEADING_UPDATE_TS
    CMD_EF_ZERO_ANG_RATE_UPDATE_CTRL = _mscl.MipTypes_CMD_EF_ZERO_ANG_RATE_UPDATE_CTRL
    CMD_EF_TARE_ORIENT = _mscl.MipTypes_CMD_EF_TARE_ORIENT
    CMD_EF_CMDED_ZERO_VEL_UPDATE = _mscl.MipTypes_CMD_EF_CMDED_ZERO_VEL_UPDATE
    CMD_EF_CMDED_ZERO_ANG_RATE_UPDATE = _mscl.MipTypes_CMD_EF_CMDED_ZERO_ANG_RATE_UPDATE
    CMD_EF_SET_REF_POSITION = _mscl.MipTypes_CMD_EF_SET_REF_POSITION
    CMD_EF_MAG_CAPTURE_AUTO_CAL = _mscl.MipTypes_CMD_EF_MAG_CAPTURE_AUTO_CAL
    CMD_EF_GRAVITY_NOISE_STD_DEV = _mscl.MipTypes_CMD_EF_GRAVITY_NOISE_STD_DEV
    CMD_EF_PRESS_ALT_NOISE_STD_DEV = _mscl.MipTypes_CMD_EF_PRESS_ALT_NOISE_STD_DEV
    CMD_EF_GRAVITY_NOISE_MINIMUM = _mscl.MipTypes_CMD_EF_GRAVITY_NOISE_MINIMUM
    CMD_EF_HARD_IRON_OFFSET_PROCESS_NOISE = _mscl.MipTypes_CMD_EF_HARD_IRON_OFFSET_PROCESS_NOISE
    CMD_EF_SOFT_IRON_OFFSET_PROCESS_NOISE = _mscl.MipTypes_CMD_EF_SOFT_IRON_OFFSET_PROCESS_NOISE
    CMD_EF_ENABLE_DISABLE_MEASUREMENTS = _mscl.MipTypes_CMD_EF_ENABLE_DISABLE_MEASUREMENTS
    CMD_EF_MAG_NOISE_STD_DEV = _mscl.MipTypes_CMD_EF_MAG_NOISE_STD_DEV
    CMD_EF_DECLINATION_SRC = _mscl.MipTypes_CMD_EF_DECLINATION_SRC
    CMD_EF_GRAV_MAGNITUDE_ERR_ADAPT_MEASURE = _mscl.MipTypes_CMD_EF_GRAV_MAGNITUDE_ERR_ADAPT_MEASURE
    CMD_EF_MAG_MAGNITUDE_ERR_ADAPT_MEASURE = _mscl.MipTypes_CMD_EF_MAG_MAGNITUDE_ERR_ADAPT_MEASURE
    CMD_EF_MAG_DIP_ANGLE_ERR_ADAPT_MEASURE = _mscl.MipTypes_CMD_EF_MAG_DIP_ANGLE_ERR_ADAPT_MEASURE
    CMD_EF_ALTITUDE_AID_CTRL = _mscl.MipTypes_CMD_EF_ALTITUDE_AID_CTRL
    CMD_EF_PITCH_ROLL_AID_CTRL = _mscl.MipTypes_CMD_EF_PITCH_ROLL_AID_CTRL
    CMD_EF_INCLINATION_SRC = _mscl.MipTypes_CMD_EF_INCLINATION_SRC
    CMD_EF_FIELD_MAGNITUDE_SRC = _mscl.MipTypes_CMD_EF_FIELD_MAGNITUDE_SRC
    CMD_EF_SENS_VEHIC_FRAME_ROTATION_DCM = _mscl.MipTypes_CMD_EF_SENS_VEHIC_FRAME_ROTATION_DCM
    CMD_EF_SENS_VEHIC_FRAME_ROTATION_QUAT = _mscl.MipTypes_CMD_EF_SENS_VEHIC_FRAME_ROTATION_QUAT
    CMD_EF_AIDING_MEASUREMENT_ENABLE = _mscl.MipTypes_CMD_EF_AIDING_MEASUREMENT_ENABLE
    CMD_EF_INITIALIZATION_CONFIG = _mscl.MipTypes_CMD_EF_INITIALIZATION_CONFIG
    CMD_EF_ADAPTIVE_FILTER_OPTIONS = _mscl.MipTypes_CMD_EF_ADAPTIVE_FILTER_OPTIONS
    CMD_EF_MULTI_ANTENNA_OFFSET = _mscl.MipTypes_CMD_EF_MULTI_ANTENNA_OFFSET
    CMD_EF_RELATIVE_POSITION_REF = _mscl.MipTypes_CMD_EF_RELATIVE_POSITION_REF
    CMD_EF_LEVER_ARM_OFFSET_REF = _mscl.MipTypes_CMD_EF_LEVER_ARM_OFFSET_REF
    CMD_EF_EXTERN_SPEED_UPDATE = _mscl.MipTypes_CMD_EF_EXTERN_SPEED_UPDATE
    CMD_EF_SPEED_MEASUREMENT_OFFSET = _mscl.MipTypes_CMD_EF_SPEED_MEASUREMENT_OFFSET
    CMD_EF_VERTICAL_GYRO_CONSTRAINT = _mscl.MipTypes_CMD_EF_VERTICAL_GYRO_CONSTRAINT
    CMD_EF_WHEELED_VEHICLE_CONSTRAINT = _mscl.MipTypes_CMD_EF_WHEELED_VEHICLE_CONSTRAINT
    CMD_EF_GNSS_ANTENNA_LEVER_ARM_CAL = _mscl.MipTypes_CMD_EF_GNSS_ANTENNA_LEVER_ARM_CAL
    CMD_GNSS_RECEIVER_INFO = _mscl.MipTypes_CMD_GNSS_RECEIVER_INFO
    CMD_GNSS_SIGNAL_CONFIG = _mscl.MipTypes_CMD_GNSS_SIGNAL_CONFIG
    CMD_GNSS_RTK_CONFIG = _mscl.MipTypes_CMD_GNSS_RTK_CONFIG
    CMD_COMMUNICATION_MODE = _mscl.MipTypes_CMD_COMMUNICATION_MODE
    CMD_HARDWARE_CTRL = _mscl.MipTypes_CMD_HARDWARE_CTRL
    CMD_GET_ANALOG_DISPLACEMENT_CALS = _mscl.MipTypes_CMD_GET_ANALOG_DISPLACEMENT_CALS
    CMD_DISPLACEMENT_OUTPUT_RATE = _mscl.MipTypes_CMD_DISPLACEMENT_OUTPUT_RATE
    CMD_DISPLACEMENT_DEVICE_TIME = _mscl.MipTypes_CMD_DISPLACEMENT_DEVICE_TIME
    CMD_RTK_DEVICE_STATUS_FLAGS = _mscl.MipTypes_CMD_RTK_DEVICE_STATUS_FLAGS
    CMD_RTK_ACTIVATION_CODE = _mscl.MipTypes_CMD_RTK_ACTIVATION_CODE
    CH_FIELD_SENSOR_RAW_ACCEL_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_RAW_ACCEL_VEC
    CH_FIELD_SENSOR_RAW_GYRO_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_RAW_GYRO_VEC
    CH_FIELD_SENSOR_RAW_MAG_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_RAW_MAG_VEC
    CH_FIELD_SENSOR_SCALED_ACCEL_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_SCALED_ACCEL_VEC
    CH_FIELD_SENSOR_SCALED_GYRO_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_SCALED_GYRO_VEC
    CH_FIELD_SENSOR_SCALED_MAG_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_SCALED_MAG_VEC
    CH_FIELD_SENSOR_DELTA_THETA_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_DELTA_THETA_VEC
    CH_FIELD_SENSOR_DELTA_VELOCITY_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_DELTA_VELOCITY_VEC
    CH_FIELD_SENSOR_ORIENTATION_MATRIX = _mscl.MipTypes_CH_FIELD_SENSOR_ORIENTATION_MATRIX
    CH_FIELD_SENSOR_ORIENTATION_QUATERNION = _mscl.MipTypes_CH_FIELD_SENSOR_ORIENTATION_QUATERNION
    CH_FIELD_SENSOR_ORIENTATION_UPDATE_MATRIX = _mscl.MipTypes_CH_FIELD_SENSOR_ORIENTATION_UPDATE_MATRIX
    CH_FIELD_SENSOR_EULER_ANGLES = _mscl.MipTypes_CH_FIELD_SENSOR_EULER_ANGLES
    CH_FIELD_SENSOR_INTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SENSOR_INTERNAL_TIMESTAMP
    CH_FIELD_SENSOR_BEACONED_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SENSOR_BEACONED_TIMESTAMP
    CH_FIELD_SENSOR_STABILIZED_MAG_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_STABILIZED_MAG_VEC
    CH_FIELD_SENSOR_STABILIZED_ACCEL_VEC = _mscl.MipTypes_CH_FIELD_SENSOR_STABILIZED_ACCEL_VEC
    CH_FIELD_SENSOR_GPS_CORRELATION_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SENSOR_GPS_CORRELATION_TIMESTAMP
    CH_FIELD_SENSOR_TEMPERATURE_STATISTICS = _mscl.MipTypes_CH_FIELD_SENSOR_TEMPERATURE_STATISTICS
    CH_FIELD_SENSOR_RAW_AMBIENT_PRESSURE = _mscl.MipTypes_CH_FIELD_SENSOR_RAW_AMBIENT_PRESSURE
    CH_FIELD_SENSOR_SCALED_AMBIENT_PRESSURE = _mscl.MipTypes_CH_FIELD_SENSOR_SCALED_AMBIENT_PRESSURE
    CH_FIELD_SENSOR_OVERRANGE_STATUS = _mscl.MipTypes_CH_FIELD_SENSOR_OVERRANGE_STATUS
    CH_FIELD_SENSOR_ODOMETER_DATA = _mscl.MipTypes_CH_FIELD_SENSOR_ODOMETER_DATA
    CH_FIELD_SENSOR_SHARED_EVENT_SOURCE = _mscl.MipTypes_CH_FIELD_SENSOR_SHARED_EVENT_SOURCE
    CH_FIELD_SENSOR_SHARED_TICKS = _mscl.MipTypes_CH_FIELD_SENSOR_SHARED_TICKS
    CH_FIELD_SENSOR_SHARED_DELTA_TICKS = _mscl.MipTypes_CH_FIELD_SENSOR_SHARED_DELTA_TICKS
    CH_FIELD_SENSOR_SHARED_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SENSOR_SHARED_GPS_TIMESTAMP
    CH_FIELD_SENSOR_SHARED_DELTA_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SENSOR_SHARED_DELTA_TIMESTAMP
    CH_FIELD_SENSOR_SHARED_REFERENCE_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SENSOR_SHARED_REFERENCE_TIMESTAMP
    CH_FIELD_SENSOR_SHARED_DELTA_REFERENCE_TIME = _mscl.MipTypes_CH_FIELD_SENSOR_SHARED_DELTA_REFERENCE_TIME
    CH_FIELD_SENSOR_SHARED_EXTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SENSOR_SHARED_EXTERNAL_TIMESTAMP
    CH_FIELD_SENSOR_SHARED_DELTA_EXTERNAL_TIME = _mscl.MipTypes_CH_FIELD_SENSOR_SHARED_DELTA_EXTERNAL_TIME
    CH_FIELD_GNSS_LLH_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_LLH_POSITION
    CH_FIELD_GNSS_ECEF_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_ECEF_POSITION
    CH_FIELD_GNSS_NED_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_NED_VELOCITY
    CH_FIELD_GNSS_ECEF_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_ECEF_VELOCITY
    CH_FIELD_GNSS_DOP = _mscl.MipTypes_CH_FIELD_GNSS_DOP
    CH_FIELD_GNSS_UTC_TIME = _mscl.MipTypes_CH_FIELD_GNSS_UTC_TIME
    CH_FIELD_GNSS_GPS_TIME = _mscl.MipTypes_CH_FIELD_GNSS_GPS_TIME
    CH_FIELD_GNSS_CLOCK_INFO = _mscl.MipTypes_CH_FIELD_GNSS_CLOCK_INFO
    CH_FIELD_GNSS_FIX_INFO = _mscl.MipTypes_CH_FIELD_GNSS_FIX_INFO
    CH_FIELD_GNSS_SPACE_VEHICLE_INFO = _mscl.MipTypes_CH_FIELD_GNSS_SPACE_VEHICLE_INFO
    CH_FIELD_GNSS_HARDWARE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_HARDWARE_STATUS
    CH_FIELD_GNSS_DGNSS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_DGNSS_INFO
    CH_FIELD_GNSS_DGNSS_CHANNEL_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_DGNSS_CHANNEL_STATUS
    CH_FIELD_GNSS_CLOCK_INFO_2 = _mscl.MipTypes_CH_FIELD_GNSS_CLOCK_INFO_2
    CH_FIELD_GNSS_GPS_LEAP_SECONDS = _mscl.MipTypes_CH_FIELD_GNSS_GPS_LEAP_SECONDS
    CH_FIELD_GNSS_SBAS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_SBAS_INFO
    CH_FIELD_GNSS_SBAS_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_SBAS_CORRECTION
    CH_FIELD_GNSS_RF_ERROR_DETECTION = _mscl.MipTypes_CH_FIELD_GNSS_RF_ERROR_DETECTION
    CH_FIELD_GNSS_SATELLITE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_SATELLITE_STATUS
    CH_FIELD_GNSS_RAW_OBSERVATION = _mscl.MipTypes_CH_FIELD_GNSS_RAW_OBSERVATION
    CH_FIELD_GNSS_STATION_INFO = _mscl.MipTypes_CH_FIELD_GNSS_STATION_INFO
    CH_FIELD_GNSS_RTK_CORRECTIONS_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_RTK_CORRECTIONS_STATUS
    CH_FIELD_GNSS_GPS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_GPS_EPHEMERIS
    CH_FIELD_GNSS_GLONASS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_GLONASS_EPHEMERIS
    CH_FIELD_GNSS_GALILEO_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_GALILEO_EPHEMERIS
    CH_FIELD_GNSS_GPS_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_GPS_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_GALILEO_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_GALILEO_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_SHARED_EVENT_SOURCE = _mscl.MipTypes_CH_FIELD_GNSS_SHARED_EVENT_SOURCE
    CH_FIELD_GNSS_SHARED_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_SHARED_TICKS
    CH_FIELD_GNSS_SHARED_DELTA_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_SHARED_DELTA_TICKS
    CH_FIELD_GNSS_SHARED_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_SHARED_GPS_TIMESTAMP
    CH_FIELD_GNSS_SHARED_DELTA_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_SHARED_DELTA_TIMESTAMP
    CH_FIELD_GNSS_SHARED_REFERENCE_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_SHARED_REFERENCE_TIMESTAMP
    CH_FIELD_GNSS_SHARED_DELTA_REFERENCE_TIME = _mscl.MipTypes_CH_FIELD_GNSS_SHARED_DELTA_REFERENCE_TIME
    CH_FIELD_GNSS_SHARED_EXTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_SHARED_EXTERNAL_TIMESTAMP
    CH_FIELD_GNSS_SHARED_DELTA_EXTERNAL_TIME = _mscl.MipTypes_CH_FIELD_GNSS_SHARED_DELTA_EXTERNAL_TIME
    CH_FIELD_ESTFILTER_ESTIMATED_LLH_POS = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_LLH_POS
    CH_FIELD_ESTFILTER_ESTIMATED_NED_VELOCITY = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_NED_VELOCITY
    CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_QUATERNION = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_QUATERNION
    CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_MATRIX = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_MATRIX
    CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_EULER = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_ORIENT_EULER
    CH_FIELD_ESTFILTER_ESTIMATED_GYRO_BIAS = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_GYRO_BIAS
    CH_FIELD_ESTFILTER_ESTIMATED_ACCEL_BIAS = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_ACCEL_BIAS
    CH_FIELD_ESTFILTER_ESTIMATED_LLH_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_LLH_UNCERT
    CH_FIELD_ESTFILTER_ESTIMATED_NED_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_NED_UNCERT
    CH_FIELD_ESTFILTER_ESTIMATED_ATT_UNCERT_EULER = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_ATT_UNCERT_EULER
    CH_FIELD_ESTFILTER_ESTIMATED_GYRO_BIAS_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_GYRO_BIAS_UNCERT
    CH_FIELD_ESTFILTER_ESTIMATED_ACCEL_BIAS_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_ACCEL_BIAS_UNCERT
    CH_FIELD_ESTFILTER_ESTIMATED_LINEAR_ACCEL = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_LINEAR_ACCEL
    CH_FIELD_ESTFILTER_ESTIMATED_ANGULAR_RATE = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_ANGULAR_RATE
    CH_FIELD_ESTFILTER_WGS84_LOC_GRAV_MAGNITUDE = _mscl.MipTypes_CH_FIELD_ESTFILTER_WGS84_LOC_GRAV_MAGNITUDE
    CH_FIELD_ESTFILTER_FILTER_STATUS = _mscl.MipTypes_CH_FIELD_ESTFILTER_FILTER_STATUS
    CH_FIELD_ESTFILTER_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_ESTFILTER_GPS_TIMESTAMP
    CH_FIELD_ESTFILTER_ESTIMATED_ATT_UNCERT_QUAT = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_ATT_UNCERT_QUAT
    CH_FIELD_ESTFILTER_ESTIMATED_GRAVITY_VECTOR = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_GRAVITY_VECTOR
    CH_FIELD_ESTFILTER_HEADING_UPDATE_SOURCE = _mscl.MipTypes_CH_FIELD_ESTFILTER_HEADING_UPDATE_SOURCE
    CH_FIELD_ESTFILTER_MAGNETIC_MODEL_SLN = _mscl.MipTypes_CH_FIELD_ESTFILTER_MAGNETIC_MODEL_SLN
    CH_FIELD_ESTFILTER_ESTIMATED_GYRO_SCALE_FACTOR = _mscl.MipTypes_CH_FIELD_ESTFILTER_ESTIMATED_GYRO_SCALE_FACTOR
    CH_FIELD_ESTFILTER_ACCEL_SCALE_FACTOR = _mscl.MipTypes_CH_FIELD_ESTFILTER_ACCEL_SCALE_FACTOR
    CH_FIELD_ESTFILTER_GYRO_SCALE_FACTOR_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_GYRO_SCALE_FACTOR_UNCERT
    CH_FIELD_ESTFILTER_ACCEL_SCALE_FACTOR_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_ACCEL_SCALE_FACTOR_UNCERT
    CH_FIELD_ESTFILTER_MAG_BIAS = _mscl.MipTypes_CH_FIELD_ESTFILTER_MAG_BIAS
    CH_FIELD_ESTFILTER_MAG_BIAS_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_MAG_BIAS_UNCERT
    CH_FIELD_ESTFILTER_COMPENSATED_ACCEL = _mscl.MipTypes_CH_FIELD_ESTFILTER_COMPENSATED_ACCEL
    CH_FIELD_ESTFILTER_STD_ATMOSPHERE_MODEL = _mscl.MipTypes_CH_FIELD_ESTFILTER_STD_ATMOSPHERE_MODEL
    CH_FIELD_ESTFILTER_PRESSURE_ALTITUDE = _mscl.MipTypes_CH_FIELD_ESTFILTER_PRESSURE_ALTITUDE
    CH_FIELD_ESTFILTER_MAG_AUTO_HARD_IRON_OFFSET = _mscl.MipTypes_CH_FIELD_ESTFILTER_MAG_AUTO_HARD_IRON_OFFSET
    CH_FIELD_ESTFILTER_MAG_AUTO_SOFT_IRON_MATRIX = _mscl.MipTypes_CH_FIELD_ESTFILTER_MAG_AUTO_SOFT_IRON_MATRIX
    CH_FIELD_ESTFILTER_MAG_AUTO_HARD_IRON_OFFSET_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_MAG_AUTO_HARD_IRON_OFFSET_UNCERT
    CH_FIELD_ESTFILTER_MAG_AUTO_SOFT_IRON_MATRIX_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_MAG_AUTO_SOFT_IRON_MATRIX_UNCERT
    CH_FIELD_ESTFILTER_MAG_COVARIANCE_MATRIX = _mscl.MipTypes_CH_FIELD_ESTFILTER_MAG_COVARIANCE_MATRIX
    CH_FIELD_ESTFILTER_MAG_RESIDUAL_VECTOR = _mscl.MipTypes_CH_FIELD_ESTFILTER_MAG_RESIDUAL_VECTOR
    CH_FIELD_ESTFILTER_GNSS_ANTENNA_CORRECTION = _mscl.MipTypes_CH_FIELD_ESTFILTER_GNSS_ANTENNA_CORRECTION
    CH_FIELD_ESTFILTER_GNSS_ANTENNA_CORRECTION_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_GNSS_ANTENNA_CORRECTION_UNCERT
    CH_FIELD_ESTFILTER_GNSS_CLOCK_CORRECTION = _mscl.MipTypes_CH_FIELD_ESTFILTER_GNSS_CLOCK_CORRECTION
    CH_FIELD_ESTFILTER_GNSS_CLOCK_CORRECTION_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_GNSS_CLOCK_CORRECTION_UNCERT
    CH_FIELD_ESTFILTER_GNSS_MULTI_ANTENNA_CORRECTION = _mscl.MipTypes_CH_FIELD_ESTFILTER_GNSS_MULTI_ANTENNA_CORRECTION
    CH_FIELD_ESTFILTER_GNSS_MULTI_ANTENNA_CORRECTION_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_GNSS_MULTI_ANTENNA_CORRECTION_UNCERT
    CH_FIELD_ESTFILTER_ECEF_POS_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_ECEF_POS_UNCERT
    CH_FIELD_ESTFILTER_ECEF_VEL_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_ECEF_VEL_UNCERT
    CH_FIELD_ESTFILTER_ECEF_POS = _mscl.MipTypes_CH_FIELD_ESTFILTER_ECEF_POS
    CH_FIELD_ESTFILTER_ECEF_VEL = _mscl.MipTypes_CH_FIELD_ESTFILTER_ECEF_VEL
    CH_FIELD_ESTFILTER_NED_RELATIVE_POS = _mscl.MipTypes_CH_FIELD_ESTFILTER_NED_RELATIVE_POS
    CH_FIELD_ESTFILTER_POSITION_AIDING_STATUS = _mscl.MipTypes_CH_FIELD_ESTFILTER_POSITION_AIDING_STATUS
    CH_FIELD_ESTFILTER_ATTITUDE_AIDING_STATUS = _mscl.MipTypes_CH_FIELD_ESTFILTER_ATTITUDE_AIDING_STATUS
    CH_FIELD_ESTFILTER_AIDING_MEASURE_SUMMARY = _mscl.MipTypes_CH_FIELD_ESTFILTER_AIDING_MEASURE_SUMMARY
    CH_FIELD_ESTFILTER_ODOMETER_SCALE_FACTOR_ERROR = _mscl.MipTypes_CH_FIELD_ESTFILTER_ODOMETER_SCALE_FACTOR_ERROR
    CH_FIELD_ESTFILTER_ODOMETER_SCALE_FACTOR_ERROR_UNCERT = _mscl.MipTypes_CH_FIELD_ESTFILTER_ODOMETER_SCALE_FACTOR_ERROR_UNCERT
    CH_FIELD_ESTFILTER_GNSS_DUAL_ANTENNA_STATUS = _mscl.MipTypes_CH_FIELD_ESTFILTER_GNSS_DUAL_ANTENNA_STATUS
    CH_FIELD_ESTFILTER_SHARED_EVENT_SOURCE = _mscl.MipTypes_CH_FIELD_ESTFILTER_SHARED_EVENT_SOURCE
    CH_FIELD_ESTFILTER_SHARED_TICKS = _mscl.MipTypes_CH_FIELD_ESTFILTER_SHARED_TICKS
    CH_FIELD_ESTFILTER_SHARED_DELTA_TICKS = _mscl.MipTypes_CH_FIELD_ESTFILTER_SHARED_DELTA_TICKS
    CH_FIELD_ESTFILTER_SHARED_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_ESTFILTER_SHARED_GPS_TIMESTAMP
    CH_FIELD_ESTFILTER_SHARED_DELTA_TIMESTAMP = _mscl.MipTypes_CH_FIELD_ESTFILTER_SHARED_DELTA_TIMESTAMP
    CH_FIELD_ESTFILTER_SHARED_REFERENCE_TIMESTAMP = _mscl.MipTypes_CH_FIELD_ESTFILTER_SHARED_REFERENCE_TIMESTAMP
    CH_FIELD_ESTFILTER_SHARED_DELTA_REFERENCE_TIME = _mscl.MipTypes_CH_FIELD_ESTFILTER_SHARED_DELTA_REFERENCE_TIME
    CH_FIELD_ESTFILTER_SHARED_EXTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_ESTFILTER_SHARED_EXTERNAL_TIMESTAMP
    CH_FIELD_ESTFILTER_SHARED_DELTA_EXTERNAL_TIME = _mscl.MipTypes_CH_FIELD_ESTFILTER_SHARED_DELTA_EXTERNAL_TIME
    CH_FIELD_DISP_DISPLACEMENT_RAW = _mscl.MipTypes_CH_FIELD_DISP_DISPLACEMENT_RAW
    CH_FIELD_DISP_DISPLACEMENT_MM = _mscl.MipTypes_CH_FIELD_DISP_DISPLACEMENT_MM
    CH_FIELD_DISP_DISPLACEMENT_TS = _mscl.MipTypes_CH_FIELD_DISP_DISPLACEMENT_TS
    CH_FIELD_GNSS_1_LLH_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_1_LLH_POSITION
    CH_FIELD_GNSS_1_ECEF_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_1_ECEF_POSITION
    CH_FIELD_GNSS_1_NED_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_1_NED_VELOCITY
    CH_FIELD_GNSS_1_ECEF_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_1_ECEF_VELOCITY
    CH_FIELD_GNSS_1_DOP = _mscl.MipTypes_CH_FIELD_GNSS_1_DOP
    CH_FIELD_GNSS_1_UTC_TIME = _mscl.MipTypes_CH_FIELD_GNSS_1_UTC_TIME
    CH_FIELD_GNSS_1_GPS_TIME = _mscl.MipTypes_CH_FIELD_GNSS_1_GPS_TIME
    CH_FIELD_GNSS_1_CLOCK_INFO = _mscl.MipTypes_CH_FIELD_GNSS_1_CLOCK_INFO
    CH_FIELD_GNSS_1_FIX_INFO = _mscl.MipTypes_CH_FIELD_GNSS_1_FIX_INFO
    CH_FIELD_GNSS_1_SPACE_VEHICLE_INFO = _mscl.MipTypes_CH_FIELD_GNSS_1_SPACE_VEHICLE_INFO
    CH_FIELD_GNSS_1_HARDWARE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_1_HARDWARE_STATUS
    CH_FIELD_GNSS_1_DGNSS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_1_DGNSS_INFO
    CH_FIELD_GNSS_1_DGNSS_CHANNEL_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_1_DGNSS_CHANNEL_STATUS
    CH_FIELD_GNSS_1_CLOCK_INFO_2 = _mscl.MipTypes_CH_FIELD_GNSS_1_CLOCK_INFO_2
    CH_FIELD_GNSS_1_GPS_LEAP_SECONDS = _mscl.MipTypes_CH_FIELD_GNSS_1_GPS_LEAP_SECONDS
    CH_FIELD_GNSS_1_SBAS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_1_SBAS_INFO
    CH_FIELD_GNSS_1_SBAS_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_1_SBAS_CORRECTION
    CH_FIELD_GNSS_1_RF_ERROR_DETECTION = _mscl.MipTypes_CH_FIELD_GNSS_1_RF_ERROR_DETECTION
    CH_FIELD_GNSS_1_SATELLITE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_1_SATELLITE_STATUS
    CH_FIELD_GNSS_1_RAW_OBSERVATION = _mscl.MipTypes_CH_FIELD_GNSS_1_RAW_OBSERVATION
    CH_FIELD_GNSS_1_STATION_INFO = _mscl.MipTypes_CH_FIELD_GNSS_1_STATION_INFO
    CH_FIELD_GNSS_1_RTK_CORRECTIONS_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_1_RTK_CORRECTIONS_STATUS
    CH_FIELD_GNSS_1_GPS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_1_GPS_EPHEMERIS
    CH_FIELD_GNSS_1_GLONASS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_1_GLONASS_EPHEMERIS
    CH_FIELD_GNSS_1_GALILEO_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_1_GALILEO_EPHEMERIS
    CH_FIELD_GNSS_1_GPS_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_1_GPS_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_1_GALILEO_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_1_GALILEO_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_1_SHARED_EVENT_SOURCE = _mscl.MipTypes_CH_FIELD_GNSS_1_SHARED_EVENT_SOURCE
    CH_FIELD_GNSS_1_SHARED_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_1_SHARED_TICKS
    CH_FIELD_GNSS_1_SHARED_DELTA_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_1_SHARED_DELTA_TICKS
    CH_FIELD_GNSS_1_SHARED_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_1_SHARED_GPS_TIMESTAMP
    CH_FIELD_GNSS_1_SHARED_DELTA_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_1_SHARED_DELTA_TIMESTAMP
    CH_FIELD_GNSS_1_SHARED_REFERENCE_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_1_SHARED_REFERENCE_TIMESTAMP
    CH_FIELD_GNSS_1_SHARED_DELTA_REFERENCE_TIME = _mscl.MipTypes_CH_FIELD_GNSS_1_SHARED_DELTA_REFERENCE_TIME
    CH_FIELD_GNSS_1_SHARED_EXTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_1_SHARED_EXTERNAL_TIMESTAMP
    CH_FIELD_GNSS_1_SHARED_DELTA_EXTERNAL_TIME = _mscl.MipTypes_CH_FIELD_GNSS_1_SHARED_DELTA_EXTERNAL_TIME
    CH_FIELD_GNSS_2_LLH_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_2_LLH_POSITION
    CH_FIELD_GNSS_2_ECEF_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_2_ECEF_POSITION
    CH_FIELD_GNSS_2_NED_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_2_NED_VELOCITY
    CH_FIELD_GNSS_2_ECEF_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_2_ECEF_VELOCITY
    CH_FIELD_GNSS_2_DOP = _mscl.MipTypes_CH_FIELD_GNSS_2_DOP
    CH_FIELD_GNSS_2_UTC_TIME = _mscl.MipTypes_CH_FIELD_GNSS_2_UTC_TIME
    CH_FIELD_GNSS_2_GPS_TIME = _mscl.MipTypes_CH_FIELD_GNSS_2_GPS_TIME
    CH_FIELD_GNSS_2_CLOCK_INFO = _mscl.MipTypes_CH_FIELD_GNSS_2_CLOCK_INFO
    CH_FIELD_GNSS_2_FIX_INFO = _mscl.MipTypes_CH_FIELD_GNSS_2_FIX_INFO
    CH_FIELD_GNSS_2_SPACE_VEHICLE_INFO = _mscl.MipTypes_CH_FIELD_GNSS_2_SPACE_VEHICLE_INFO
    CH_FIELD_GNSS_2_HARDWARE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_2_HARDWARE_STATUS
    CH_FIELD_GNSS_2_DGNSS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_2_DGNSS_INFO
    CH_FIELD_GNSS_2_DGNSS_CHANNEL_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_2_DGNSS_CHANNEL_STATUS
    CH_FIELD_GNSS_2_CLOCK_INFO_2 = _mscl.MipTypes_CH_FIELD_GNSS_2_CLOCK_INFO_2
    CH_FIELD_GNSS_2_GPS_LEAP_SECONDS = _mscl.MipTypes_CH_FIELD_GNSS_2_GPS_LEAP_SECONDS
    CH_FIELD_GNSS_2_SBAS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_2_SBAS_INFO
    CH_FIELD_GNSS_2_SBAS_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_2_SBAS_CORRECTION
    CH_FIELD_GNSS_2_RF_ERROR_DETECTION = _mscl.MipTypes_CH_FIELD_GNSS_2_RF_ERROR_DETECTION
    CH_FIELD_GNSS_2_SATELLITE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_2_SATELLITE_STATUS
    CH_FIELD_GNSS_2_RAW_OBSERVATION = _mscl.MipTypes_CH_FIELD_GNSS_2_RAW_OBSERVATION
    CH_FIELD_GNSS_2_STATION_INFO = _mscl.MipTypes_CH_FIELD_GNSS_2_STATION_INFO
    CH_FIELD_GNSS_2_RTK_CORRECTIONS_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_2_RTK_CORRECTIONS_STATUS
    CH_FIELD_GNSS_2_GPS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_2_GPS_EPHEMERIS
    CH_FIELD_GNSS_2_GLONASS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_2_GLONASS_EPHEMERIS
    CH_FIELD_GNSS_2_GALILEO_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_2_GALILEO_EPHEMERIS
    CH_FIELD_GNSS_2_GPS_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_2_GPS_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_2_GALILEO_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_2_GALILEO_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_2_SHARED_EVENT_SOURCE = _mscl.MipTypes_CH_FIELD_GNSS_2_SHARED_EVENT_SOURCE
    CH_FIELD_GNSS_2_SHARED_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_2_SHARED_TICKS
    CH_FIELD_GNSS_2_SHARED_DELTA_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_2_SHARED_DELTA_TICKS
    CH_FIELD_GNSS_2_SHARED_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_2_SHARED_GPS_TIMESTAMP
    CH_FIELD_GNSS_2_SHARED_DELTA_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_2_SHARED_DELTA_TIMESTAMP
    CH_FIELD_GNSS_2_SHARED_REFERENCE_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_2_SHARED_REFERENCE_TIMESTAMP
    CH_FIELD_GNSS_2_SHARED_DELTA_REFERENCE_TIME = _mscl.MipTypes_CH_FIELD_GNSS_2_SHARED_DELTA_REFERENCE_TIME
    CH_FIELD_GNSS_2_SHARED_EXTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_2_SHARED_EXTERNAL_TIMESTAMP
    CH_FIELD_GNSS_2_SHARED_DELTA_EXTERNAL_TIME = _mscl.MipTypes_CH_FIELD_GNSS_2_SHARED_DELTA_EXTERNAL_TIME
    CH_FIELD_GNSS_3_LLH_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_3_LLH_POSITION
    CH_FIELD_GNSS_3_ECEF_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_3_ECEF_POSITION
    CH_FIELD_GNSS_3_NED_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_3_NED_VELOCITY
    CH_FIELD_GNSS_3_ECEF_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_3_ECEF_VELOCITY
    CH_FIELD_GNSS_3_DOP = _mscl.MipTypes_CH_FIELD_GNSS_3_DOP
    CH_FIELD_GNSS_3_UTC_TIME = _mscl.MipTypes_CH_FIELD_GNSS_3_UTC_TIME
    CH_FIELD_GNSS_3_GPS_TIME = _mscl.MipTypes_CH_FIELD_GNSS_3_GPS_TIME
    CH_FIELD_GNSS_3_CLOCK_INFO = _mscl.MipTypes_CH_FIELD_GNSS_3_CLOCK_INFO
    CH_FIELD_GNSS_3_FIX_INFO = _mscl.MipTypes_CH_FIELD_GNSS_3_FIX_INFO
    CH_FIELD_GNSS_3_SPACE_VEHICLE_INFO = _mscl.MipTypes_CH_FIELD_GNSS_3_SPACE_VEHICLE_INFO
    CH_FIELD_GNSS_3_HARDWARE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_3_HARDWARE_STATUS
    CH_FIELD_GNSS_3_DGNSS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_3_DGNSS_INFO
    CH_FIELD_GNSS_3_DGNSS_CHANNEL_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_3_DGNSS_CHANNEL_STATUS
    CH_FIELD_GNSS_3_CLOCK_INFO_2 = _mscl.MipTypes_CH_FIELD_GNSS_3_CLOCK_INFO_2
    CH_FIELD_GNSS_3_GPS_LEAP_SECONDS = _mscl.MipTypes_CH_FIELD_GNSS_3_GPS_LEAP_SECONDS
    CH_FIELD_GNSS_3_SBAS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_3_SBAS_INFO
    CH_FIELD_GNSS_3_SBAS_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_3_SBAS_CORRECTION
    CH_FIELD_GNSS_3_RF_ERROR_DETECTION = _mscl.MipTypes_CH_FIELD_GNSS_3_RF_ERROR_DETECTION
    CH_FIELD_GNSS_3_SATELLITE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_3_SATELLITE_STATUS
    CH_FIELD_GNSS_3_RAW_OBSERVATION = _mscl.MipTypes_CH_FIELD_GNSS_3_RAW_OBSERVATION
    CH_FIELD_GNSS_3_STATION_INFO = _mscl.MipTypes_CH_FIELD_GNSS_3_STATION_INFO
    CH_FIELD_GNSS_3_RTK_CORRECTIONS_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_3_RTK_CORRECTIONS_STATUS
    CH_FIELD_GNSS_3_GPS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_3_GPS_EPHEMERIS
    CH_FIELD_GNSS_3_GLONASS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_3_GLONASS_EPHEMERIS
    CH_FIELD_GNSS_3_GALILEO_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_3_GALILEO_EPHEMERIS
    CH_FIELD_GNSS_3_GPS_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_3_GPS_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_3_GALILEO_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_3_GALILEO_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_3_SHARED_EVENT_SOURCE = _mscl.MipTypes_CH_FIELD_GNSS_3_SHARED_EVENT_SOURCE
    CH_FIELD_GNSS_3_SHARED_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_3_SHARED_TICKS
    CH_FIELD_GNSS_3_SHARED_DELTA_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_3_SHARED_DELTA_TICKS
    CH_FIELD_GNSS_3_SHARED_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_3_SHARED_GPS_TIMESTAMP
    CH_FIELD_GNSS_3_SHARED_DELTA_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_3_SHARED_DELTA_TIMESTAMP
    CH_FIELD_GNSS_3_SHARED_REFERENCE_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_3_SHARED_REFERENCE_TIMESTAMP
    CH_FIELD_GNSS_3_SHARED_DELTA_REFERENCE_TIME = _mscl.MipTypes_CH_FIELD_GNSS_3_SHARED_DELTA_REFERENCE_TIME
    CH_FIELD_GNSS_3_SHARED_EXTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_3_SHARED_EXTERNAL_TIMESTAMP
    CH_FIELD_GNSS_3_SHARED_DELTA_EXTERNAL_TIME = _mscl.MipTypes_CH_FIELD_GNSS_3_SHARED_DELTA_EXTERNAL_TIME
    CH_FIELD_GNSS_4_LLH_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_4_LLH_POSITION
    CH_FIELD_GNSS_4_ECEF_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_4_ECEF_POSITION
    CH_FIELD_GNSS_4_NED_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_4_NED_VELOCITY
    CH_FIELD_GNSS_4_ECEF_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_4_ECEF_VELOCITY
    CH_FIELD_GNSS_4_DOP = _mscl.MipTypes_CH_FIELD_GNSS_4_DOP
    CH_FIELD_GNSS_4_UTC_TIME = _mscl.MipTypes_CH_FIELD_GNSS_4_UTC_TIME
    CH_FIELD_GNSS_4_GPS_TIME = _mscl.MipTypes_CH_FIELD_GNSS_4_GPS_TIME
    CH_FIELD_GNSS_4_CLOCK_INFO = _mscl.MipTypes_CH_FIELD_GNSS_4_CLOCK_INFO
    CH_FIELD_GNSS_4_FIX_INFO = _mscl.MipTypes_CH_FIELD_GNSS_4_FIX_INFO
    CH_FIELD_GNSS_4_SPACE_VEHICLE_INFO = _mscl.MipTypes_CH_FIELD_GNSS_4_SPACE_VEHICLE_INFO
    CH_FIELD_GNSS_4_HARDWARE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_4_HARDWARE_STATUS
    CH_FIELD_GNSS_4_DGNSS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_4_DGNSS_INFO
    CH_FIELD_GNSS_4_DGNSS_CHANNEL_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_4_DGNSS_CHANNEL_STATUS
    CH_FIELD_GNSS_4_CLOCK_INFO_2 = _mscl.MipTypes_CH_FIELD_GNSS_4_CLOCK_INFO_2
    CH_FIELD_GNSS_4_GPS_LEAP_SECONDS = _mscl.MipTypes_CH_FIELD_GNSS_4_GPS_LEAP_SECONDS
    CH_FIELD_GNSS_4_SBAS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_4_SBAS_INFO
    CH_FIELD_GNSS_4_SBAS_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_4_SBAS_CORRECTION
    CH_FIELD_GNSS_4_RF_ERROR_DETECTION = _mscl.MipTypes_CH_FIELD_GNSS_4_RF_ERROR_DETECTION
    CH_FIELD_GNSS_4_SATELLITE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_4_SATELLITE_STATUS
    CH_FIELD_GNSS_4_RAW_OBSERVATION = _mscl.MipTypes_CH_FIELD_GNSS_4_RAW_OBSERVATION
    CH_FIELD_GNSS_4_STATION_INFO = _mscl.MipTypes_CH_FIELD_GNSS_4_STATION_INFO
    CH_FIELD_GNSS_4_RTK_CORRECTIONS_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_4_RTK_CORRECTIONS_STATUS
    CH_FIELD_GNSS_4_GPS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_4_GPS_EPHEMERIS
    CH_FIELD_GNSS_4_GLONASS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_4_GLONASS_EPHEMERIS
    CH_FIELD_GNSS_4_GALILEO_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_4_GALILEO_EPHEMERIS
    CH_FIELD_GNSS_4_GPS_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_4_GPS_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_4_GALILEO_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_4_GALILEO_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_4_SHARED_EVENT_SOURCE = _mscl.MipTypes_CH_FIELD_GNSS_4_SHARED_EVENT_SOURCE
    CH_FIELD_GNSS_4_SHARED_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_4_SHARED_TICKS
    CH_FIELD_GNSS_4_SHARED_DELTA_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_4_SHARED_DELTA_TICKS
    CH_FIELD_GNSS_4_SHARED_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_4_SHARED_GPS_TIMESTAMP
    CH_FIELD_GNSS_4_SHARED_DELTA_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_4_SHARED_DELTA_TIMESTAMP
    CH_FIELD_GNSS_4_SHARED_REFERENCE_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_4_SHARED_REFERENCE_TIMESTAMP
    CH_FIELD_GNSS_4_SHARED_DELTA_REFERENCE_TIME = _mscl.MipTypes_CH_FIELD_GNSS_4_SHARED_DELTA_REFERENCE_TIME
    CH_FIELD_GNSS_4_SHARED_EXTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_4_SHARED_EXTERNAL_TIMESTAMP
    CH_FIELD_GNSS_4_SHARED_DELTA_EXTERNAL_TIME = _mscl.MipTypes_CH_FIELD_GNSS_4_SHARED_DELTA_EXTERNAL_TIME
    CH_FIELD_GNSS_5_LLH_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_5_LLH_POSITION
    CH_FIELD_GNSS_5_ECEF_POSITION = _mscl.MipTypes_CH_FIELD_GNSS_5_ECEF_POSITION
    CH_FIELD_GNSS_5_NED_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_5_NED_VELOCITY
    CH_FIELD_GNSS_5_ECEF_VELOCITY = _mscl.MipTypes_CH_FIELD_GNSS_5_ECEF_VELOCITY
    CH_FIELD_GNSS_5_DOP = _mscl.MipTypes_CH_FIELD_GNSS_5_DOP
    CH_FIELD_GNSS_5_UTC_TIME = _mscl.MipTypes_CH_FIELD_GNSS_5_UTC_TIME
    CH_FIELD_GNSS_5_GPS_TIME = _mscl.MipTypes_CH_FIELD_GNSS_5_GPS_TIME
    CH_FIELD_GNSS_5_CLOCK_INFO = _mscl.MipTypes_CH_FIELD_GNSS_5_CLOCK_INFO
    CH_FIELD_GNSS_5_FIX_INFO = _mscl.MipTypes_CH_FIELD_GNSS_5_FIX_INFO
    CH_FIELD_GNSS_5_SPACE_VEHICLE_INFO = _mscl.MipTypes_CH_FIELD_GNSS_5_SPACE_VEHICLE_INFO
    CH_FIELD_GNSS_5_HARDWARE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_5_HARDWARE_STATUS
    CH_FIELD_GNSS_5_DGNSS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_5_DGNSS_INFO
    CH_FIELD_GNSS_5_DGNSS_CHANNEL_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_5_DGNSS_CHANNEL_STATUS
    CH_FIELD_GNSS_5_CLOCK_INFO_2 = _mscl.MipTypes_CH_FIELD_GNSS_5_CLOCK_INFO_2
    CH_FIELD_GNSS_5_GPS_LEAP_SECONDS = _mscl.MipTypes_CH_FIELD_GNSS_5_GPS_LEAP_SECONDS
    CH_FIELD_GNSS_5_SBAS_INFO = _mscl.MipTypes_CH_FIELD_GNSS_5_SBAS_INFO
    CH_FIELD_GNSS_5_SBAS_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_5_SBAS_CORRECTION
    CH_FIELD_GNSS_5_RF_ERROR_DETECTION = _mscl.MipTypes_CH_FIELD_GNSS_5_RF_ERROR_DETECTION
    CH_FIELD_GNSS_5_SATELLITE_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_5_SATELLITE_STATUS
    CH_FIELD_GNSS_5_RAW_OBSERVATION = _mscl.MipTypes_CH_FIELD_GNSS_5_RAW_OBSERVATION
    CH_FIELD_GNSS_5_STATION_INFO = _mscl.MipTypes_CH_FIELD_GNSS_5_STATION_INFO
    CH_FIELD_GNSS_5_RTK_CORRECTIONS_STATUS = _mscl.MipTypes_CH_FIELD_GNSS_5_RTK_CORRECTIONS_STATUS
    CH_FIELD_GNSS_5_GPS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_5_GPS_EPHEMERIS
    CH_FIELD_GNSS_5_GLONASS_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_5_GLONASS_EPHEMERIS
    CH_FIELD_GNSS_5_GALILEO_EPHEMERIS = _mscl.MipTypes_CH_FIELD_GNSS_5_GALILEO_EPHEMERIS
    CH_FIELD_GNSS_5_GPS_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_5_GPS_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_5_GALILEO_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_FIELD_GNSS_5_GALILEO_IONOSPHERIC_CORRECTION
    CH_FIELD_GNSS_5_SHARED_EVENT_SOURCE = _mscl.MipTypes_CH_FIELD_GNSS_5_SHARED_EVENT_SOURCE
    CH_FIELD_GNSS_5_SHARED_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_5_SHARED_TICKS
    CH_FIELD_GNSS_5_SHARED_DELTA_TICKS = _mscl.MipTypes_CH_FIELD_GNSS_5_SHARED_DELTA_TICKS
    CH_FIELD_GNSS_5_SHARED_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_5_SHARED_GPS_TIMESTAMP
    CH_FIELD_GNSS_5_SHARED_DELTA_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_5_SHARED_DELTA_TIMESTAMP
    CH_FIELD_GNSS_5_SHARED_REFERENCE_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_5_SHARED_REFERENCE_TIMESTAMP
    CH_FIELD_GNSS_5_SHARED_DELTA_REFERENCE_TIME = _mscl.MipTypes_CH_FIELD_GNSS_5_SHARED_DELTA_REFERENCE_TIME
    CH_FIELD_GNSS_5_SHARED_EXTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_GNSS_5_SHARED_EXTERNAL_TIMESTAMP
    CH_FIELD_GNSS_5_SHARED_DELTA_EXTERNAL_TIME = _mscl.MipTypes_CH_FIELD_GNSS_5_SHARED_DELTA_EXTERNAL_TIME
    CH_FIELD_SYSTEM_BUILT_IN_TEST = _mscl.MipTypes_CH_FIELD_SYSTEM_BUILT_IN_TEST
    CH_FIELD_SYSTEM_TIME_SYNC_STATUS = _mscl.MipTypes_CH_FIELD_SYSTEM_TIME_SYNC_STATUS
    CH_FIELD_SYSTEM_GPIO_STATE = _mscl.MipTypes_CH_FIELD_SYSTEM_GPIO_STATE
    CH_FIELD_SYSTEM_SHARED_EVENT_SOURCE = _mscl.MipTypes_CH_FIELD_SYSTEM_SHARED_EVENT_SOURCE
    CH_FIELD_SYSTEM_SHARED_TICKS = _mscl.MipTypes_CH_FIELD_SYSTEM_SHARED_TICKS
    CH_FIELD_SYSTEM_SHARED_DELTA_TICKS = _mscl.MipTypes_CH_FIELD_SYSTEM_SHARED_DELTA_TICKS
    CH_FIELD_SYSTEM_SHARED_GPS_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SYSTEM_SHARED_GPS_TIMESTAMP
    CH_FIELD_SYSTEM_SHARED_DELTA_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SYSTEM_SHARED_DELTA_TIMESTAMP
    CH_FIELD_SYSTEM_SHARED_REFERENCE_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SYSTEM_SHARED_REFERENCE_TIMESTAMP
    CH_FIELD_SYSTEM_SHARED_DELTA_REFERENCE_TIME = _mscl.MipTypes_CH_FIELD_SYSTEM_SHARED_DELTA_REFERENCE_TIME
    CH_FIELD_SYSTEM_SHARED_EXTERNAL_TIMESTAMP = _mscl.MipTypes_CH_FIELD_SYSTEM_SHARED_EXTERNAL_TIMESTAMP
    CH_FIELD_SYSTEM_SHARED_DELTA_EXTERNAL_TIME = _mscl.MipTypes_CH_FIELD_SYSTEM_SHARED_DELTA_EXTERNAL_TIME
    MIN_SHARED_FIELD_DESCRIPTOR = _mscl.MipTypes_MIN_SHARED_FIELD_DESCRIPTOR
    CH_UNKNOWN = _mscl.MipTypes_CH_UNKNOWN
    CH_X = _mscl.MipTypes_CH_X
    CH_Y = _mscl.MipTypes_CH_Y
    CH_Z = _mscl.MipTypes_CH_Z
    CH_MATRIX = _mscl.MipTypes_CH_MATRIX
    CH_QUATERNION = _mscl.MipTypes_CH_QUATERNION
    CH_ROLL = _mscl.MipTypes_CH_ROLL
    CH_PITCH = _mscl.MipTypes_CH_PITCH
    CH_YAW = _mscl.MipTypes_CH_YAW
    CH_TICK = _mscl.MipTypes_CH_TICK
    CH_TIMESTAMP = _mscl.MipTypes_CH_TIMESTAMP
    CH_STATUS = _mscl.MipTypes_CH_STATUS
    CH_TIME_OF_WEEK = _mscl.MipTypes_CH_TIME_OF_WEEK
    CH_WEEK_NUMBER = _mscl.MipTypes_CH_WEEK_NUMBER
    CH_LATITUDE = _mscl.MipTypes_CH_LATITUDE
    CH_LONGITUDE = _mscl.MipTypes_CH_LONGITUDE
    CH_HEIGHT_ABOVE_ELLIPSOID = _mscl.MipTypes_CH_HEIGHT_ABOVE_ELLIPSOID
    CH_HEIGHT_ABOVE_MSL = _mscl.MipTypes_CH_HEIGHT_ABOVE_MSL
    CH_HORIZONTAL_ACCURACY = _mscl.MipTypes_CH_HORIZONTAL_ACCURACY
    CH_VERTICAL_ACCURACY = _mscl.MipTypes_CH_VERTICAL_ACCURACY
    CH_POSITION_ACCURACY = _mscl.MipTypes_CH_POSITION_ACCURACY
    CH_NORTH = _mscl.MipTypes_CH_NORTH
    CH_EAST = _mscl.MipTypes_CH_EAST
    CH_DOWN = _mscl.MipTypes_CH_DOWN
    CH_SPEED = _mscl.MipTypes_CH_SPEED
    CH_GROUND_SPEED = _mscl.MipTypes_CH_GROUND_SPEED
    CH_HEADING = _mscl.MipTypes_CH_HEADING
    CH_SPEED_ACCURACY = _mscl.MipTypes_CH_SPEED_ACCURACY
    CH_HEADING_ACCURACY = _mscl.MipTypes_CH_HEADING_ACCURACY
    CH_VELOCITY_ACCURACY = _mscl.MipTypes_CH_VELOCITY_ACCURACY
    CH_GEOMETRIC_DOP = _mscl.MipTypes_CH_GEOMETRIC_DOP
    CH_POSITION_DOP = _mscl.MipTypes_CH_POSITION_DOP
    CH_HORIZONTAL_DOP = _mscl.MipTypes_CH_HORIZONTAL_DOP
    CH_VERTICAL_DOP = _mscl.MipTypes_CH_VERTICAL_DOP
    CH_TIME_DOP = _mscl.MipTypes_CH_TIME_DOP
    CH_NORTHING_DOP = _mscl.MipTypes_CH_NORTHING_DOP
    CH_EASTING_DOP = _mscl.MipTypes_CH_EASTING_DOP
    CH_FLAGS = _mscl.MipTypes_CH_FLAGS
    CH_BIAS = _mscl.MipTypes_CH_BIAS
    CH_DRIFT = _mscl.MipTypes_CH_DRIFT
    CH_ACCURACY_ESTIMATE = _mscl.MipTypes_CH_ACCURACY_ESTIMATE
    CH_FIX_TYPE = _mscl.MipTypes_CH_FIX_TYPE
    CH_SV_COUNT = _mscl.MipTypes_CH_SV_COUNT
    CH_CHANNEL = _mscl.MipTypes_CH_CHANNEL
    CH_ID = _mscl.MipTypes_CH_ID
    CH_CARRIER_TO_NOISE_RATIO = _mscl.MipTypes_CH_CARRIER_TO_NOISE_RATIO
    CH_AZIMUTH = _mscl.MipTypes_CH_AZIMUTH
    CH_ELEVATION = _mscl.MipTypes_CH_ELEVATION
    CH_SENSOR_STATE = _mscl.MipTypes_CH_SENSOR_STATE
    CH_ANTENNA_STATE = _mscl.MipTypes_CH_ANTENNA_STATE
    CH_ANTENNA_POWER = _mscl.MipTypes_CH_ANTENNA_POWER
    CH_FILTER_STATE = _mscl.MipTypes_CH_FILTER_STATE
    CH_DYNAMICS_MODE = _mscl.MipTypes_CH_DYNAMICS_MODE
    CH_MAGNITUDE = _mscl.MipTypes_CH_MAGNITUDE
    CH_HEADING_UNCERTAINTY = _mscl.MipTypes_CH_HEADING_UNCERTAINTY
    CH_SOURCE = _mscl.MipTypes_CH_SOURCE
    CH_INCLINATION = _mscl.MipTypes_CH_INCLINATION
    CH_DECLINATION = _mscl.MipTypes_CH_DECLINATION
    CH_PRESSURE = _mscl.MipTypes_CH_PRESSURE
    CH_AGE = _mscl.MipTypes_CH_AGE
    CH_NUM_CHANNELS = _mscl.MipTypes_CH_NUM_CHANNELS
    CH_CORRECTION = _mscl.MipTypes_CH_CORRECTION
    CH_RATE_CORRECTION = _mscl.MipTypes_CH_RATE_CORRECTION
    CH_GEOMETRIC_ALTITUDE = _mscl.MipTypes_CH_GEOMETRIC_ALTITUDE
    CH_GEOPOTENTIAL_ALTITUDE = _mscl.MipTypes_CH_GEOPOTENTIAL_ALTITUDE
    CH_TEMPERATURE = _mscl.MipTypes_CH_TEMPERATURE
    CH_DENSITY = _mscl.MipTypes_CH_DENSITY
    CH_ALTITUDE = _mscl.MipTypes_CH_ALTITUDE
    CH_DISPLACEMENT = _mscl.MipTypes_CH_DISPLACEMENT
    CH_MAX_TEMP = _mscl.MipTypes_CH_MAX_TEMP
    CH_MIN_TEMP = _mscl.MipTypes_CH_MIN_TEMP
    CH_MEAN_TEMP = _mscl.MipTypes_CH_MEAN_TEMP
    CH_BIAS_ACCURACY_ESTIMATE = _mscl.MipTypes_CH_BIAS_ACCURACY_ESTIMATE
    CH_DRIFT_ACCURACY_ESTIMATE = _mscl.MipTypes_CH_DRIFT_ACCURACY_ESTIMATE
    CH_SECONDS = _mscl.MipTypes_CH_SECONDS
    CH_NUM_PACKETS = _mscl.MipTypes_CH_NUM_PACKETS
    CH_GPS_CORRECTION_LATENCY = _mscl.MipTypes_CH_GPS_CORRECTION_LATENCY
    CH_GLONASS_CORRECTION_LATENCY = _mscl.MipTypes_CH_GLONASS_CORRECTION_LATENCY
    CH_GALILEO_CORRECTION_LATENCY = _mscl.MipTypes_CH_GALILEO_CORRECTION_LATENCY
    CH_BEIDOU_CORRECTION_LATENCY = _mscl.MipTypes_CH_BEIDOU_CORRECTION_LATENCY
    CH_HEIGHT = _mscl.MipTypes_CH_HEIGHT
    CH_HEALTH = _mscl.MipTypes_CH_HEALTH
    CH_INDEX = _mscl.MipTypes_CH_INDEX
    CH_COUNT = _mscl.MipTypes_CH_COUNT
    CH_SIGNAL_STRENGTH = _mscl.MipTypes_CH_SIGNAL_STRENGTH
    CH_SIGNAL_QUALITY = _mscl.MipTypes_CH_SIGNAL_QUALITY
    CH_RANGE = _mscl.MipTypes_CH_RANGE
    CH_RANGE_UNC = _mscl.MipTypes_CH_RANGE_UNC
    CH_ALPHA = _mscl.MipTypes_CH_ALPHA
    CH_BETA = _mscl.MipTypes_CH_BETA
    CH_DISTURBANCE_FLAGS = _mscl.MipTypes_CH_DISTURBANCE_FLAGS
    CH_CARRIER_PHASE = _mscl.MipTypes_CH_CARRIER_PHASE
    CH_CARRIER_PHASE_UNC = _mscl.MipTypes_CH_CARRIER_PHASE_UNC
    CH_DOPPLER = _mscl.MipTypes_CH_DOPPLER
    CH_DOPPLER_UNC = _mscl.MipTypes_CH_DOPPLER_UNC
    CH_DELTA_TIME = _mscl.MipTypes_CH_DELTA_TIME
    CH_DELTA_TICK = _mscl.MipTypes_CH_DELTA_TICK
    CH_ERROR = _mscl.MipTypes_CH_ERROR
    CH_ERROR_UNC = _mscl.MipTypes_CH_ERROR_UNC
    CH_W = _mscl.MipTypes_CH_W
    CH_M0 = _mscl.MipTypes_CH_M0
    CH_M1 = _mscl.MipTypes_CH_M1
    CH_M2 = _mscl.MipTypes_CH_M2
    CH_M3 = _mscl.MipTypes_CH_M3
    CH_M4 = _mscl.MipTypes_CH_M4
    CH_M5 = _mscl.MipTypes_CH_M5
    CH_M6 = _mscl.MipTypes_CH_M6
    CH_M7 = _mscl.MipTypes_CH_M7
    CH_M8 = _mscl.MipTypes_CH_M8
    CH_NANOSECONDS = _mscl.MipTypes_CH_NANOSECONDS
    CH_VALID_FLAGS = _mscl.MipTypes_CH_VALID_FLAGS
    CH_PPS_VALID = _mscl.MipTypes_CH_PPS_VALID
    CH_LAST_PPS = _mscl.MipTypes_CH_LAST_PPS
    CH_UDREI = _mscl.MipTypes_CH_UDREI
    CH_PSEUDORANGE_CORRECTION = _mscl.MipTypes_CH_PSEUDORANGE_CORRECTION
    CH_IONOSPHERIC_CORRECTION = _mscl.MipTypes_CH_IONOSPHERIC_CORRECTION
    CH_JAMMING_STATE = _mscl.MipTypes_CH_JAMMING_STATE
    CH_SPOOFING_STATE = _mscl.MipTypes_CH_SPOOFING_STATE
    CH_BIT_SYSTEM_GENERAL = _mscl.MipTypes_CH_BIT_SYSTEM_GENERAL
    CH_BIT_SYSTEM_PROCESS = _mscl.MipTypes_CH_BIT_SYSTEM_PROCESS
    CH_BIT_IMU_GENERAL = _mscl.MipTypes_CH_BIT_IMU_GENERAL
    CH_BIT_IMU_SENSORS = _mscl.MipTypes_CH_BIT_IMU_SENSORS
    CH_BIT_IMU_FACTORY_BITS = _mscl.MipTypes_CH_BIT_IMU_FACTORY_BITS
    CH_BIT_FILTER_GENERAL = _mscl.MipTypes_CH_BIT_FILTER_GENERAL
    CH_SYSTEM_ID = _mscl.MipTypes_CH_SYSTEM_ID
    CH_SATELLITE_ID = _mscl.MipTypes_CH_SATELLITE_ID

    @staticmethod
    def channelName(field, qualifier):
        return _mscl.MipTypes_channelName(field, qualifier)

    @staticmethod
    def getChannelFields_allDataClasses(chField):
        return _mscl.MipTypes_getChannelFields_allDataClasses(chField)

    @staticmethod
    def getChannelField_baseDataClass(chField):
        return _mscl.MipTypes_getChannelField_baseDataClass(chField)

    @staticmethod
    def getChannelField_toDataClass(chField, dataClass):
        return _mscl.MipTypes_getChannelField_toDataClass(chField, dataClass)

    @staticmethod
    def getChannelNamePrependText(chField):
        return _mscl.MipTypes_getChannelNamePrependText(chField)

    @staticmethod
    def getChannelNameAppendText(chField):
        return _mscl.MipTypes_getChannelNameAppendText(chField)

    @staticmethod
    def isGnssChannelField(chField):
        return _mscl.MipTypes_isGnssChannelField(chField)

    @staticmethod
    def isSharedChannelField(chField):
        return _mscl.MipTypes_isSharedChannelField(chField)

    @staticmethod
    def channelFieldQualifiers(fields):
        return _mscl.MipTypes_channelFieldQualifiers(fields)

    @staticmethod
    def channelFieldQualifier(field, index):
        return _mscl.MipTypes_channelFieldQualifier(field, index)

    @staticmethod
    def channelFieldQualifierIndex(field, qualifier):
        return _mscl.MipTypes_channelFieldQualifierIndex(field, qualifier)

    def __init__(self):
        _mscl.MipTypes_swiginit(self, _mscl.new_MipTypes())
    __swig_destroy__ = _mscl.delete_MipTypes

# Register MipTypes in _mscl:
_mscl.MipTypes_swigregister(MipTypes)

def MipTypes_channelName(field, qualifier):
    return _mscl.MipTypes_channelName(field, qualifier)

def MipTypes_getChannelFields_allDataClasses(chField):
    return _mscl.MipTypes_getChannelFields_allDataClasses(chField)

def MipTypes_getChannelField_baseDataClass(chField):
    return _mscl.MipTypes_getChannelField_baseDataClass(chField)

def MipTypes_getChannelField_toDataClass(chField, dataClass):
    return _mscl.MipTypes_getChannelField_toDataClass(chField, dataClass)

def MipTypes_getChannelNamePrependText(chField):
    return _mscl.MipTypes_getChannelNamePrependText(chField)

def MipTypes_getChannelNameAppendText(chField):
    return _mscl.MipTypes_getChannelNameAppendText(chField)

def MipTypes_isGnssChannelField(chField):
    return _mscl.MipTypes_isGnssChannelField(chField)

def MipTypes_isSharedChannelField(chField):
    return _mscl.MipTypes_isSharedChannelField(chField)

def MipTypes_channelFieldQualifiers(fields):
    return _mscl.MipTypes_channelFieldQualifiers(fields)

def MipTypes_channelFieldQualifier(field, index):
    return _mscl.MipTypes_channelFieldQualifier(field, index)

def MipTypes_channelFieldQualifierIndex(field, qualifier):
    return _mscl.MipTypes_channelFieldQualifierIndex(field, qualifier)

class MipChannelIdentifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GNSS_RECEIVER_ID = _mscl.MipChannelIdentifier_GNSS_RECEIVER_ID
    GNSS_BASE_STATION_ID = _mscl.MipChannelIdentifier_GNSS_BASE_STATION_ID
    GNSS_CONSTELLATION = _mscl.MipChannelIdentifier_GNSS_CONSTELLATION
    GNSS_SATELLITE_ID = _mscl.MipChannelIdentifier_GNSS_SATELLITE_ID
    GNSS_SIGNAL_ID = _mscl.MipChannelIdentifier_GNSS_SIGNAL_ID
    AIDING_MEASUREMENT_TYPE = _mscl.MipChannelIdentifier_AIDING_MEASUREMENT_TYPE
    GNSS_RF_BAND = _mscl.MipChannelIdentifier_GNSS_RF_BAND
    GNSS = _mscl.MipChannelIdentifier_GNSS
    DUAL_ANTENNA = _mscl.MipChannelIdentifier_DUAL_ANTENNA
    HEADING = _mscl.MipChannelIdentifier_HEADING
    PRESSURE = _mscl.MipChannelIdentifier_PRESSURE
    MAGNETOMETER = _mscl.MipChannelIdentifier_MAGNETOMETER
    SPEED = _mscl.MipChannelIdentifier_SPEED
    UNKNOWN_CONSTELLATION = _mscl.MipChannelIdentifier_UNKNOWN_CONSTELLATION
    GPS = _mscl.MipChannelIdentifier_GPS
    GLONASS = _mscl.MipChannelIdentifier_GLONASS
    GALILEO = _mscl.MipChannelIdentifier_GALILEO
    BEIDOU = _mscl.MipChannelIdentifier_BEIDOU
    UNKNOWN_SIGNAL = _mscl.MipChannelIdentifier_UNKNOWN_SIGNAL
    GPS_L1CA = _mscl.MipChannelIdentifier_GPS_L1CA
    GPS_L1P = _mscl.MipChannelIdentifier_GPS_L1P
    GPS_L1Z = _mscl.MipChannelIdentifier_GPS_L1Z
    GPS_L2CA = _mscl.MipChannelIdentifier_GPS_L2CA
    GPS_L2P = _mscl.MipChannelIdentifier_GPS_L2P
    GPS_L2Z = _mscl.MipChannelIdentifier_GPS_L2Z
    GPS_L2CL = _mscl.MipChannelIdentifier_GPS_L2CL
    GPS_L2CM = _mscl.MipChannelIdentifier_GPS_L2CM
    GPS_L2CML = _mscl.MipChannelIdentifier_GPS_L2CML
    GPS_L5I = _mscl.MipChannelIdentifier_GPS_L5I
    GPS_L5Q = _mscl.MipChannelIdentifier_GPS_L5Q
    GPS_L5IQ = _mscl.MipChannelIdentifier_GPS_L5IQ
    GPS_L1CD = _mscl.MipChannelIdentifier_GPS_L1CD
    GPS_L1CP = _mscl.MipChannelIdentifier_GPS_L1CP
    GPS_L1CDP = _mscl.MipChannelIdentifier_GPS_L1CDP
    GLONASS_G1CA = _mscl.MipChannelIdentifier_GLONASS_G1CA
    GLONASS_G1P = _mscl.MipChannelIdentifier_GLONASS_G1P
    GLONASS_G2C = _mscl.MipChannelIdentifier_GLONASS_G2C
    GLONASS_G2P = _mscl.MipChannelIdentifier_GLONASS_G2P
    GALILEO_E1C = _mscl.MipChannelIdentifier_GALILEO_E1C
    GALILEO_E1A = _mscl.MipChannelIdentifier_GALILEO_E1A
    GALILEO_E1B = _mscl.MipChannelIdentifier_GALILEO_E1B
    GALILEO_E1BC = _mscl.MipChannelIdentifier_GALILEO_E1BC
    GALILEO_E1ABC = _mscl.MipChannelIdentifier_GALILEO_E1ABC
    GALILEO_E6C = _mscl.MipChannelIdentifier_GALILEO_E6C
    GALILEO_E6A = _mscl.MipChannelIdentifier_GALILEO_E6A
    GALILEO_E6B = _mscl.MipChannelIdentifier_GALILEO_E6B
    GALILEO_E6BC = _mscl.MipChannelIdentifier_GALILEO_E6BC
    GALILEO_E6ABC = _mscl.MipChannelIdentifier_GALILEO_E6ABC
    GALILEO_E5BI = _mscl.MipChannelIdentifier_GALILEO_E5BI
    GALILEO_E5BQ = _mscl.MipChannelIdentifier_GALILEO_E5BQ
    GALILEO_E5BIQ = _mscl.MipChannelIdentifier_GALILEO_E5BIQ
    GALILEO_E5ABI = _mscl.MipChannelIdentifier_GALILEO_E5ABI
    GALILEO_E5ABQ = _mscl.MipChannelIdentifier_GALILEO_E5ABQ
    GALILEO_E5ABIQ = _mscl.MipChannelIdentifier_GALILEO_E5ABIQ
    GALILEO_E5AI = _mscl.MipChannelIdentifier_GALILEO_E5AI
    GALILEO_E5AQ = _mscl.MipChannelIdentifier_GALILEO_E5AQ
    GALILEO_E5AIQ = _mscl.MipChannelIdentifier_GALILEO_E5AIQ
    SBAS_L1CA = _mscl.MipChannelIdentifier_SBAS_L1CA
    SBAS_L5I = _mscl.MipChannelIdentifier_SBAS_L5I
    SBAS_L5Q = _mscl.MipChannelIdentifier_SBAS_L5Q
    SBAS_L5IQ = _mscl.MipChannelIdentifier_SBAS_L5IQ
    QZSS_L1CA = _mscl.MipChannelIdentifier_QZSS_L1CA
    QZSS_LEXS = _mscl.MipChannelIdentifier_QZSS_LEXS
    QZSS_LEXL = _mscl.MipChannelIdentifier_QZSS_LEXL
    QZSS_LEXSL = _mscl.MipChannelIdentifier_QZSS_LEXSL
    QZSS_L2CM = _mscl.MipChannelIdentifier_QZSS_L2CM
    QZSS_L2CL = _mscl.MipChannelIdentifier_QZSS_L2CL
    QZSS_L2CML = _mscl.MipChannelIdentifier_QZSS_L2CML
    QZSS_L5I = _mscl.MipChannelIdentifier_QZSS_L5I
    QZSS_L5Q = _mscl.MipChannelIdentifier_QZSS_L5Q
    QZSS_L5IQ = _mscl.MipChannelIdentifier_QZSS_L5IQ
    QZSS_L1CD = _mscl.MipChannelIdentifier_QZSS_L1CD
    QZSS_L1CP = _mscl.MipChannelIdentifier_QZSS_L1CP
    QZSS_L1CDP = _mscl.MipChannelIdentifier_QZSS_L1CDP
    BEIDOU_B1I = _mscl.MipChannelIdentifier_BEIDOU_B1I
    BEIDOU_B1Q = _mscl.MipChannelIdentifier_BEIDOU_B1Q
    BEIDOU_B1IQ = _mscl.MipChannelIdentifier_BEIDOU_B1IQ
    BEIDOU_B3I = _mscl.MipChannelIdentifier_BEIDOU_B3I
    BEIDOU_B3Q = _mscl.MipChannelIdentifier_BEIDOU_B3Q
    BEIDOU_B3IQ = _mscl.MipChannelIdentifier_BEIDOU_B3IQ
    BEIDOU_B2I = _mscl.MipChannelIdentifier_BEIDOU_B2I
    BEIDOU_B2Q = _mscl.MipChannelIdentifier_BEIDOU_B2Q
    BEIDOU_B2IQ = _mscl.MipChannelIdentifier_BEIDOU_B2IQ
    UNKNOWN_RF_BAND = _mscl.MipChannelIdentifier_UNKNOWN_RF_BAND
    RF_BAND_L1 = _mscl.MipChannelIdentifier_RF_BAND_L1
    RF_BAND_L2 = _mscl.MipChannelIdentifier_RF_BAND_L2
    RF_BAND_L5 = _mscl.MipChannelIdentifier_RF_BAND_L5

    def __init__(self, *args):
        _mscl.MipChannelIdentifier_swiginit(self, _mscl.new_MipChannelIdentifier(*args))
    __swig_destroy__ = _mscl.delete_MipChannelIdentifier

    def identifierType(self):
        return _mscl.MipChannelIdentifier_identifierType(self)

    def id(self):
        return _mscl.MipChannelIdentifier_id(self)

    def hasSpecifier(self):
        return _mscl.MipChannelIdentifier_hasSpecifier(self)

    def specifier(self):
        return _mscl.MipChannelIdentifier_specifier(self)

    def name(self, standardizedFormat=True):
        return _mscl.MipChannelIdentifier_name(self, standardizedFormat)

# Register MipChannelIdentifier in _mscl:
_mscl.MipChannelIdentifier_swigregister(MipChannelIdentifier)

class MipCommandBytes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = property(_mscl.MipCommandBytes_id_get, _mscl.MipCommandBytes_id_set)
    commands = property(_mscl.MipCommandBytes_commands_get, _mscl.MipCommandBytes_commands_set)
    buildCmdFailed = property(_mscl.MipCommandBytes_buildCmdFailed_get, _mscl.MipCommandBytes_buildCmdFailed_set)
    sendCmdFailed = property(_mscl.MipCommandBytes_sendCmdFailed_get, _mscl.MipCommandBytes_sendCmdFailed_set)

    def __init__(self, *args):
        _mscl.MipCommandBytes_swiginit(self, _mscl.new_MipCommandBytes(*args))

    def add(self, cmd):
        return _mscl.MipCommandBytes_add(self, cmd)

    def valid(self):
        return _mscl.MipCommandBytes_valid(self)
    __swig_destroy__ = _mscl.delete_MipCommandBytes

# Register MipCommandBytes in _mscl:
_mscl.MipCommandBytes_swigregister(MipCommandBytes)

class GnssReceiverInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.GnssReceiverInfo_swiginit(self, _mscl.new_GnssReceiverInfo(*args))
    id = property(_mscl.GnssReceiverInfo_id_get, _mscl.GnssReceiverInfo_id_set)
    targetDataClass = property(_mscl.GnssReceiverInfo_targetDataClass_get, _mscl.GnssReceiverInfo_targetDataClass_set)
    description = property(_mscl.GnssReceiverInfo_description_get, _mscl.GnssReceiverInfo_description_set)
    module = property(_mscl.GnssReceiverInfo_module_get, _mscl.GnssReceiverInfo_module_set)
    fwId = property(_mscl.GnssReceiverInfo_fwId_get, _mscl.GnssReceiverInfo_fwId_set)
    fwVersion = property(_mscl.GnssReceiverInfo_fwVersion_get, _mscl.GnssReceiverInfo_fwVersion_set)
    __swig_destroy__ = _mscl.delete_GnssReceiverInfo

# Register GnssReceiverInfo in _mscl:
_mscl.GnssReceiverInfo_swigregister(GnssReceiverInfo)
GnssReceiverInfo.INFO_NOT_FOUND = _mscl.cvar.GnssReceiverInfo_INFO_NOT_FOUND

class DeviceCommPort(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PRIMARY = _mscl.DeviceCommPort_PRIMARY
    AUX = _mscl.DeviceCommPort_AUX

    def __init__(self, *args):
        _mscl.DeviceCommPort_swiginit(self, _mscl.new_DeviceCommPort(*args))
    type = property(_mscl.DeviceCommPort_type_get, _mscl.DeviceCommPort_type_set)
    id = property(_mscl.DeviceCommPort_id_get, _mscl.DeviceCommPort_id_set)
    __swig_destroy__ = _mscl.delete_DeviceCommPort

# Register DeviceCommPort in _mscl:
_mscl.DeviceCommPort_swigregister(DeviceCommPort)

class EventTypeInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.EventTypeInfo_swiginit(self, _mscl.new_EventTypeInfo(*args))
    type = property(_mscl.EventTypeInfo_type_get, _mscl.EventTypeInfo_type_set)
    maxInstances = property(_mscl.EventTypeInfo_maxInstances_get, _mscl.EventTypeInfo_maxInstances_set)
    __swig_destroy__ = _mscl.delete_EventTypeInfo

# Register EventTypeInfo in _mscl:
_mscl.EventTypeInfo_swigregister(EventTypeInfo)

class EventSupportInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TRIGGERS = _mscl.EventSupportInfo_TRIGGERS
    ACTIONS = _mscl.EventSupportInfo_ACTIONS
    query = property(_mscl.EventSupportInfo_query_get, _mscl.EventSupportInfo_query_set)
    maxInstances = property(_mscl.EventSupportInfo_maxInstances_get, _mscl.EventSupportInfo_maxInstances_set)
    entries = property(_mscl.EventSupportInfo_entries_get, _mscl.EventSupportInfo_entries_set)

    def __init__(self):
        _mscl.EventSupportInfo_swiginit(self, _mscl.new_EventSupportInfo())
    __swig_destroy__ = _mscl.delete_EventSupportInfo

# Register EventSupportInfo in _mscl:
_mscl.EventSupportInfo_swigregister(EventSupportInfo)

class SensorRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ALL = _mscl.SensorRange_ALL
    ACCEL_G = _mscl.SensorRange_ACCEL_G
    GYRO_DPS = _mscl.SensorRange_GYRO_DPS
    MAG_GAUSS = _mscl.SensorRange_MAG_GAUSS
    PRESSURE_HPA = _mscl.SensorRange_PRESSURE_HPA

    def __init__(self):
        _mscl.SensorRange_swiginit(self, _mscl.new_SensorRange())

    def type(self):
        return _mscl.SensorRange_type(self)

    def range(self):
        return _mscl.SensorRange_range(self)

    def id(self):
        return _mscl.SensorRange_id(self)
    __swig_destroy__ = _mscl.delete_SensorRange

# Register SensorRange in _mscl:
_mscl.SensorRange_swigregister(SensorRange)

class SupportedSensorRanges(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.SupportedSensorRanges_swiginit(self, _mscl.new_SupportedSensorRanges())

    def options(self):
        return _mscl.SupportedSensorRanges_options(self)

    def lookupRecommended(self, type, range):
        return _mscl.SupportedSensorRanges_lookupRecommended(self, type, range)
    __swig_destroy__ = _mscl.delete_SupportedSensorRanges

# Register SupportedSensorRanges in _mscl:
_mscl.SupportedSensorRanges_swigregister(SupportedSensorRanges)

class InertialTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PORTABLE_VEHICLE = _mscl.InertialTypes_PORTABLE_VEHICLE
    AUTOMOTIVE_VEHICLE = _mscl.InertialTypes_AUTOMOTIVE_VEHICLE
    AIRBORNE_VEHICLE = _mscl.InertialTypes_AIRBORNE_VEHICLE
    AIRBORNE_HIGH_G_VEHICLE = _mscl.InertialTypes_AIRBORNE_HIGH_G_VEHICLE
    GPS_PORTABLE = _mscl.InertialTypes_GPS_PORTABLE
    GPS_STATIONARY = _mscl.InertialTypes_GPS_STATIONARY
    GPS_PEDESTRIAN = _mscl.InertialTypes_GPS_PEDESTRIAN
    GPS_AUTOMOTIVE = _mscl.InertialTypes_GPS_AUTOMOTIVE
    GPS_SEA = _mscl.InertialTypes_GPS_SEA
    GPS_AIRBORNE_1G = _mscl.InertialTypes_GPS_AIRBORNE_1G
    GPS_AIRBORNE_2G = _mscl.InertialTypes_GPS_AIRBORNE_2G
    GPS_AIRBORNE_4G = _mscl.InertialTypes_GPS_AIRBORNE_4G
    RESET_ALL_AXIS = _mscl.InertialTypes_RESET_ALL_AXIS
    TARE_ROLL_AXIS = _mscl.InertialTypes_TARE_ROLL_AXIS
    TARE_PITCH_AXIS = _mscl.InertialTypes_TARE_PITCH_AXIS
    TARE_YAW_AXIS = _mscl.InertialTypes_TARE_YAW_AXIS
    INTERNAL_GNSS_ALL = _mscl.InertialTypes_INTERNAL_GNSS_ALL
    EXTERNAL_GNSS = _mscl.InertialTypes_EXTERNAL_GNSS
    INTERNAL_GNSS1 = _mscl.InertialTypes_INTERNAL_GNSS1
    INTERNAL_GNSS2 = _mscl.InertialTypes_INTERNAL_GNSS2
    FIX_SBAS_CORRECTIONS = _mscl.InertialTypes_FIX_SBAS_CORRECTIONS
    FIX_DGNSS_CORRECTIONS = _mscl.InertialTypes_FIX_DGNSS_CORRECTIONS
    FIXTYPE_3D = _mscl.InertialTypes_FIXTYPE_3D
    FIXTYPE_2D = _mscl.InertialTypes_FIXTYPE_2D
    FIXTYPE_TIMEONLY = _mscl.InertialTypes_FIXTYPE_TIMEONLY
    FIXTYPE_NONE = _mscl.InertialTypes_FIXTYPE_NONE
    FIXTYPE_INVALID = _mscl.InertialTypes_FIXTYPE_INVALID
    FIXTYPE_RTK_FLOAT = _mscl.InertialTypes_FIXTYPE_RTK_FLOAT
    FIXTYPE_RTK_FIXED = _mscl.InertialTypes_FIXTYPE_RTK_FIXED
    FIXTYPE_DUAL_ANTENNA_NONE = _mscl.InertialTypes_FIXTYPE_DUAL_ANTENNA_NONE
    FIXTYPE_DUAL_ANTENNA_FLOAT = _mscl.InertialTypes_FIXTYPE_DUAL_ANTENNA_FLOAT
    FIXTYPE_DUAL_ANTENNA_FIXED = _mscl.InertialTypes_FIXTYPE_DUAL_ANTENNA_FIXED
    DATA_VALID_REC_1 = _mscl.InertialTypes_DATA_VALID_REC_1
    DATA_VALID_REC_2 = _mscl.InertialTypes_DATA_VALID_REC_2
    ANTENNA_OFFSETS_VALID = _mscl.InertialTypes_ANTENNA_OFFSETS_VALID
    SVFLAG_NAVIGATION = _mscl.InertialTypes_SVFLAG_NAVIGATION
    SVFLAG_HEALTHY = _mscl.InertialTypes_SVFLAG_HEALTHY
    DEVICE_AHRS = _mscl.InertialTypes_DEVICE_AHRS
    DEVICE_GPS = _mscl.InertialTypes_DEVICE_GPS
    ON_FULL_PERFORMANCE = _mscl.InertialTypes_ON_FULL_PERFORMANCE
    ON_LOW_POWER = _mscl.InertialTypes_ON_LOW_POWER
    SLEEP = _mscl.InertialTypes_SLEEP
    OFF = _mscl.InertialTypes_OFF
    STANDARD_MIP = _mscl.InertialTypes_STANDARD_MIP
    WRAPPED_RAW = _mscl.InertialTypes_WRAPPED_RAW
    SENSORSTATE_OFF = _mscl.InertialTypes_SENSORSTATE_OFF
    SENSORSTATE_ON = _mscl.InertialTypes_SENSORSTATE_ON
    SENSORSTATE_UNKNOWN = _mscl.InertialTypes_SENSORSTATE_UNKNOWN
    ANTENNASTATE_INIT = _mscl.InertialTypes_ANTENNASTATE_INIT
    ANTENNASTATE_SHORT = _mscl.InertialTypes_ANTENNASTATE_SHORT
    ANTENNASTATE_OPEN = _mscl.InertialTypes_ANTENNASTATE_OPEN
    ANTENNASTATE_GOOD = _mscl.InertialTypes_ANTENNASTATE_GOOD
    ANTENNASTATE_UNKNOWN = _mscl.InertialTypes_ANTENNASTATE_UNKNOWN
    ANTENNAPOWER_OFF = _mscl.InertialTypes_ANTENNAPOWER_OFF
    ANTENNAPOWER_ON = _mscl.InertialTypes_ANTENNAPOWER_ON
    ANTENNAPOWER_UNKNOWN = _mscl.InertialTypes_ANTENNAPOWER_UNKNOWN
    FILTERSTATE_STARTUP = _mscl.InertialTypes_FILTERSTATE_STARTUP
    FILTERSTATE_INIT = _mscl.InertialTypes_FILTERSTATE_INIT
    FILTERSTATE_RUNNING_SLN_VALID = _mscl.InertialTypes_FILTERSTATE_RUNNING_SLN_VALID
    FILTERSTATE_RUNNING_SLN_ERROR = _mscl.InertialTypes_FILTERSTATE_RUNNING_SLN_ERROR
    FILTERSTATE_VERT_GYRO = _mscl.InertialTypes_FILTERSTATE_VERT_GYRO
    FILTERSTATE_AHRS = _mscl.InertialTypes_FILTERSTATE_AHRS
    FILTERSTATE_FULL_NAV = _mscl.InertialTypes_FILTERSTATE_FULL_NAV
    FILTERSTATUS_IMU_UNAVAILABLE = _mscl.InertialTypes_FILTERSTATUS_IMU_UNAVAILABLE
    FILTERSTATUS_GPS_UNAVAILABLE = _mscl.InertialTypes_FILTERSTATUS_GPS_UNAVAILABLE
    FILTERSTATUS_MATRIX_SINGULARITY_IN_CALC = _mscl.InertialTypes_FILTERSTATUS_MATRIX_SINGULARITY_IN_CALC
    FILTERSTATUS_POS_COVARIANCE_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_POS_COVARIANCE_HIGH_WARN
    FILTERSTATUS_VEL_COVARIANCE_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_VEL_COVARIANCE_HIGH_WARN
    FILTERSTATUS_ATT_COVARIANCE_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_ATT_COVARIANCE_HIGH_WARN
    FILTERSTATUS_NAN_IN_SOLUTION = _mscl.InertialTypes_FILTERSTATUS_NAN_IN_SOLUTION
    FILTERSTATUS_GYRO_BIAS_EST_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_GYRO_BIAS_EST_HIGH_WARN
    FILTERSTATUS_ACCEL_BIAS_EST_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_ACCEL_BIAS_EST_HIGH_WARN
    FILTERSTATUS_GYRO_SCALE_FACTOR_EST_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_GYRO_SCALE_FACTOR_EST_HIGH_WARN
    FILTERSTATUS_ACCEL_SCALE_FACTOR_EST_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_ACCEL_SCALE_FACTOR_EST_HIGH_WARN
    FILTERSTATUS_MAG_BIAS_EST_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_MAG_BIAS_EST_HIGH_WARN
    FILTERSTATUS_ANTENNA_OFFSET_CORRECTION_EST_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_ANTENNA_OFFSET_CORRECTION_EST_HIGH_WARN
    FILTERSTATUS_HARD_IRON_OFFSET_EST_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_HARD_IRON_OFFSET_EST_HIGH_WARN
    FILTERSTATUS_SOFT_IRON_CORRECTION_EST_HIGH_WARN = _mscl.InertialTypes_FILTERSTATUS_SOFT_IRON_CORRECTION_EST_HIGH_WARN
    FILTERSTATUS_CONDITION = _mscl.InertialTypes_FILTERSTATUS_CONDITION
    FILTERSTATUS_ROLL_PITCH_WARNING = _mscl.InertialTypes_FILTERSTATUS_ROLL_PITCH_WARNING
    FILTERSTATUS_HEADING_WARNING = _mscl.InertialTypes_FILTERSTATUS_HEADING_WARNING
    FILTERSTATUS_POSITION_WARNING = _mscl.InertialTypes_FILTERSTATUS_POSITION_WARNING
    FILTERSTATUS_VELOCITY_WARNING = _mscl.InertialTypes_FILTERSTATUS_VELOCITY_WARNING
    FILTERSTATUS_IMU_BIAS_WARNING = _mscl.InertialTypes_FILTERSTATUS_IMU_BIAS_WARNING
    FILTERSTATUS_GNSS_CLK_WARNING = _mscl.InertialTypes_FILTERSTATUS_GNSS_CLK_WARNING
    FILTERSTATUS_ANT_LEVER_ARM_WARNING = _mscl.InertialTypes_FILTERSTATUS_ANT_LEVER_ARM_WARNING
    FILTERSTATUS_MOUNTING_TRANSFORM_WARNING = _mscl.InertialTypes_FILTERSTATUS_MOUNTING_TRANSFORM_WARNING
    FILTERSTATUS_ATT_NOT_INIT = _mscl.InertialTypes_FILTERSTATUS_ATT_NOT_INIT
    FILTERSTATUS_POS_VEL_NOT_INIT = _mscl.InertialTypes_FILTERSTATUS_POS_VEL_NOT_INIT
    STABLE = _mscl.InertialTypes_STABLE
    CONVERGING = _mscl.InertialTypes_CONVERGING
    UNSTABLE = _mscl.InertialTypes_UNSTABLE
    DGNSSBASE_UDRE_SCALE_FACTOR_1_00 = _mscl.InertialTypes_DGNSSBASE_UDRE_SCALE_FACTOR_1_00
    DGNSSBASE_UDRE_SCALE_FACTOR_0_75 = _mscl.InertialTypes_DGNSSBASE_UDRE_SCALE_FACTOR_0_75
    DGNSSBASE_UDRE_SCALE_FACTOR_0_50 = _mscl.InertialTypes_DGNSSBASE_UDRE_SCALE_FACTOR_0_50
    DGNSSBASE_UDRE_SCALE_FACTOR_0_30 = _mscl.InertialTypes_DGNSSBASE_UDRE_SCALE_FACTOR_0_30
    DGNSSBASE_UDRE_SCALE_FACTOR_0_20 = _mscl.InertialTypes_DGNSSBASE_UDRE_SCALE_FACTOR_0_20
    DGNSSBASE_UDRE_SCALE_FACTOR_0_10 = _mscl.InertialTypes_DGNSSBASE_UDRE_SCALE_FACTOR_0_10
    DGNSSBASE_REFERENCE_STATION_TRANSMISSION_NOT_MONITORED = _mscl.InertialTypes_DGNSSBASE_REFERENCE_STATION_TRANSMISSION_NOT_MONITORED
    DGNSSBASE_REFERENCE_STATION_NOT_WORKING = _mscl.InertialTypes_DGNSSBASE_REFERENCE_STATION_NOT_WORKING
    HEADINGSOURCE_NONE = _mscl.InertialTypes_HEADINGSOURCE_NONE
    HEADINGSOURCE_INTERNAL_MAGNETOMETER = _mscl.InertialTypes_HEADINGSOURCE_INTERNAL_MAGNETOMETER
    HEADINGSOURCE_INTERNAL_GPS_VELOCITY_VECTOR = _mscl.InertialTypes_HEADINGSOURCE_INTERNAL_GPS_VELOCITY_VECTOR
    HEADINGSOURCE_EXTERNAL_HEADING_UPDATE_CMD = _mscl.InertialTypes_HEADINGSOURCE_EXTERNAL_HEADING_UPDATE_CMD
    HEADINGSOURCE_GNSS_DUAL_ANTENNA = _mscl.InertialTypes_HEADINGSOURCE_GNSS_DUAL_ANTENNA
    ENABLE_NONE = _mscl.InertialTypes_ENABLE_NONE
    ENABLE_INTERNAL_MAGNETOMETER = _mscl.InertialTypes_ENABLE_INTERNAL_MAGNETOMETER
    ENABLE_INTERNAL_GNSS = _mscl.InertialTypes_ENABLE_INTERNAL_GNSS
    ENABLE_EXTERNAL_MESSAGES = _mscl.InertialTypes_ENABLE_EXTERNAL_MESSAGES
    ENABLE_MAGNETOMETER_AND_GNSS = _mscl.InertialTypes_ENABLE_MAGNETOMETER_AND_GNSS
    ENABLE_GNSS_AND_EXTERNAL = _mscl.InertialTypes_ENABLE_GNSS_AND_EXTERNAL
    ENABLE_MAGNETOMETER_AND_EXTERNAL = _mscl.InertialTypes_ENABLE_MAGNETOMETER_AND_EXTERNAL
    ENABLE_ALL = _mscl.InertialTypes_ENABLE_ALL
    ENABLE_GYRO_BIAS_ESTIMATION = _mscl.InertialTypes_ENABLE_GYRO_BIAS_ESTIMATION
    ENABLE_ACCEL_BIAS_ESTIMATION = _mscl.InertialTypes_ENABLE_ACCEL_BIAS_ESTIMATION
    ENABLE_GYRO_SCALE_FACTOR_ESTIMATION = _mscl.InertialTypes_ENABLE_GYRO_SCALE_FACTOR_ESTIMATION
    ENABLE_ACCEL_SCALE_FACTOR_ESTIMATION = _mscl.InertialTypes_ENABLE_ACCEL_SCALE_FACTOR_ESTIMATION
    ENABLE_GNSS_ANTENNA_OFFSET_ESTIMATION = _mscl.InertialTypes_ENABLE_GNSS_ANTENNA_OFFSET_ESTIMATION
    ENABLE_HARD_IRON_AUTO_CALIBRATION = _mscl.InertialTypes_ENABLE_HARD_IRON_AUTO_CALIBRATION
    ENABLE_SOFT_IRON_AUTO_CALIBRATION = _mscl.InertialTypes_ENABLE_SOFT_IRON_AUTO_CALIBRATION
    NONE = _mscl.InertialTypes_NONE
    WORLD_MAGNETIC_MODEL = _mscl.InertialTypes_WORLD_MAGNETIC_MODEL
    MANUAL = _mscl.InertialTypes_MANUAL
    ADAPTIVE_MEASUREMENT_DISABLE = _mscl.InertialTypes_ADAPTIVE_MEASUREMENT_DISABLE
    ADAPTIVE_MEASUREMENT_ENABLE_FIXED = _mscl.InertialTypes_ADAPTIVE_MEASUREMENT_ENABLE_FIXED
    ADAPTIVE_MEASUREMENT_ENABLE_AUTO = _mscl.InertialTypes_ADAPTIVE_MEASUREMENT_ENABLE_AUTO
    GNSS_POS_VEL_AIDING = _mscl.InertialTypes_GNSS_POS_VEL_AIDING
    GNSS_HEADING_AIDING = _mscl.InertialTypes_GNSS_HEADING_AIDING
    ALTIMETER_AIDING = _mscl.InertialTypes_ALTIMETER_AIDING
    ODOMETER_AIDING = _mscl.InertialTypes_ODOMETER_AIDING
    MAGNETOMETER_AIDING = _mscl.InertialTypes_MAGNETOMETER_AIDING
    EXTERNAL_HEADING_AIDING = _mscl.InertialTypes_EXTERNAL_HEADING_AIDING
    ALL_AIDING_MEASUREMENTS = _mscl.InertialTypes_ALL_AIDING_MEASUREMENTS
    GPS = _mscl.InertialTypes_GPS
    SBAS = _mscl.InertialTypes_SBAS
    GALILEO = _mscl.InertialTypes_GALILEO
    BEIDOU = _mscl.InertialTypes_BEIDOU
    QZSS = _mscl.InertialTypes_QZSS
    GLONASS = _mscl.InertialTypes_GLONASS
    FILTERING_OFF = _mscl.InertialTypes_FILTERING_OFF
    FILTERING_CONSERVATIVE = _mscl.InertialTypes_FILTERING_CONSERVATIVE
    FILTERING_MODERATE = _mscl.InertialTypes_FILTERING_MODERATE
    FILTERING_AGGRESIVE = _mscl.InertialTypes_FILTERING_AGGRESIVE
    FACTORY_STREAMING_OVERWRITE = _mscl.InertialTypes_FACTORY_STREAMING_OVERWRITE
    FACTORY_STREAMING_MERGE = _mscl.InertialTypes_FACTORY_STREAMING_MERGE
    FACTORY_STREAMING_ADDITIVE = _mscl.InertialTypes_FACTORY_STREAMING_ADDITIVE
    PPS_DISABLED = _mscl.InertialTypes_PPS_DISABLED
    PPS_RECEIVER_1 = _mscl.InertialTypes_PPS_RECEIVER_1
    PPS_RECEIVER_2 = _mscl.InertialTypes_PPS_RECEIVER_2
    PPS_GPIO = _mscl.InertialTypes_PPS_GPIO
    PPS_GENERATED = _mscl.InertialTypes_PPS_GENERATED
    GNSS_AIDING_TIGHT_COUPLING = _mscl.InertialTypes_GNSS_AIDING_TIGHT_COUPLING
    GNSS_AIDING_DIFFERENTIAL = _mscl.InertialTypes_GNSS_AIDING_DIFFERENTIAL
    GNSS_AIDING_INTEGER_FIX = _mscl.InertialTypes_GNSS_AIDING_INTEGER_FIX
    GNSS_AIDING_GPS = _mscl.InertialTypes_GNSS_AIDING_GPS
    GNSS_AIDING_GLONASS = _mscl.InertialTypes_GNSS_AIDING_GLONASS
    GNSS_AIDING_GALILEO = _mscl.InertialTypes_GNSS_AIDING_GALILEO
    GNSS_AIDING_BEIDOU = _mscl.InertialTypes_GNSS_AIDING_BEIDOU
    GNSS_AIDING_NO_FIX = _mscl.InertialTypes_GNSS_AIDING_NO_FIX
    GNSS_AIDING_CONFIG_ERROR = _mscl.InertialTypes_GNSS_AIDING_CONFIG_ERROR
    AIDING_MEASUREMENT_ENABLED = _mscl.InertialTypes_AIDING_MEASUREMENT_ENABLED
    AIDING_MEASUREMENT_USED = _mscl.InertialTypes_AIDING_MEASUREMENT_USED
    AIDING_MEASUREMENT_WARNING_RESIDUAL_HIGH = _mscl.InertialTypes_AIDING_MEASUREMENT_WARNING_RESIDUAL_HIGH
    AIDING_MEASUREMENT_WARNING_SAMPLE_TIME = _mscl.InertialTypes_AIDING_MEASUREMENT_WARNING_SAMPLE_TIME
    AIDING_MEASUREMENT_CONFIG_ERROR = _mscl.InertialTypes_AIDING_MEASUREMENT_CONFIG_ERROR
    AIDING_MEASUREMENT_MAX_COUNT_EXCEEDED = _mscl.InertialTypes_AIDING_MEASUREMENT_MAX_COUNT_EXCEEDED
    RTK_CORRECTION_ANTENNA_POS_RECEIVED = _mscl.InertialTypes_RTK_CORRECTION_ANTENNA_POS_RECEIVED
    RTK_CORRECTION_ANTENNA_DESC_RECEIVED = _mscl.InertialTypes_RTK_CORRECTION_ANTENNA_DESC_RECEIVED
    RTK_CORRECTION_GPS_RECEIVED = _mscl.InertialTypes_RTK_CORRECTION_GPS_RECEIVED
    RTK_CORRECTION_GLONASS_RECEIVED = _mscl.InertialTypes_RTK_CORRECTION_GLONASS_RECEIVED
    RTK_CORRECTION_GALILEO_RECEIVED = _mscl.InertialTypes_RTK_CORRECTION_GALILEO_RECEIVED
    RTK_CORRECTION_BEIDOU_RECEIVED = _mscl.InertialTypes_RTK_CORRECTION_BEIDOU_RECEIVED
    RTK_CORRECTION_USING_GPS_MSM = _mscl.InertialTypes_RTK_CORRECTION_USING_GPS_MSM
    RTK_CORRECTION_USING_GLONASS_MSM = _mscl.InertialTypes_RTK_CORRECTION_USING_GLONASS_MSM
    SIGNAL_QUALITY_NONE = _mscl.InertialTypes_SIGNAL_QUALITY_NONE
    SIGNAL_QUALITY_SEARCHING = _mscl.InertialTypes_SIGNAL_QUALITY_SEARCHING
    SIGNAL_QUALITY_ACQUIRED = _mscl.InertialTypes_SIGNAL_QUALITY_ACQUIRED
    SIGNAL_QUALITY_UNUSABLE = _mscl.InertialTypes_SIGNAL_QUALITY_UNUSABLE
    SIGNAL_QUALITY_TIME_LOCKED = _mscl.InertialTypes_SIGNAL_QUALITY_TIME_LOCKED
    SIGNAL_QUALITY_FULLY_LOCKED = _mscl.InertialTypes_SIGNAL_QUALITY_FULLY_LOCKED
    OVERRANGE_ACCEL_X = _mscl.InertialTypes_OVERRANGE_ACCEL_X
    OVERRANGE_ACCEL_Y = _mscl.InertialTypes_OVERRANGE_ACCEL_Y
    OVERRANGE_ACCEL_Z = _mscl.InertialTypes_OVERRANGE_ACCEL_Z
    OVERRANGE_GYRO_X = _mscl.InertialTypes_OVERRANGE_GYRO_X
    OVERRANGE_GYRO_Y = _mscl.InertialTypes_OVERRANGE_GYRO_Y
    OVERRANGE_GYRO_Z = _mscl.InertialTypes_OVERRANGE_GYRO_Z
    OVERRANGE_MAG_X = _mscl.InertialTypes_OVERRANGE_MAG_X
    OVERRANGE_MAG_Y = _mscl.InertialTypes_OVERRANGE_MAG_Y
    OVERRANGE_MAG_Z = _mscl.InertialTypes_OVERRANGE_MAG_Z
    OVERRANGE_PRESSURE = _mscl.InertialTypes_OVERRANGE_PRESSURE
    UNKNOWN_SBAS_SYSTEM = _mscl.InertialTypes_UNKNOWN_SBAS_SYSTEM
    WAAS = _mscl.InertialTypes_WAAS
    EGNOS = _mscl.InertialTypes_EGNOS
    MSAS = _mscl.InertialTypes_MSAS
    GAGAN = _mscl.InertialTypes_GAGAN
    SBAS_INFO_RANGE_AVAILABLE = _mscl.InertialTypes_SBAS_INFO_RANGE_AVAILABLE
    SBAS_INFO_CORRECTIONS_AVAILABLE = _mscl.InertialTypes_SBAS_INFO_CORRECTIONS_AVAILABLE
    SBAS_INFO_INTEGRITY_AVAILABLE = _mscl.InertialTypes_SBAS_INFO_INTEGRITY_AVAILABLE
    SBAS_INFO_TEST = _mscl.InertialTypes_SBAS_INFO_TEST
    JAMMING_STATE_UNKNOWN = _mscl.InertialTypes_JAMMING_STATE_UNKNOWN
    JAMMING_STATE_NONE = _mscl.InertialTypes_JAMMING_STATE_NONE
    JAMMING_STATE_PARTIAL = _mscl.InertialTypes_JAMMING_STATE_PARTIAL
    JAMMING_STATE_SIGNIFICANT = _mscl.InertialTypes_JAMMING_STATE_SIGNIFICANT
    SPOOFING_STATE_UNKNOWN = _mscl.InertialTypes_SPOOFING_STATE_UNKNOWN
    SPOOFING_STATE_NONE = _mscl.InertialTypes_SPOOFING_STATE_NONE
    SPOOFING_STATE_PARTIAL = _mscl.InertialTypes_SPOOFING_STATE_PARTIAL
    SPOOFING_STATE_SIGNIFICANT = _mscl.InertialTypes_SPOOFING_STATE_SIGNIFICANT

    def __init__(self):
        _mscl.InertialTypes_swiginit(self, _mscl.new_InertialTypes())
    __swig_destroy__ = _mscl.delete_InertialTypes

# Register InertialTypes in _mscl:
_mscl.InertialTypes_swigregister(InertialTypes)

class NmeaMessageFormat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GGA = _mscl.NmeaMessageFormat_GGA
    GLL = _mscl.NmeaMessageFormat_GLL
    GSV = _mscl.NmeaMessageFormat_GSV
    RMC = _mscl.NmeaMessageFormat_RMC
    VTG = _mscl.NmeaMessageFormat_VTG
    HDT = _mscl.NmeaMessageFormat_HDT
    ZDA = _mscl.NmeaMessageFormat_ZDA
    PKRA = _mscl.NmeaMessageFormat_PKRA
    PKRR = _mscl.NmeaMessageFormat_PKRR
    IGNORED = _mscl.NmeaMessageFormat_IGNORED
    GNSS = _mscl.NmeaMessageFormat_GNSS
    GPS = _mscl.NmeaMessageFormat_GPS
    GALILEO = _mscl.NmeaMessageFormat_GALILEO
    GLONASS = _mscl.NmeaMessageFormat_GLONASS

    def __init__(self):
        _mscl.NmeaMessageFormat_swiginit(self, _mscl.new_NmeaMessageFormat())
    __swig_destroy__ = _mscl.delete_NmeaMessageFormat

    def sentenceType(self, *args):
        return _mscl.NmeaMessageFormat_sentenceType(self, *args)

    def talkerId(self, *args):
        return _mscl.NmeaMessageFormat_talkerId(self, *args)

    def sourceDataClass(self, *args):
        return _mscl.NmeaMessageFormat_sourceDataClass(self, *args)

    def sampleRate(self, *args):
        return _mscl.NmeaMessageFormat_sampleRate(self, *args)

    @staticmethod
    def talkerIdRequired(sentenceType):
        return _mscl.NmeaMessageFormat_talkerIdRequired(sentenceType)

    @staticmethod
    def dataClassSupported(dataClass, sentenceType):
        return _mscl.NmeaMessageFormat_dataClassSupported(dataClass, sentenceType)

    @staticmethod
    def toCommandParameters(nmeaFormats):
        return _mscl.NmeaMessageFormat_toCommandParameters(nmeaFormats)

# Register NmeaMessageFormat in _mscl:
_mscl.NmeaMessageFormat_swigregister(NmeaMessageFormat)
NmeaMessageFormat.MAX_FREQUENCY = _mscl.cvar.NmeaMessageFormat_MAX_FREQUENCY

def NmeaMessageFormat_talkerIdRequired(sentenceType):
    return _mscl.NmeaMessageFormat_talkerIdRequired(sentenceType)

def NmeaMessageFormat_dataClassSupported(dataClass, sentenceType):
    return _mscl.NmeaMessageFormat_dataClassSupported(dataClass, sentenceType)

def NmeaMessageFormat_toCommandParameters(nmeaFormats):
    return _mscl.NmeaMessageFormat_toCommandParameters(nmeaFormats)

class Matrix_3x3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Matrix_3x3_swiginit(self, _mscl.new_Matrix_3x3(*args))
    __swig_destroy__ = _mscl.delete_Matrix_3x3

    def set(self, row, col, value):
        return _mscl.Matrix_3x3_set(self, row, col, value)

    def at(self, row, col):
        return _mscl.Matrix_3x3_at(self, row, col)

    def __str__(self):
        return _mscl.Matrix_3x3___str__(self)

    def asMipFieldValues(self):
        return _mscl.Matrix_3x3_asMipFieldValues(self)

# Register Matrix_3x3 in _mscl:
_mscl.Matrix_3x3_swigregister(Matrix_3x3)

class Quaternion(Matrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Quaternion_swiginit(self, _mscl.new_Quaternion(*args))

    def at(self, index):
        return _mscl.Quaternion_at(self, index)

    def set(self, index, val):
        return _mscl.Quaternion_set(self, index, val)

    def normalize(self):
        return _mscl.Quaternion_normalize(self)

    def asMipFieldValues(self):
        return _mscl.Quaternion_asMipFieldValues(self)
    __swig_destroy__ = _mscl.delete_Quaternion

# Register Quaternion in _mscl:
_mscl.Quaternion_swigregister(Quaternion)

ECEF = _mscl.ECEF
LLH_NED = _mscl.LLH_NED
class GeometricVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def VectorECEF(x_init, y_init, z_init):
        return _mscl.GeometricVector_VectorECEF(x_init, y_init, z_init)

    @staticmethod
    def VectorNED(north, east, down):
        return _mscl.GeometricVector_VectorNED(north, east, down)

    def __init__(self, *args):
        _mscl.GeometricVector_swiginit(self, _mscl.new_GeometricVector(*args))
    __swig_destroy__ = _mscl.delete_GeometricVector
    referenceFrame = property(_mscl.GeometricVector_referenceFrame_get, _mscl.GeometricVector_referenceFrame_set)

    def x(self, *args):
        return _mscl.GeometricVector_x(self, *args)

    def y(self, *args):
        return _mscl.GeometricVector_y(self, *args)

    def z(self, *args):
        return _mscl.GeometricVector_z(self, *args)

    def north(self, *args):
        return _mscl.GeometricVector_north(self, *args)

    def east(self, *args):
        return _mscl.GeometricVector_east(self, *args)

    def down(self, *args):
        return _mscl.GeometricVector_down(self, *args)

# Register GeometricVector in _mscl:
_mscl.GeometricVector_swigregister(GeometricVector)

def GeometricVector_VectorECEF(x_init, y_init, z_init):
    return _mscl.GeometricVector_VectorECEF(x_init, y_init, z_init)

def GeometricVector_VectorNED(north, east, down):
    return _mscl.GeometricVector_VectorNED(north, east, down)

class Position(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def PositionLLH(lat_init, long_init, alt_init):
        return _mscl.Position_PositionLLH(lat_init, long_init, alt_init)

    @staticmethod
    def PositionECEF(x_init, y_init, z_init):
        return _mscl.Position_PositionECEF(x_init, y_init, z_init)

    def __init__(self, *args):
        _mscl.Position_swiginit(self, _mscl.new_Position(*args))
    __swig_destroy__ = _mscl.delete_Position
    referenceFrame = property(_mscl.Position_referenceFrame_get, _mscl.Position_referenceFrame_set)

    def latitude(self, *args):
        return _mscl.Position_latitude(self, *args)

    def longitude(self, *args):
        return _mscl.Position_longitude(self, *args)

    def altitude(self, *args):
        return _mscl.Position_altitude(self, *args)

    def x(self, *args):
        return _mscl.Position_x(self, *args)

    def y(self, *args):
        return _mscl.Position_y(self, *args)

    def z(self, *args):
        return _mscl.Position_z(self, *args)

# Register Position in _mscl:
_mscl.Position_swigregister(Position)

def Position_PositionLLH(lat_init, long_init, alt_init):
    return _mscl.Position_PositionLLH(lat_init, long_init, alt_init)

def Position_PositionECEF(x_init, y_init, z_init):
    return _mscl.Position_PositionECEF(x_init, y_init, z_init)

class TimeUpdate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, timeOfWeek, weekNumber, timeAccuracy=0):
        _mscl.TimeUpdate_swiginit(self, _mscl.new_TimeUpdate(timeOfWeek, weekNumber, timeAccuracy))
    __swig_destroy__ = _mscl.delete_TimeUpdate

    def timeOfWeek(self):
        return _mscl.TimeUpdate_timeOfWeek(self)

    def weekNumber(self):
        return _mscl.TimeUpdate_weekNumber(self)

    def timeAccuracy(self):
        return _mscl.TimeUpdate_timeAccuracy(self)

# Register TimeUpdate in _mscl:
_mscl.TimeUpdate_swigregister(TimeUpdate)

class ZUPTSettingsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, enable, threshold):
        _mscl.ZUPTSettingsData_swiginit(self, _mscl.new_ZUPTSettingsData(enable, threshold))
    enabled = property(_mscl.ZUPTSettingsData_enabled_get, _mscl.ZUPTSettingsData_enabled_set)
    threshold = property(_mscl.ZUPTSettingsData_threshold_get, _mscl.ZUPTSettingsData_threshold_set)
    __swig_destroy__ = _mscl.delete_ZUPTSettingsData

# Register ZUPTSettingsData in _mscl:
_mscl.ZUPTSettingsData_swigregister(ZUPTSettingsData)

class FixedReferencePositionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.FixedReferencePositionData_swiginit(self, _mscl.new_FixedReferencePositionData(*args))
    enable = property(_mscl.FixedReferencePositionData_enable_get, _mscl.FixedReferencePositionData_enable_set)
    referencePosition = property(_mscl.FixedReferencePositionData_referencePosition_get, _mscl.FixedReferencePositionData_referencePosition_set)
    __swig_destroy__ = _mscl.delete_FixedReferencePositionData

# Register FixedReferencePositionData in _mscl:
_mscl.FixedReferencePositionData_swigregister(FixedReferencePositionData)

class SBASSettingsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    enableSBAS = property(_mscl.SBASSettingsData_enableSBAS_get, _mscl.SBASSettingsData_enableSBAS_set)
    enableRanging = property(_mscl.SBASSettingsData_enableRanging_get, _mscl.SBASSettingsData_enableRanging_set)
    enableCorrectionData = property(_mscl.SBASSettingsData_enableCorrectionData_get, _mscl.SBASSettingsData_enableCorrectionData_set)
    applyIntegrityInfo = property(_mscl.SBASSettingsData_applyIntegrityInfo_get, _mscl.SBASSettingsData_applyIntegrityInfo_set)
    satellitePRNs = property(_mscl.SBASSettingsData_satellitePRNs_get, _mscl.SBASSettingsData_satellitePRNs_set)

    def __init__(self):
        _mscl.SBASSettingsData_swiginit(self, _mscl.new_SBASSettingsData())
    __swig_destroy__ = _mscl.delete_SBASSettingsData

# Register SBASSettingsData in _mscl:
_mscl.SBASSettingsData_swigregister(SBASSettingsData)

class Constellation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    constellationID = property(_mscl.Constellation_constellationID_get, _mscl.Constellation_constellationID_set)
    enabled = property(_mscl.Constellation_enabled_get, _mscl.Constellation_enabled_set)
    reservedChannelCount = property(_mscl.Constellation_reservedChannelCount_get, _mscl.Constellation_reservedChannelCount_set)
    maxChannels = property(_mscl.Constellation_maxChannels_get, _mscl.Constellation_maxChannels_set)
    enableL1SAIF = property(_mscl.Constellation_enableL1SAIF_get, _mscl.Constellation_enableL1SAIF_set)

    def __init__(self):
        _mscl.Constellation_swiginit(self, _mscl.new_Constellation())
    __swig_destroy__ = _mscl.delete_Constellation

# Register Constellation in _mscl:
_mscl.Constellation_swigregister(Constellation)

class ConstellationSettingsData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    maxChannelsAvailable = property(_mscl.ConstellationSettingsData_maxChannelsAvailable_get, _mscl.ConstellationSettingsData_maxChannelsAvailable_set)
    maxChannelsToUse = property(_mscl.ConstellationSettingsData_maxChannelsToUse_get, _mscl.ConstellationSettingsData_maxChannelsToUse_set)
    constellations = property(_mscl.ConstellationSettingsData_constellations_get, _mscl.ConstellationSettingsData_constellations_set)

    def __init__(self):
        _mscl.ConstellationSettingsData_swiginit(self, _mscl.new_ConstellationSettingsData())
    __swig_destroy__ = _mscl.delete_ConstellationSettingsData

# Register ConstellationSettingsData in _mscl:
_mscl.ConstellationSettingsData_swigregister(ConstellationSettingsData)

class LowPassFilterData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SET_TO_HALF_REPORTING_RATE = _mscl.LowPassFilterData_SET_TO_HALF_REPORTING_RATE
    USER_SPECIFIED_CUTOFF_FREQ = _mscl.LowPassFilterData_USER_SPECIFIED_CUTOFF_FREQ

    def __init__(self, *args):
        _mscl.LowPassFilterData_swiginit(self, _mscl.new_LowPassFilterData(*args))
    dataDescriptor = property(_mscl.LowPassFilterData_dataDescriptor_get, _mscl.LowPassFilterData_dataDescriptor_set)
    manualFilterBandwidthConfig = property(_mscl.LowPassFilterData_manualFilterBandwidthConfig_get, _mscl.LowPassFilterData_manualFilterBandwidthConfig_set)
    applyLowPassFilter = property(_mscl.LowPassFilterData_applyLowPassFilter_get, _mscl.LowPassFilterData_applyLowPassFilter_set)
    cutoffFrequency = property(_mscl.LowPassFilterData_cutoffFrequency_get, _mscl.LowPassFilterData_cutoffFrequency_set)

    @staticmethod
    def getDataDescriptorForCommand(descriptor):
        return _mscl.LowPassFilterData_getDataDescriptorForCommand(descriptor)

    @staticmethod
    def getDataDescriptorFromUint8(descriptor):
        return _mscl.LowPassFilterData_getDataDescriptorFromUint8(descriptor)
    __swig_destroy__ = _mscl.delete_LowPassFilterData

# Register LowPassFilterData in _mscl:
_mscl.LowPassFilterData_swigregister(LowPassFilterData)

def LowPassFilterData_getDataDescriptorForCommand(descriptor):
    return _mscl.LowPassFilterData_getDataDescriptorForCommand(descriptor)

def LowPassFilterData_getDataDescriptorFromUint8(descriptor):
    return _mscl.LowPassFilterData_getDataDescriptorFromUint8(descriptor)

class ComplementaryFilterData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.ComplementaryFilterData_swiginit(self, _mscl.new_ComplementaryFilterData())
    upCompensationEnabled = property(_mscl.ComplementaryFilterData_upCompensationEnabled_get, _mscl.ComplementaryFilterData_upCompensationEnabled_set)
    upCompensationTimeInSeconds = property(_mscl.ComplementaryFilterData_upCompensationTimeInSeconds_get, _mscl.ComplementaryFilterData_upCompensationTimeInSeconds_set)
    northCompensationEnabled = property(_mscl.ComplementaryFilterData_northCompensationEnabled_get, _mscl.ComplementaryFilterData_northCompensationEnabled_set)
    northCompensationTimeInSeconds = property(_mscl.ComplementaryFilterData_northCompensationTimeInSeconds_get, _mscl.ComplementaryFilterData_northCompensationTimeInSeconds_set)
    __swig_destroy__ = _mscl.delete_ComplementaryFilterData

# Register ComplementaryFilterData in _mscl:
_mscl.ComplementaryFilterData_swigregister(ComplementaryFilterData)

class PpsPulseInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.PpsPulseInfo_swiginit(self, _mscl.new_PpsPulseInfo())
    count = property(_mscl.PpsPulseInfo_count_get, _mscl.PpsPulseInfo_count_set)
    lastTimeinMS = property(_mscl.PpsPulseInfo_lastTimeinMS_get, _mscl.PpsPulseInfo_lastTimeinMS_set)
    __swig_destroy__ = _mscl.delete_PpsPulseInfo

# Register PpsPulseInfo in _mscl:
_mscl.PpsPulseInfo_swigregister(PpsPulseInfo)

class StreamInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.StreamInfo_swiginit(self, _mscl.new_StreamInfo())
    enabled = property(_mscl.StreamInfo_enabled_get, _mscl.StreamInfo_enabled_set)
    outgoingPacketsDropped = property(_mscl.StreamInfo_outgoingPacketsDropped_get, _mscl.StreamInfo_outgoingPacketsDropped_set)
    __swig_destroy__ = _mscl.delete_StreamInfo

# Register StreamInfo in _mscl:
_mscl.StreamInfo_swigregister(StreamInfo)

class DeviceMessageInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.DeviceMessageInfo_swiginit(self, _mscl.new_DeviceMessageInfo())
    messageParsingErrors = property(_mscl.DeviceMessageInfo_messageParsingErrors_get, _mscl.DeviceMessageInfo_messageParsingErrors_set)
    messagesRead = property(_mscl.DeviceMessageInfo_messagesRead_get, _mscl.DeviceMessageInfo_messagesRead_set)
    lastMessageReadinMS = property(_mscl.DeviceMessageInfo_lastMessageReadinMS_get, _mscl.DeviceMessageInfo_lastMessageReadinMS_set)
    __swig_destroy__ = _mscl.delete_DeviceMessageInfo

# Register DeviceMessageInfo in _mscl:
_mscl.DeviceMessageInfo_swigregister(DeviceMessageInfo)

class PortInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.PortInfo_swiginit(self, _mscl.new_PortInfo())
    bytesWritten = property(_mscl.PortInfo_bytesWritten_get, _mscl.PortInfo_bytesWritten_set)
    bytesRead = property(_mscl.PortInfo_bytesRead_get, _mscl.PortInfo_bytesRead_set)
    overrunsOnWrite = property(_mscl.PortInfo_overrunsOnWrite_get, _mscl.PortInfo_overrunsOnWrite_set)
    overrunsOnRead = property(_mscl.PortInfo_overrunsOnRead_get, _mscl.PortInfo_overrunsOnRead_set)
    __swig_destroy__ = _mscl.delete_PortInfo

# Register PortInfo in _mscl:
_mscl.PortInfo_swigregister(PortInfo)

class TemperatureInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.TemperatureInfo_swiginit(self, _mscl.new_TemperatureInfo())
    onBoardTemp = property(_mscl.TemperatureInfo_onBoardTemp_get, _mscl.TemperatureInfo_onBoardTemp_set)
    lastReadInMS = property(_mscl.TemperatureInfo_lastReadInMS_get, _mscl.TemperatureInfo_lastReadInMS_set)
    error = property(_mscl.TemperatureInfo_error_get, _mscl.TemperatureInfo_error_set)
    __swig_destroy__ = _mscl.delete_TemperatureInfo

# Register TemperatureInfo in _mscl:
_mscl.TemperatureInfo_swigregister(TemperatureInfo)

ModelNumber = _mscl.ModelNumber
StatusStructure_Value = _mscl.StatusStructure_Value
SystemState_Value = _mscl.SystemState_Value
gnss1PpsPulseInfo_Count = _mscl.gnss1PpsPulseInfo_Count
gnss1PpsPulseInfo_LastTimeinMS = _mscl.gnss1PpsPulseInfo_LastTimeinMS
GnssPowerStateOn = _mscl.GnssPowerStateOn
ImuStreamInfo_Enabled = _mscl.ImuStreamInfo_Enabled
ImuStreamInfo_PacketsDropped = _mscl.ImuStreamInfo_PacketsDropped
GnssStreamInfo_Enabled = _mscl.GnssStreamInfo_Enabled
GnssStreamInfo_PacketsDropped = _mscl.GnssStreamInfo_PacketsDropped
EstimationFilterStreamInfo_Enabled = _mscl.EstimationFilterStreamInfo_Enabled
EstimationFilterStreamInfo_PacketsDropped = _mscl.EstimationFilterStreamInfo_PacketsDropped
ComPortInfo_BytesRead = _mscl.ComPortInfo_BytesRead
ComPortInfo_BytesWritten = _mscl.ComPortInfo_BytesWritten
ComPortInfo_OverrunsOnRead = _mscl.ComPortInfo_OverrunsOnRead
ComPortInfo_OverrunsOnWrite = _mscl.ComPortInfo_OverrunsOnWrite
ImuMessageInfo_LastMessageReadinMS = _mscl.ImuMessageInfo_LastMessageReadinMS
ImuMessageInfo_MessageParsingErrors = _mscl.ImuMessageInfo_MessageParsingErrors
ImuMessageInfo_MessagesRead = _mscl.ImuMessageInfo_MessagesRead
GnssMessageInfo_LastMessageReadinMS = _mscl.GnssMessageInfo_LastMessageReadinMS
GnssMessageInfo_MessageParsingErrors = _mscl.GnssMessageInfo_MessageParsingErrors
GnssMessageInfo_MessagesRead = _mscl.GnssMessageInfo_MessagesRead
TemperatureInfo_Error = _mscl.TemperatureInfo_Error
TemperatureInfo_LastReadInMS = _mscl.TemperatureInfo_LastReadInMS
TemperatureInfo_OnBoardTemp = _mscl.TemperatureInfo_OnBoardTemp
PowerState = _mscl.PowerState
GyroRange = _mscl.GyroRange
AccelRange = _mscl.AccelRange
HasMagnetometer = _mscl.HasMagnetometer
HasPressure = _mscl.HasPressure
class DeviceStatusData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    BASIC_STATUS_STRUCTURE = _mscl.DeviceStatusData_BASIC_STATUS_STRUCTURE
    DIAGNOSTIC_STATUS_STRUCTURE = _mscl.DeviceStatusData_DIAGNOSTIC_STATUS_STRUCTURE
    SYSTEM_INITIALIZATION = _mscl.DeviceStatusData_SYSTEM_INITIALIZATION
    SYSTEM_STARTUP = _mscl.DeviceStatusData_SYSTEM_STARTUP
    SYSTEM_RUNNING = _mscl.DeviceStatusData_SYSTEM_RUNNING

    def __init__(self):
        _mscl.DeviceStatusData_swiginit(self, _mscl.new_DeviceStatusData())
    modelNumber = property(_mscl.DeviceStatusData_modelNumber_get, _mscl.DeviceStatusData_modelNumber_set)
    statusStructure = property(_mscl.DeviceStatusData_statusStructure_get, _mscl.DeviceStatusData_statusStructure_set)
    systemTimerInMS = property(_mscl.DeviceStatusData_systemTimerInMS_get, _mscl.DeviceStatusData_systemTimerInMS_set)

    def systemState(self, *args):
        return _mscl.DeviceStatusData_systemState(self, *args)

    def gnssPowerStateOn(self, *args):
        return _mscl.DeviceStatusData_gnssPowerStateOn(self, *args)

    def gnss1PpsPulseInfo(self, *args):
        return _mscl.DeviceStatusData_gnss1PpsPulseInfo(self, *args)

    def imuStreamInfo(self, *args):
        return _mscl.DeviceStatusData_imuStreamInfo(self, *args)

    def gnssStreamInfo(self, *args):
        return _mscl.DeviceStatusData_gnssStreamInfo(self, *args)

    def estimationFilterStreamInfo(self, *args):
        return _mscl.DeviceStatusData_estimationFilterStreamInfo(self, *args)

    def imuMessageInfo(self, *args):
        return _mscl.DeviceStatusData_imuMessageInfo(self, *args)

    def gnssMessageInfo(self, *args):
        return _mscl.DeviceStatusData_gnssMessageInfo(self, *args)

    def comPortInfo(self, *args):
        return _mscl.DeviceStatusData_comPortInfo(self, *args)

    def usbPortInfo(self, *args):
        return _mscl.DeviceStatusData_usbPortInfo(self, *args)

    def hasMagnetometer(self, *args):
        return _mscl.DeviceStatusData_hasMagnetometer(self, *args)

    def magnetometerInitializationFailed(self, *args):
        return _mscl.DeviceStatusData_magnetometerInitializationFailed(self, *args)

    def hasPressure(self, *args):
        return _mscl.DeviceStatusData_hasPressure(self, *args)

    def pressureInitializationFailed(self, *args):
        return _mscl.DeviceStatusData_pressureInitializationFailed(self, *args)

    def gnssReceiverInitializationFailed(self, *args):
        return _mscl.DeviceStatusData_gnssReceiverInitializationFailed(self, *args)

    def coldStartOnPowerOn(self, *args):
        return _mscl.DeviceStatusData_coldStartOnPowerOn(self, *args)

    def temperatureInfo(self, *args):
        return _mscl.DeviceStatusData_temperatureInfo(self, *args)

    def powerState(self, *args):
        return _mscl.DeviceStatusData_powerState(self, *args)

    def gyroRange(self, *args):
        return _mscl.DeviceStatusData_gyroRange(self, *args)

    def accelRange(self, *args):
        return _mscl.DeviceStatusData_accelRange(self, *args)

    def asMap(self):
        return _mscl.DeviceStatusData_asMap(self)

    def asValueMap(self):
        return _mscl.DeviceStatusData_asValueMap(self)
    __swig_destroy__ = _mscl.delete_DeviceStatusData

# Register DeviceStatusData in _mscl:
_mscl.DeviceStatusData_swigregister(DeviceStatusData)

class ExternalGNSSUpdateData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    gpsTimeOfWeek = property(_mscl.ExternalGNSSUpdateData_gpsTimeOfWeek_get, _mscl.ExternalGNSSUpdateData_gpsTimeOfWeek_set)
    gpsWeekNumber = property(_mscl.ExternalGNSSUpdateData_gpsWeekNumber_get, _mscl.ExternalGNSSUpdateData_gpsWeekNumber_set)
    lattitude = property(_mscl.ExternalGNSSUpdateData_lattitude_get, _mscl.ExternalGNSSUpdateData_lattitude_set)
    longitude = property(_mscl.ExternalGNSSUpdateData_longitude_get, _mscl.ExternalGNSSUpdateData_longitude_set)
    altitudeAboveWGS84Ellipsoid = property(_mscl.ExternalGNSSUpdateData_altitudeAboveWGS84Ellipsoid_get, _mscl.ExternalGNSSUpdateData_altitudeAboveWGS84Ellipsoid_set)
    northVelocity = property(_mscl.ExternalGNSSUpdateData_northVelocity_get, _mscl.ExternalGNSSUpdateData_northVelocity_set)
    eastVelocity = property(_mscl.ExternalGNSSUpdateData_eastVelocity_get, _mscl.ExternalGNSSUpdateData_eastVelocity_set)
    downVelocity = property(_mscl.ExternalGNSSUpdateData_downVelocity_get, _mscl.ExternalGNSSUpdateData_downVelocity_set)
    northPositionUncertainty = property(_mscl.ExternalGNSSUpdateData_northPositionUncertainty_get, _mscl.ExternalGNSSUpdateData_northPositionUncertainty_set)
    eastPositionUncertainty = property(_mscl.ExternalGNSSUpdateData_eastPositionUncertainty_get, _mscl.ExternalGNSSUpdateData_eastPositionUncertainty_set)
    downPositionUncertainty = property(_mscl.ExternalGNSSUpdateData_downPositionUncertainty_get, _mscl.ExternalGNSSUpdateData_downPositionUncertainty_set)
    northVelocityUncertainty = property(_mscl.ExternalGNSSUpdateData_northVelocityUncertainty_get, _mscl.ExternalGNSSUpdateData_northVelocityUncertainty_set)
    eastVelocityUncertainty = property(_mscl.ExternalGNSSUpdateData_eastVelocityUncertainty_get, _mscl.ExternalGNSSUpdateData_eastVelocityUncertainty_set)
    downVelocityUncertainty = property(_mscl.ExternalGNSSUpdateData_downVelocityUncertainty_get, _mscl.ExternalGNSSUpdateData_downVelocityUncertainty_set)

    def __init__(self):
        _mscl.ExternalGNSSUpdateData_swiginit(self, _mscl.new_ExternalGNSSUpdateData())
    __swig_destroy__ = _mscl.delete_ExternalGNSSUpdateData

# Register ExternalGNSSUpdateData in _mscl:
_mscl.ExternalGNSSUpdateData_swigregister(ExternalGNSSUpdateData)

class HeadingUpdateOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AsOptionId(self):
        return _mscl.HeadingUpdateOptions_AsOptionId(self)

    def __init__(self, *args):
        _mscl.HeadingUpdateOptions_swiginit(self, _mscl.new_HeadingUpdateOptions(*args))
    useInternalMagnetometer = property(_mscl.HeadingUpdateOptions_useInternalMagnetometer_get, _mscl.HeadingUpdateOptions_useInternalMagnetometer_set)
    useInternalGNSSVelocityVector = property(_mscl.HeadingUpdateOptions_useInternalGNSSVelocityVector_get, _mscl.HeadingUpdateOptions_useInternalGNSSVelocityVector_set)
    useExternalHeadingMessages = property(_mscl.HeadingUpdateOptions_useExternalHeadingMessages_get, _mscl.HeadingUpdateOptions_useExternalHeadingMessages_set)
    __swig_destroy__ = _mscl.delete_HeadingUpdateOptions

# Register HeadingUpdateOptions in _mscl:
_mscl.HeadingUpdateOptions_swigregister(HeadingUpdateOptions)

Automatic = _mscl.Automatic
UserSpecified_Heading = _mscl.UserSpecified_Heading
UserSpecified_Attitude = _mscl.UserSpecified_Attitude
UserSpecified_All = _mscl.UserSpecified_All
GNSS_DualAntenna = _mscl.GNSS_DualAntenna
GNSS_Kinematic = _mscl.GNSS_Kinematic
Magnetometer = _mscl.Magnetometer
class HeadingAlignmentMethod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.HeadingAlignmentMethod_swiginit(self, _mscl.new_HeadingAlignmentMethod(*args))
    value = property(_mscl.HeadingAlignmentMethod_value_get, _mscl.HeadingAlignmentMethod_value_set)

    def select(self, option):
        return _mscl.HeadingAlignmentMethod_select(self, option)

    def deselect(self, option):
        return _mscl.HeadingAlignmentMethod_deselect(self, option)

    def selected(self, option):
        return _mscl.HeadingAlignmentMethod_selected(self, option)
    __swig_destroy__ = _mscl.delete_HeadingAlignmentMethod

# Register HeadingAlignmentMethod in _mscl:
_mscl.HeadingAlignmentMethod_swigregister(HeadingAlignmentMethod)

class FilterInitializationValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.FilterInitializationValues_swiginit(self, _mscl.new_FilterInitializationValues())
    autoInitialize = property(_mscl.FilterInitializationValues_autoInitialize_get, _mscl.FilterInitializationValues_autoInitialize_set)
    initialValuesSource = property(_mscl.FilterInitializationValues_initialValuesSource_get, _mscl.FilterInitializationValues_initialValuesSource_set)
    autoHeadingAlignmentMethod = property(_mscl.FilterInitializationValues_autoHeadingAlignmentMethod_get, _mscl.FilterInitializationValues_autoHeadingAlignmentMethod_set)
    initialAttitude = property(_mscl.FilterInitializationValues_initialAttitude_get, _mscl.FilterInitializationValues_initialAttitude_set)
    initialPosition = property(_mscl.FilterInitializationValues_initialPosition_get, _mscl.FilterInitializationValues_initialPosition_set)
    initialVelocity = property(_mscl.FilterInitializationValues_initialVelocity_get, _mscl.FilterInitializationValues_initialVelocity_set)
    referenceFrame = property(_mscl.FilterInitializationValues_referenceFrame_get, _mscl.FilterInitializationValues_referenceFrame_set)

    def manualHeading(self):
        return _mscl.FilterInitializationValues_manualHeading(self)

    def manualAttitude(self):
        return _mscl.FilterInitializationValues_manualAttitude(self)

    def manualPositionVelocity(self):
        return _mscl.FilterInitializationValues_manualPositionVelocity(self)
    __swig_destroy__ = _mscl.delete_FilterInitializationValues

# Register FilterInitializationValues in _mscl:
_mscl.FilterInitializationValues_swigregister(FilterInitializationValues)

class TareAxisValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def asUint8(self):
        return _mscl.TareAxisValues_asUint8(self)

    def __init__(self, tareRollAxis, tarePitchAxis, tareYawAxis):
        _mscl.TareAxisValues_swiginit(self, _mscl.new_TareAxisValues(tareRollAxis, tarePitchAxis, tareYawAxis))
    tareRollAxis = property(_mscl.TareAxisValues_tareRollAxis_get, _mscl.TareAxisValues_tareRollAxis_set)
    tarePitchAxis = property(_mscl.TareAxisValues_tarePitchAxis_get, _mscl.TareAxisValues_tarePitchAxis_set)
    tareYawAxis = property(_mscl.TareAxisValues_tareYawAxis_get, _mscl.TareAxisValues_tareYawAxis_set)
    __swig_destroy__ = _mscl.delete_TareAxisValues

# Register TareAxisValues in _mscl:
_mscl.TareAxisValues_swigregister(TareAxisValues)

class GeographicSourceOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.GeographicSourceOptions_swiginit(self, _mscl.new_GeographicSourceOptions(*args))
    source = property(_mscl.GeographicSourceOptions_source_get, _mscl.GeographicSourceOptions_source_set)
    manual = property(_mscl.GeographicSourceOptions_manual_get, _mscl.GeographicSourceOptions_manual_set)
    __swig_destroy__ = _mscl.delete_GeographicSourceOptions

# Register GeographicSourceOptions in _mscl:
_mscl.GeographicSourceOptions_swigregister(GeographicSourceOptions)

class EstimationControlOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AsUint16(self):
        return _mscl.EstimationControlOptions_AsUint16(self)

    def __init__(self, *args):
        _mscl.EstimationControlOptions_swiginit(self, _mscl.new_EstimationControlOptions(*args))
    enableGyroBiasEstimation = property(_mscl.EstimationControlOptions_enableGyroBiasEstimation_get, _mscl.EstimationControlOptions_enableGyroBiasEstimation_set)
    enableAccelBiasEstimation = property(_mscl.EstimationControlOptions_enableAccelBiasEstimation_get, _mscl.EstimationControlOptions_enableAccelBiasEstimation_set)
    enableGyroScaleFactorEstimation = property(_mscl.EstimationControlOptions_enableGyroScaleFactorEstimation_get, _mscl.EstimationControlOptions_enableGyroScaleFactorEstimation_set)
    enableAccelScaleFactorEstimation = property(_mscl.EstimationControlOptions_enableAccelScaleFactorEstimation_get, _mscl.EstimationControlOptions_enableAccelScaleFactorEstimation_set)
    enableGNSSAntennaOffsetEstimation = property(_mscl.EstimationControlOptions_enableGNSSAntennaOffsetEstimation_get, _mscl.EstimationControlOptions_enableGNSSAntennaOffsetEstimation_set)
    enableHardIronAutoCalibration = property(_mscl.EstimationControlOptions_enableHardIronAutoCalibration_get, _mscl.EstimationControlOptions_enableHardIronAutoCalibration_set)
    enableSoftIronAutoCalibration = property(_mscl.EstimationControlOptions_enableSoftIronAutoCalibration_get, _mscl.EstimationControlOptions_enableSoftIronAutoCalibration_set)
    __swig_destroy__ = _mscl.delete_EstimationControlOptions

# Register EstimationControlOptions in _mscl:
_mscl.EstimationControlOptions_swigregister(EstimationControlOptions)

class HeadingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.HeadingData_swiginit(self, _mscl.new_HeadingData())
    TRUE_HEADING = _mscl.HeadingData_TRUE_HEADING
    MAGNETIC_HEADING = _mscl.HeadingData_MAGNETIC_HEADING
    heading = property(_mscl.HeadingData_heading_get, _mscl.HeadingData_heading_set)
    headingAngle = property(_mscl.HeadingData_headingAngle_get, _mscl.HeadingData_headingAngle_set)
    headingAngleUncertainty = property(_mscl.HeadingData_headingAngleUncertainty_get, _mscl.HeadingData_headingAngleUncertainty_set)
    __swig_destroy__ = _mscl.delete_HeadingData

# Register HeadingData in _mscl:
_mscl.HeadingData_swigregister(HeadingData)

class AdaptiveMeasurementData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.AdaptiveMeasurementData_swiginit(self, _mscl.new_AdaptiveMeasurementData())
    mode = property(_mscl.AdaptiveMeasurementData_mode_get, _mscl.AdaptiveMeasurementData_mode_set)
    lowPassFilterCutoff = property(_mscl.AdaptiveMeasurementData_lowPassFilterCutoff_get, _mscl.AdaptiveMeasurementData_lowPassFilterCutoff_set)
    lowLimit = property(_mscl.AdaptiveMeasurementData_lowLimit_get, _mscl.AdaptiveMeasurementData_lowLimit_set)
    highLimit = property(_mscl.AdaptiveMeasurementData_highLimit_get, _mscl.AdaptiveMeasurementData_highLimit_set)
    lowLimitUncertainty = property(_mscl.AdaptiveMeasurementData_lowLimitUncertainty_get, _mscl.AdaptiveMeasurementData_lowLimitUncertainty_set)
    highLimitUncertainty = property(_mscl.AdaptiveMeasurementData_highLimitUncertainty_get, _mscl.AdaptiveMeasurementData_highLimitUncertainty_set)
    minUncertainty = property(_mscl.AdaptiveMeasurementData_minUncertainty_get, _mscl.AdaptiveMeasurementData_minUncertainty_set)
    __swig_destroy__ = _mscl.delete_AdaptiveMeasurementData

# Register AdaptiveMeasurementData in _mscl:
_mscl.AdaptiveMeasurementData_swigregister(AdaptiveMeasurementData)

class AutoAdaptiveFilterOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.AutoAdaptiveFilterOptions_swiginit(self, _mscl.new_AutoAdaptiveFilterOptions(*args))
    level = property(_mscl.AutoAdaptiveFilterOptions_level_get, _mscl.AutoAdaptiveFilterOptions_level_set)
    timeLimit = property(_mscl.AutoAdaptiveFilterOptions_timeLimit_get, _mscl.AutoAdaptiveFilterOptions_timeLimit_set)
    __swig_destroy__ = _mscl.delete_AutoAdaptiveFilterOptions

# Register AutoAdaptiveFilterOptions in _mscl:
_mscl.AutoAdaptiveFilterOptions_swigregister(AutoAdaptiveFilterOptions)

class SignalConditioningValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ENABLE_ORIENTATION_CALC = _mscl.SignalConditioningValues_ENABLE_ORIENTATION_CALC
    ENABLE_CONING_SCULLING = _mscl.SignalConditioningValues_ENABLE_CONING_SCULLING
    ENABLE_FINITE_SIZE_CORRECTION = _mscl.SignalConditioningValues_ENABLE_FINITE_SIZE_CORRECTION
    DISABLE_MAGNETOMETER = _mscl.SignalConditioningValues_DISABLE_MAGNETOMETER
    DISABLE_NORTH_COMP = _mscl.SignalConditioningValues_DISABLE_NORTH_COMP
    DISABLE_UP_COMP = _mscl.SignalConditioningValues_DISABLE_UP_COMP
    ENABLE_QUATERNION_CALC = _mscl.SignalConditioningValues_ENABLE_QUATERNION_CALC
    HIGH = _mscl.SignalConditioningValues_HIGH
    LOW = _mscl.SignalConditioningValues_LOW
    dataConditioningFlags = property(_mscl.SignalConditioningValues_dataConditioningFlags_get, _mscl.SignalConditioningValues_dataConditioningFlags_set)
    orientationCalcDecimation = property(_mscl.SignalConditioningValues_orientationCalcDecimation_get, _mscl.SignalConditioningValues_orientationCalcDecimation_set)
    accelGyroFilterWidth = property(_mscl.SignalConditioningValues_accelGyroFilterWidth_get, _mscl.SignalConditioningValues_accelGyroFilterWidth_set)
    magFilterWidth = property(_mscl.SignalConditioningValues_magFilterWidth_get, _mscl.SignalConditioningValues_magFilterWidth_set)
    upCompensation = property(_mscl.SignalConditioningValues_upCompensation_get, _mscl.SignalConditioningValues_upCompensation_set)
    northCompensation = property(_mscl.SignalConditioningValues_northCompensation_get, _mscl.SignalConditioningValues_northCompensation_set)
    magBandwidthPower = property(_mscl.SignalConditioningValues_magBandwidthPower_get, _mscl.SignalConditioningValues_magBandwidthPower_set)

    def __init__(self):
        _mscl.SignalConditioningValues_swiginit(self, _mscl.new_SignalConditioningValues())

    def conditioningOptionOn(self, *args):
        return _mscl.SignalConditioningValues_conditioningOptionOn(self, *args)

    def setConditioningOptionOn(self, *args):
        return _mscl.SignalConditioningValues_setConditioningOptionOn(self, *args)

    def setConditioningOptionOff(self, *args):
        return _mscl.SignalConditioningValues_setConditioningOptionOff(self, *args)
    __swig_destroy__ = _mscl.delete_SignalConditioningValues

# Register SignalConditioningValues in _mscl:
_mscl.SignalConditioningValues_swigregister(SignalConditioningValues)

class EnableDisableMeasurements(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ACCELEROMETER_MEASUREMENTS = _mscl.EnableDisableMeasurements_ACCELEROMETER_MEASUREMENTS
    MAGNETOMETER_MEASUREMENTS = _mscl.EnableDisableMeasurements_MAGNETOMETER_MEASUREMENTS

    def __init__(self, *args):
        _mscl.EnableDisableMeasurements_swiginit(self, _mscl.new_EnableDisableMeasurements(*args))
    measurementOptions = property(_mscl.EnableDisableMeasurements_measurementOptions_get, _mscl.EnableDisableMeasurements_measurementOptions_set)

    def optionEnabled(self, *args):
        return _mscl.EnableDisableMeasurements_optionEnabled(self, *args)

    def enableOption(self, *args):
        return _mscl.EnableDisableMeasurements_enableOption(self, *args)

    def disableOption(self, *args):
        return _mscl.EnableDisableMeasurements_disableOption(self, *args)
    __swig_destroy__ = _mscl.delete_EnableDisableMeasurements

# Register EnableDisableMeasurements in _mscl:
_mscl.EnableDisableMeasurements_swigregister(EnableDisableMeasurements)

class RTKDeviceStatusFlags(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MODEM_STATE = _mscl.RTKDeviceStatusFlags_MODEM_STATE
    CONNECTION_TYPE = _mscl.RTKDeviceStatusFlags_CONNECTION_TYPE
    RSSI = _mscl.RTKDeviceStatusFlags_RSSI
    SIGNAL_QUALITY = _mscl.RTKDeviceStatusFlags_SIGNAL_QUALITY
    TOWER_CHANGE_INDICATOR = _mscl.RTKDeviceStatusFlags_TOWER_CHANGE_INDICATOR
    NMEA_TIMEOUT = _mscl.RTKDeviceStatusFlags_NMEA_TIMEOUT
    SERVER_TIMEOUT = _mscl.RTKDeviceStatusFlags_SERVER_TIMEOUT
    RTCM_TIMEOUT = _mscl.RTKDeviceStatusFlags_RTCM_TIMEOUT
    DEVICE_OUT_OF_RANGE = _mscl.RTKDeviceStatusFlags_DEVICE_OUT_OF_RANGE
    CORRECTIONS_UNAVAILABLE = _mscl.RTKDeviceStatusFlags_CORRECTIONS_UNAVAILABLE
    VERSION = _mscl.RTKDeviceStatusFlags_VERSION
    OFF = _mscl.RTKDeviceStatusFlags_OFF
    NO_NETWORK = _mscl.RTKDeviceStatusFlags_NO_NETWORK
    NETWORK_CONNECTED = _mscl.RTKDeviceStatusFlags_NETWORK_CONNECTED
    CONFIGURING_DATA_CONTEXT = _mscl.RTKDeviceStatusFlags_CONFIGURING_DATA_CONTEXT
    ACTIVATING_DATA_CONTEXT = _mscl.RTKDeviceStatusFlags_ACTIVATING_DATA_CONTEXT
    CONFIGURING_SOCKET = _mscl.RTKDeviceStatusFlags_CONFIGURING_SOCKET
    WAITING_ON_SERVER_HANDSHAKE = _mscl.RTKDeviceStatusFlags_WAITING_ON_SERVER_HANDSHAKE
    CONNECTED_AND_IDLE = _mscl.RTKDeviceStatusFlags_CONNECTED_AND_IDLE
    CONNECTED_AND_STREAMING = _mscl.RTKDeviceStatusFlags_CONNECTED_AND_STREAMING
    NO_CONNECTION = _mscl.RTKDeviceStatusFlags_NO_CONNECTION
    CONNECTION_2G = _mscl.RTKDeviceStatusFlags_CONNECTION_2G
    CONNECTION_3G = _mscl.RTKDeviceStatusFlags_CONNECTION_3G
    CONNECTION_4G = _mscl.RTKDeviceStatusFlags_CONNECTION_4G
    CONNECTION_5G = _mscl.RTKDeviceStatusFlags_CONNECTION_5G

    def __init__(self, *args):
        _mscl.RTKDeviceStatusFlags_swiginit(self, _mscl.new_RTKDeviceStatusFlags(*args))

    def version(self):
        return _mscl.RTKDeviceStatusFlags_version(self)

    def modemState(self, *args):
        return _mscl.RTKDeviceStatusFlags_modemState(self, *args)

    def connectionType(self, *args):
        return _mscl.RTKDeviceStatusFlags_connectionType(self, *args)

    def rssi(self, *args):
        return _mscl.RTKDeviceStatusFlags_rssi(self, *args)

    def signalQuality(self, *args):
        return _mscl.RTKDeviceStatusFlags_signalQuality(self, *args)

    def towerChangeIndicator(self, *args):
        return _mscl.RTKDeviceStatusFlags_towerChangeIndicator(self, *args)

    def nmeaTimeout(self, *args):
        return _mscl.RTKDeviceStatusFlags_nmeaTimeout(self, *args)

    def serverTimeout(self, *args):
        return _mscl.RTKDeviceStatusFlags_serverTimeout(self, *args)

    def rtcmTimeout(self, *args):
        return _mscl.RTKDeviceStatusFlags_rtcmTimeout(self, *args)

    def deviceOutOfRange(self, *args):
        return _mscl.RTKDeviceStatusFlags_deviceOutOfRange(self, *args)

    def correctionsUnavailable(self, *args):
        return _mscl.RTKDeviceStatusFlags_correctionsUnavailable(self, *args)
    __swig_destroy__ = _mscl.delete_RTKDeviceStatusFlags

# Register RTKDeviceStatusFlags in _mscl:
_mscl.RTKDeviceStatusFlags_swigregister(RTKDeviceStatusFlags)

class RTKDeviceStatusFlags_v1(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CONTROLLER_STATE = _mscl.RTKDeviceStatusFlags_v1_CONTROLLER_STATE
    PLATFORM_STATE = _mscl.RTKDeviceStatusFlags_v1_PLATFORM_STATE
    CONTROLLER_STATUS_CODE = _mscl.RTKDeviceStatusFlags_v1_CONTROLLER_STATUS_CODE
    PLATFORM_STATUS_CODE = _mscl.RTKDeviceStatusFlags_v1_PLATFORM_STATUS_CODE
    RESET_REASON = _mscl.RTKDeviceStatusFlags_v1_RESET_REASON
    SIGNAL_QUALITY = _mscl.RTKDeviceStatusFlags_v1_SIGNAL_QUALITY
    VERSION = _mscl.RTKDeviceStatusFlags_v1_VERSION
    IDLE = _mscl.RTKDeviceStatusFlags_v1_IDLE
    ACTIVE = _mscl.RTKDeviceStatusFlags_v1_ACTIVE
    MODEM_OFF = _mscl.RTKDeviceStatusFlags_v1_MODEM_OFF
    MODEM_POWERING_ON = _mscl.RTKDeviceStatusFlags_v1_MODEM_POWERING_ON
    MODEM_CONFIGURE = _mscl.RTKDeviceStatusFlags_v1_MODEM_CONFIGURE
    MODEM_POWERING_DOWN = _mscl.RTKDeviceStatusFlags_v1_MODEM_POWERING_DOWN
    MODEM_READY = _mscl.RTKDeviceStatusFlags_v1_MODEM_READY
    MODEM_CONNECTING = _mscl.RTKDeviceStatusFlags_v1_MODEM_CONNECTING
    MODEM_DISCONNECTING = _mscl.RTKDeviceStatusFlags_v1_MODEM_DISCONNECTING
    MODEM_CONNECTED = _mscl.RTKDeviceStatusFlags_v1_MODEM_CONNECTED
    SERVICE_CONNECTING = _mscl.RTKDeviceStatusFlags_v1_SERVICE_CONNECTING
    SERVICE_CONNECTION_FAILED = _mscl.RTKDeviceStatusFlags_v1_SERVICE_CONNECTION_FAILED
    SERVICE_CONNECTION_CANCELED = _mscl.RTKDeviceStatusFlags_v1_SERVICE_CONNECTION_CANCELED
    SERVICE_DISCONNECTING = _mscl.RTKDeviceStatusFlags_v1_SERVICE_DISCONNECTING
    SERVICE_CONNECTED = _mscl.RTKDeviceStatusFlags_v1_SERVICE_CONNECTED
    PLATFORM_ERROR = _mscl.RTKDeviceStatusFlags_v1_PLATFORM_ERROR
    RESET_MODEM = _mscl.RTKDeviceStatusFlags_v1_RESET_MODEM
    CONTROLLER_OK = _mscl.RTKDeviceStatusFlags_v1_CONTROLLER_OK
    WAITING_NMEA = _mscl.RTKDeviceStatusFlags_v1_WAITING_NMEA
    RTK_TIMEOUT = _mscl.RTKDeviceStatusFlags_v1_RTK_TIMEOUT
    RTK_UNAVAILABLE = _mscl.RTKDeviceStatusFlags_v1_RTK_UNAVAILABLE
    CONFIG_INVALID = _mscl.RTKDeviceStatusFlags_v1_CONFIG_INVALID
    PLATFORM_OK = _mscl.RTKDeviceStatusFlags_v1_PLATFORM_OK
    RTK_CONNECTION_DROPPED = _mscl.RTKDeviceStatusFlags_v1_RTK_CONNECTION_DROPPED
    CELL_CONNECTION_DROPPED = _mscl.RTKDeviceStatusFlags_v1_CELL_CONNECTION_DROPPED
    MODEM_ERROR = _mscl.RTKDeviceStatusFlags_v1_MODEM_ERROR
    POWER_ON = _mscl.RTKDeviceStatusFlags_v1_POWER_ON
    UNKNOWN = _mscl.RTKDeviceStatusFlags_v1_UNKNOWN
    SOFT_RESET = _mscl.RTKDeviceStatusFlags_v1_SOFT_RESET
    HARDWARE_ERROR_RESET = _mscl.RTKDeviceStatusFlags_v1_HARDWARE_ERROR_RESET

    def __init__(self, *args):
        _mscl.RTKDeviceStatusFlags_v1_swiginit(self, _mscl.new_RTKDeviceStatusFlags_v1(*args))

    def version(self):
        return _mscl.RTKDeviceStatusFlags_v1_version(self)

    def controllerState(self, *args):
        return _mscl.RTKDeviceStatusFlags_v1_controllerState(self, *args)

    def platformState(self, *args):
        return _mscl.RTKDeviceStatusFlags_v1_platformState(self, *args)

    def controllerStatusCode(self, *args):
        return _mscl.RTKDeviceStatusFlags_v1_controllerStatusCode(self, *args)

    def platformStatusCode(self, *args):
        return _mscl.RTKDeviceStatusFlags_v1_platformStatusCode(self, *args)

    def resetReason(self, *args):
        return _mscl.RTKDeviceStatusFlags_v1_resetReason(self, *args)

    def signalQuality(self, *args):
        return _mscl.RTKDeviceStatusFlags_v1_signalQuality(self, *args)
    __swig_destroy__ = _mscl.delete_RTKDeviceStatusFlags_v1

# Register RTKDeviceStatusFlags_v1 in _mscl:
_mscl.RTKDeviceStatusFlags_v1_swigregister(RTKDeviceStatusFlags_v1)

class GnssSignalConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    L1CA = _mscl.GnssSignalConfiguration_L1CA
    L2C = _mscl.GnssSignalConfiguration_L2C
    L1OF = _mscl.GnssSignalConfiguration_L1OF
    L2OF = _mscl.GnssSignalConfiguration_L2OF
    E1 = _mscl.GnssSignalConfiguration_E1
    E5B = _mscl.GnssSignalConfiguration_E5B
    B1 = _mscl.GnssSignalConfiguration_B1
    B2 = _mscl.GnssSignalConfiguration_B2

    def __init__(self):
        _mscl.GnssSignalConfiguration_swiginit(self, _mscl.new_GnssSignalConfiguration())

    def enableGpsSignal(self, signal, enable=True):
        return _mscl.GnssSignalConfiguration_enableGpsSignal(self, signal, enable)

    def gpsSignalEnabled(self, signal):
        return _mscl.GnssSignalConfiguration_gpsSignalEnabled(self, signal)

    def gpsSignalValue(self, *args):
        return _mscl.GnssSignalConfiguration_gpsSignalValue(self, *args)

    def enableGlonassSignal(self, signal, enable=True):
        return _mscl.GnssSignalConfiguration_enableGlonassSignal(self, signal, enable)

    def glonassSignalEnabled(self, signal):
        return _mscl.GnssSignalConfiguration_glonassSignalEnabled(self, signal)

    def glonassSignalValue(self, *args):
        return _mscl.GnssSignalConfiguration_glonassSignalValue(self, *args)

    def enableGalileoSignal(self, signal, enable=True):
        return _mscl.GnssSignalConfiguration_enableGalileoSignal(self, signal, enable)

    def galileoSignalEnabled(self, signal):
        return _mscl.GnssSignalConfiguration_galileoSignalEnabled(self, signal)

    def galileoSignalValue(self, *args):
        return _mscl.GnssSignalConfiguration_galileoSignalValue(self, *args)

    def enableBeiDouSignal(self, signal, enable=True):
        return _mscl.GnssSignalConfiguration_enableBeiDouSignal(self, signal, enable)

    def beidouSignalEnabled(self, signal):
        return _mscl.GnssSignalConfiguration_beidouSignalEnabled(self, signal)

    def beidouSignalValue(self, *args):
        return _mscl.GnssSignalConfiguration_beidouSignalValue(self, *args)
    __swig_destroy__ = _mscl.delete_GnssSignalConfiguration

# Register GnssSignalConfiguration in _mscl:
_mscl.GnssSignalConfiguration_swigregister(GnssSignalConfiguration)

class PositionReferenceConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    autoConfig = property(_mscl.PositionReferenceConfiguration_autoConfig_get, _mscl.PositionReferenceConfiguration_autoConfig_set)
    position = property(_mscl.PositionReferenceConfiguration_position_get, _mscl.PositionReferenceConfiguration_position_set)

    def __init__(self):
        _mscl.PositionReferenceConfiguration_swiginit(self, _mscl.new_PositionReferenceConfiguration())
    __swig_destroy__ = _mscl.delete_PositionReferenceConfiguration

# Register PositionReferenceConfiguration in _mscl:
_mscl.PositionReferenceConfiguration_swigregister(PositionReferenceConfiguration)

class AntennaLeverArmCalConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    enabled = property(_mscl.AntennaLeverArmCalConfiguration_enabled_get, _mscl.AntennaLeverArmCalConfiguration_enabled_set)
    maxOffsetError = property(_mscl.AntennaLeverArmCalConfiguration_maxOffsetError_get, _mscl.AntennaLeverArmCalConfiguration_maxOffsetError_set)

    def __init__(self):
        _mscl.AntennaLeverArmCalConfiguration_swiginit(self, _mscl.new_AntennaLeverArmCalConfiguration())
    __swig_destroy__ = _mscl.delete_AntennaLeverArmCalConfiguration

# Register AntennaLeverArmCalConfiguration in _mscl:
_mscl.AntennaLeverArmCalConfiguration_swigregister(AntennaLeverArmCalConfiguration)

class OdometerConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DISABLED = _mscl.OdometerConfiguration_DISABLED
    SINGLE = _mscl.OdometerConfiguration_SINGLE
    QUADRATURE = _mscl.OdometerConfiguration_QUADRATURE

    def __init__(self):
        _mscl.OdometerConfiguration_swiginit(self, _mscl.new_OdometerConfiguration())

    def mode(self, *args):
        return _mscl.OdometerConfiguration_mode(self, *args)

    def uncertainty(self, *args):
        return _mscl.OdometerConfiguration_uncertainty(self, *args)

    def scaling(self, *args):
        return _mscl.OdometerConfiguration_scaling(self, *args)
    __swig_destroy__ = _mscl.delete_OdometerConfiguration

# Register OdometerConfiguration in _mscl:
_mscl.OdometerConfiguration_swigregister(OdometerConfiguration)

class GpioConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UNUSED_FEATURE = _mscl.GpioConfiguration_UNUSED_FEATURE
    GPIO_FEATURE = _mscl.GpioConfiguration_GPIO_FEATURE
    PPS_FEATURE = _mscl.GpioConfiguration_PPS_FEATURE
    ENCODER_FEATURE = _mscl.GpioConfiguration_ENCODER_FEATURE
    EVENT_TIMESTAMP_FEATURE = _mscl.GpioConfiguration_EVENT_TIMESTAMP_FEATURE
    UNUSED_BEHAVIOR = _mscl.GpioConfiguration_UNUSED_BEHAVIOR
    GPIO_INPUT_BEHAVIOR = _mscl.GpioConfiguration_GPIO_INPUT_BEHAVIOR
    GPIO_OUTPUT_LOW_BEHAVIOR = _mscl.GpioConfiguration_GPIO_OUTPUT_LOW_BEHAVIOR
    GPIO_OUTPUT_HIGH_BEHAVIOR = _mscl.GpioConfiguration_GPIO_OUTPUT_HIGH_BEHAVIOR
    PPS_UNUSED = _mscl.GpioConfiguration_PPS_UNUSED
    PPS_INPUT = _mscl.GpioConfiguration_PPS_INPUT
    PPS_OUTPUT = _mscl.GpioConfiguration_PPS_OUTPUT
    ENCODER_UNUSED = _mscl.GpioConfiguration_ENCODER_UNUSED
    ENCODER_A = _mscl.GpioConfiguration_ENCODER_A
    ENCODER_B = _mscl.GpioConfiguration_ENCODER_B
    EVENT_TIMESTAMP_UNUSED = _mscl.GpioConfiguration_EVENT_TIMESTAMP_UNUSED
    EVENT_TIMESTAMP_RISING = _mscl.GpioConfiguration_EVENT_TIMESTAMP_RISING
    EVENT_TIMESTAMP_FALLING = _mscl.GpioConfiguration_EVENT_TIMESTAMP_FALLING
    EVENT_TIMESTAMP_EDGE = _mscl.GpioConfiguration_EVENT_TIMESTAMP_EDGE
    OPEN_DRAIN = _mscl.GpioConfiguration_OPEN_DRAIN
    PULLDOWN = _mscl.GpioConfiguration_PULLDOWN
    PULLUP = _mscl.GpioConfiguration_PULLUP
    pinMode = property(_mscl.GpioConfiguration_pinMode_get, _mscl.GpioConfiguration_pinMode_set)
    pin = property(_mscl.GpioConfiguration_pin_get, _mscl.GpioConfiguration_pin_set)
    feature = property(_mscl.GpioConfiguration_feature_get, _mscl.GpioConfiguration_feature_set)
    behavior = property(_mscl.GpioConfiguration_behavior_get, _mscl.GpioConfiguration_behavior_set)

    def pinModeValue(self, *args):
        return _mscl.GpioConfiguration_pinModeValue(self, *args)

    def __init__(self):
        _mscl.GpioConfiguration_swiginit(self, _mscl.new_GpioConfiguration())
    __swig_destroy__ = _mscl.delete_GpioConfiguration

# Register GpioConfiguration in _mscl:
_mscl.GpioConfiguration_swigregister(GpioConfiguration)

DISABLED = _mscl.DISABLED
ENABLED = _mscl.ENABLED
TEST = _mscl.TEST
TEST_PULSE = _mscl.TEST_PULSE
class EventTriggerGpioParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DISABLED = _mscl.EventTriggerGpioParameter_DISABLED
    WHILE_HIGH = _mscl.EventTriggerGpioParameter_WHILE_HIGH
    WHILE_LOW = _mscl.EventTriggerGpioParameter_WHILE_LOW
    EDGE = _mscl.EventTriggerGpioParameter_EDGE
    pin = property(_mscl.EventTriggerGpioParameter_pin_get, _mscl.EventTriggerGpioParameter_pin_set)
    mode = property(_mscl.EventTriggerGpioParameter_mode_get, _mscl.EventTriggerGpioParameter_mode_set)

    def __init__(self):
        _mscl.EventTriggerGpioParameter_swiginit(self, _mscl.new_EventTriggerGpioParameter())
    __swig_destroy__ = _mscl.delete_EventTriggerGpioParameter

# Register EventTriggerGpioParameter in _mscl:
_mscl.EventTriggerGpioParameter_swigregister(EventTriggerGpioParameter)

class EventTriggerThresholdParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WINDOW_TYPE = _mscl.EventTriggerThresholdParameter_WINDOW_TYPE
    INTERVAL_TYPE = _mscl.EventTriggerThresholdParameter_INTERVAL_TYPE
    type = property(_mscl.EventTriggerThresholdParameter_type_get, _mscl.EventTriggerThresholdParameter_type_set)
    lowThreshold = property(_mscl.EventTriggerThresholdParameter_lowThreshold_get, _mscl.EventTriggerThresholdParameter_lowThreshold_set)
    highThreshold = property(_mscl.EventTriggerThresholdParameter_highThreshold_get, _mscl.EventTriggerThresholdParameter_highThreshold_set)

    def channel(self, *args):
        return _mscl.EventTriggerThresholdParameter_channel(self, *args)

    def channelField(self):
        return _mscl.EventTriggerThresholdParameter_channelField(self)

    def channelQualifier(self):
        return _mscl.EventTriggerThresholdParameter_channelQualifier(self)

    def channelIndex(self):
        return _mscl.EventTriggerThresholdParameter_channelIndex(self)

    def __init__(self):
        _mscl.EventTriggerThresholdParameter_swiginit(self, _mscl.new_EventTriggerThresholdParameter())
    __swig_destroy__ = _mscl.delete_EventTriggerThresholdParameter

# Register EventTriggerThresholdParameter in _mscl:
_mscl.EventTriggerThresholdParameter_swigregister(EventTriggerThresholdParameter)

class EventTriggerCombinationParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MAX_INPUT_TRIGGERS = _mscl.EventTriggerCombinationParameter_MAX_INPUT_TRIGGERS
    LOGIC_NEVER = _mscl.EventTriggerCombinationParameter_LOGIC_NEVER
    LOGIC_ALWAYS = _mscl.EventTriggerCombinationParameter_LOGIC_ALWAYS
    LOGIC_NONE = _mscl.EventTriggerCombinationParameter_LOGIC_NONE
    LOGIC_OR = _mscl.EventTriggerCombinationParameter_LOGIC_OR
    LOGIC_NAND = _mscl.EventTriggerCombinationParameter_LOGIC_NAND
    LOGIC_XOR_ONE = _mscl.EventTriggerCombinationParameter_LOGIC_XOR_ONE
    LOGIC_ONLY_A = _mscl.EventTriggerCombinationParameter_LOGIC_ONLY_A
    LOGIC_ONLY_B = _mscl.EventTriggerCombinationParameter_LOGIC_ONLY_B
    LOGIC_ONLY_C = _mscl.EventTriggerCombinationParameter_LOGIC_ONLY_C
    LOGIC_ONLY_D = _mscl.EventTriggerCombinationParameter_LOGIC_ONLY_D
    LOGIC_AND_AB = _mscl.EventTriggerCombinationParameter_LOGIC_AND_AB
    LOGIC_AB_OR_C = _mscl.EventTriggerCombinationParameter_LOGIC_AB_OR_C
    LOGIC_AND = _mscl.EventTriggerCombinationParameter_LOGIC_AND
    logicTable = property(_mscl.EventTriggerCombinationParameter_logicTable_get, _mscl.EventTriggerCombinationParameter_logicTable_set)
    inputTriggers = property(_mscl.EventTriggerCombinationParameter_inputTriggers_get, _mscl.EventTriggerCombinationParameter_inputTriggers_set)

    def __init__(self):
        _mscl.EventTriggerCombinationParameter_swiginit(self, _mscl.new_EventTriggerCombinationParameter())
    __swig_destroy__ = _mscl.delete_EventTriggerCombinationParameter

# Register EventTriggerCombinationParameter in _mscl:
_mscl.EventTriggerCombinationParameter_swigregister(EventTriggerCombinationParameter)

class EventTriggerParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.EventTriggerParameters_swiginit(self, _mscl.new_EventTriggerParameters())
    gpio = property(_mscl.EventTriggerParameters_gpio_get, _mscl.EventTriggerParameters_gpio_set)
    threshold = property(_mscl.EventTriggerParameters_threshold_get, _mscl.EventTriggerParameters_threshold_set)
    combination = property(_mscl.EventTriggerParameters_combination_get, _mscl.EventTriggerParameters_combination_set)
    __swig_destroy__ = _mscl.delete_EventTriggerParameters

# Register EventTriggerParameters in _mscl:
_mscl.EventTriggerParameters_swigregister(EventTriggerParameters)

class EventTriggerConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NONE = _mscl.EventTriggerConfiguration_NONE
    GPIO_TRIGGER = _mscl.EventTriggerConfiguration_GPIO_TRIGGER
    THRESHOLD_TRIGGER = _mscl.EventTriggerConfiguration_THRESHOLD_TRIGGER
    COMBINATION_TRIGGER = _mscl.EventTriggerConfiguration_COMBINATION_TRIGGER
    instance = property(_mscl.EventTriggerConfiguration_instance_get, _mscl.EventTriggerConfiguration_instance_set)
    trigger = property(_mscl.EventTriggerConfiguration_trigger_get, _mscl.EventTriggerConfiguration_trigger_set)
    parameters = property(_mscl.EventTriggerConfiguration_parameters_get, _mscl.EventTriggerConfiguration_parameters_set)

    def __init__(self):
        _mscl.EventTriggerConfiguration_swiginit(self, _mscl.new_EventTriggerConfiguration())
    __swig_destroy__ = _mscl.delete_EventTriggerConfiguration

# Register EventTriggerConfiguration in _mscl:
_mscl.EventTriggerConfiguration_swigregister(EventTriggerConfiguration)

class EventActionGpioParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DISABLED = _mscl.EventActionGpioParameter_DISABLED
    ACTIVE_HIGH = _mscl.EventActionGpioParameter_ACTIVE_HIGH
    ACTIVE_LOW = _mscl.EventActionGpioParameter_ACTIVE_LOW
    ONESHOT_HIGH = _mscl.EventActionGpioParameter_ONESHOT_HIGH
    ONESHOT_LOW = _mscl.EventActionGpioParameter_ONESHOT_LOW
    TOGGLE = _mscl.EventActionGpioParameter_TOGGLE
    pin = property(_mscl.EventActionGpioParameter_pin_get, _mscl.EventActionGpioParameter_pin_set)
    mode = property(_mscl.EventActionGpioParameter_mode_get, _mscl.EventActionGpioParameter_mode_set)

    def __init__(self):
        _mscl.EventActionGpioParameter_swiginit(self, _mscl.new_EventActionGpioParameter())
    __swig_destroy__ = _mscl.delete_EventActionGpioParameter

# Register EventActionGpioParameter in _mscl:
_mscl.EventActionGpioParameter_swigregister(EventActionGpioParameter)

class EventActionMessageParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MAX_DESCRIPTORS = _mscl.EventActionMessageParameter_MAX_DESCRIPTORS
    sampleRate = property(_mscl.EventActionMessageParameter_sampleRate_get, _mscl.EventActionMessageParameter_sampleRate_set)

    def dataClass(self):
        return _mscl.EventActionMessageParameter_dataClass(self)

    def setChannelFields(self, dataClass, fields):
        return _mscl.EventActionMessageParameter_setChannelFields(self, dataClass, fields)

    def getChannelFields(self):
        return _mscl.EventActionMessageParameter_getChannelFields(self)

    def __init__(self):
        _mscl.EventActionMessageParameter_swiginit(self, _mscl.new_EventActionMessageParameter())
    __swig_destroy__ = _mscl.delete_EventActionMessageParameter

# Register EventActionMessageParameter in _mscl:
_mscl.EventActionMessageParameter_swigregister(EventActionMessageParameter)

class EventActionParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.EventActionParameters_swiginit(self, _mscl.new_EventActionParameters())
    gpio = property(_mscl.EventActionParameters_gpio_get, _mscl.EventActionParameters_gpio_set)
    message = property(_mscl.EventActionParameters_message_get, _mscl.EventActionParameters_message_set)
    __swig_destroy__ = _mscl.delete_EventActionParameters

# Register EventActionParameters in _mscl:
_mscl.EventActionParameters_swigregister(EventActionParameters)

class EventActionConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NONE = _mscl.EventActionConfiguration_NONE
    GPIO = _mscl.EventActionConfiguration_GPIO
    MESSAGE = _mscl.EventActionConfiguration_MESSAGE
    instance = property(_mscl.EventActionConfiguration_instance_get, _mscl.EventActionConfiguration_instance_set)
    trigger = property(_mscl.EventActionConfiguration_trigger_get, _mscl.EventActionConfiguration_trigger_set)
    type = property(_mscl.EventActionConfiguration_type_get, _mscl.EventActionConfiguration_type_set)
    parameters = property(_mscl.EventActionConfiguration_parameters_get, _mscl.EventActionConfiguration_parameters_set)

    def __init__(self):
        _mscl.EventActionConfiguration_swiginit(self, _mscl.new_EventActionConfiguration())
    __swig_destroy__ = _mscl.delete_EventActionConfiguration

# Register EventActionConfiguration in _mscl:
_mscl.EventActionConfiguration_swigregister(EventActionConfiguration)

class EventTriggerInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.EventTriggerInfo_swiginit(self, _mscl.new_EventTriggerInfo(*args))
    ACTIVE = _mscl.EventTriggerInfo_ACTIVE
    ENABLED = _mscl.EventTriggerInfo_ENABLED
    TEST = _mscl.EventTriggerInfo_TEST
    type = property(_mscl.EventTriggerInfo_type_get, _mscl.EventTriggerInfo_type_set)
    instanceId = property(_mscl.EventTriggerInfo_instanceId_get, _mscl.EventTriggerInfo_instanceId_set)

    def isActive(self):
        return _mscl.EventTriggerInfo_isActive(self)

    def isEnabled(self):
        return _mscl.EventTriggerInfo_isEnabled(self)

    def isTestMode(self):
        return _mscl.EventTriggerInfo_isTestMode(self)

    def setStatus(self, value):
        return _mscl.EventTriggerInfo_setStatus(self, value)
    __swig_destroy__ = _mscl.delete_EventTriggerInfo

# Register EventTriggerInfo in _mscl:
_mscl.EventTriggerInfo_swigregister(EventTriggerInfo)

class EventActionInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.EventActionInfo_swiginit(self, _mscl.new_EventActionInfo(*args))
    type = property(_mscl.EventActionInfo_type_get, _mscl.EventActionInfo_type_set)
    triggerId = property(_mscl.EventActionInfo_triggerId_get, _mscl.EventActionInfo_triggerId_set)
    instanceId = property(_mscl.EventActionInfo_instanceId_get, _mscl.EventActionInfo_instanceId_set)
    __swig_destroy__ = _mscl.delete_EventActionInfo

# Register EventActionInfo in _mscl:
_mscl.EventActionInfo_swigregister(EventActionInfo)

class MipChannel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.MipChannel_swiginit(self, _mscl.new_MipChannel(*args))

    def channelField(self):
        return _mscl.MipChannel_channelField(self)

    def sampleRate(self):
        return _mscl.MipChannel_sampleRate(self)

    def rateDecimation(self, sampleRateBase):
        return _mscl.MipChannel_rateDecimation(self, sampleRateBase)
    __swig_destroy__ = _mscl.delete_MipChannel

# Register MipChannel in _mscl:
_mscl.MipChannel_swigregister(MipChannel)

class MipPacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MIP_ACK_NACK_ERROR_NONE = _mscl.MipPacket_MIP_ACK_NACK_ERROR_NONE
    MIP_ACK_NACK_ERROR_UNKNOWN_COMMAND = _mscl.MipPacket_MIP_ACK_NACK_ERROR_UNKNOWN_COMMAND
    MIP_ACK_NACK_ERROR_CHECKSUM_INVALID = _mscl.MipPacket_MIP_ACK_NACK_ERROR_CHECKSUM_INVALID
    MIP_ACK_NACK_ERROR_PARAMETER_INVALID = _mscl.MipPacket_MIP_ACK_NACK_ERROR_PARAMETER_INVALID
    MIP_ACK_NACK_ERROR_COMMAND_FAILED = _mscl.MipPacket_MIP_ACK_NACK_ERROR_COMMAND_FAILED
    MIP_ACK_NACK_ERROR_COMMAND_TIMEOUT = _mscl.MipPacket_MIP_ACK_NACK_ERROR_COMMAND_TIMEOUT
    MIP_ACK_NACK_ERROR_UNKNOWN_DESCRIPTOR_SET = _mscl.MipPacket_MIP_ACK_NACK_ERROR_UNKNOWN_DESCRIPTOR_SET

    def __init__(self):
        _mscl.MipPacket_swiginit(self, _mscl.new_MipPacket())

    @staticmethod
    def isDataPacket(descriptorSet):
        return _mscl.MipPacket_isDataPacket(descriptorSet)

    def descriptorSet(self):
        return _mscl.MipPacket_descriptorSet(self)

    def payload(self):
        return _mscl.MipPacket_payload(self)
    __swig_destroy__ = _mscl.delete_MipPacket

# Register MipPacket in _mscl:
_mscl.MipPacket_swigregister(MipPacket)

def MipPacket_isDataPacket(descriptorSet):
    return _mscl.MipPacket_isDataPacket(descriptorSet)

class MipDataPoint(DataPoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def field(self):
        return _mscl.MipDataPoint_field(self)

    def qualifier(self):
        return _mscl.MipDataPoint_qualifier(self)

    def hasAddlIdentifiers(self):
        return _mscl.MipDataPoint_hasAddlIdentifiers(self)

    def addlIdentifiers(self):
        return _mscl.MipDataPoint_addlIdentifiers(self)

    def hasValidFlag(self):
        return _mscl.MipDataPoint_hasValidFlag(self)

    def valid(self):
        return _mscl.MipDataPoint_valid(self)

    def channelName(self, includeAddlIds=True, consolidatedFormat=False):
        return _mscl.MipDataPoint_channelName(self, includeAddlIds, consolidatedFormat)
    __swig_destroy__ = _mscl.delete_MipDataPoint

# Register MipDataPoint in _mscl:
_mscl.MipDataPoint_swigregister(MipDataPoint)

class ContinuousBIT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def as_MipDataPoints(self):
        return _mscl.ContinuousBIT_as_MipDataPoints(self)

    @staticmethod
    def getMipDataPoints(model, data):
        return _mscl.ContinuousBIT_getMipDataPoints(model, data)
    __swig_destroy__ = _mscl.delete_ContinuousBIT

# Register ContinuousBIT in _mscl:
_mscl.ContinuousBIT_swigregister(ContinuousBIT)

def ContinuousBIT_getMipDataPoints(model, data):
    return _mscl.ContinuousBIT_getMipDataPoints(model, data)

class CV7ContinuousBIT_System_General(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CV7ContinuousBIT_System_General_swiginit(self, _mscl.new_CV7ContinuousBIT_System_General(*args))
    SYSTEM_CLOCK_FAILURE = _mscl.CV7ContinuousBIT_System_General_SYSTEM_CLOCK_FAILURE
    POWER_FAULT = _mscl.CV7ContinuousBIT_System_General_POWER_FAULT
    FIRMWARE_FAULT = _mscl.CV7ContinuousBIT_System_General_FIRMWARE_FAULT
    TIMING_OVERLOAD = _mscl.CV7ContinuousBIT_System_General_TIMING_OVERLOAD
    BUFFER_OVERRUN = _mscl.CV7ContinuousBIT_System_General_BUFFER_OVERRUN

    def flags(self):
        return _mscl.CV7ContinuousBIT_System_General_flags(self)

    def systemClockFailure(self):
        return _mscl.CV7ContinuousBIT_System_General_systemClockFailure(self)

    def powerFault(self):
        return _mscl.CV7ContinuousBIT_System_General_powerFault(self)

    def firmwareFault(self):
        return _mscl.CV7ContinuousBIT_System_General_firmwareFault(self)

    def timingOverload(self):
        return _mscl.CV7ContinuousBIT_System_General_timingOverload(self)

    def bufferOverrun(self):
        return _mscl.CV7ContinuousBIT_System_General_bufferOverrun(self)
    __swig_destroy__ = _mscl.delete_CV7ContinuousBIT_System_General

# Register CV7ContinuousBIT_System_General in _mscl:
_mscl.CV7ContinuousBIT_System_General_swigregister(CV7ContinuousBIT_System_General)

class CV7ContinuousBIT_System_Process(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CV7ContinuousBIT_System_Process_swiginit(self, _mscl.new_CV7ContinuousBIT_System_Process(*args))
    IMU_PROCESS_FAULT = _mscl.CV7ContinuousBIT_System_Process_IMU_PROCESS_FAULT
    IMU_RATE_MISMATCH = _mscl.CV7ContinuousBIT_System_Process_IMU_RATE_MISMATCH
    IMU_DROPPED_DATA = _mscl.CV7ContinuousBIT_System_Process_IMU_DROPPED_DATA
    IMU_STUCK = _mscl.CV7ContinuousBIT_System_Process_IMU_STUCK
    FILTER_PROCESS_FAULT = _mscl.CV7ContinuousBIT_System_Process_FILTER_PROCESS_FAULT
    FILTER_DROPPED_DATA = _mscl.CV7ContinuousBIT_System_Process_FILTER_DROPPED_DATA
    FILTER_RATE_MISMATCH = _mscl.CV7ContinuousBIT_System_Process_FILTER_RATE_MISMATCH
    FILTER_STUCK = _mscl.CV7ContinuousBIT_System_Process_FILTER_STUCK

    def flags(self):
        return _mscl.CV7ContinuousBIT_System_Process_flags(self)

    def imuProcessFault(self):
        return _mscl.CV7ContinuousBIT_System_Process_imuProcessFault(self)

    def imuRateMismatch(self):
        return _mscl.CV7ContinuousBIT_System_Process_imuRateMismatch(self)

    def imuDroppedData(self):
        return _mscl.CV7ContinuousBIT_System_Process_imuDroppedData(self)

    def imuStuck(self):
        return _mscl.CV7ContinuousBIT_System_Process_imuStuck(self)

    def filterProcessFault(self):
        return _mscl.CV7ContinuousBIT_System_Process_filterProcessFault(self)

    def filterDroppedData(self):
        return _mscl.CV7ContinuousBIT_System_Process_filterDroppedData(self)

    def filterRateMismatch(self):
        return _mscl.CV7ContinuousBIT_System_Process_filterRateMismatch(self)

    def filterStuck(self):
        return _mscl.CV7ContinuousBIT_System_Process_filterStuck(self)
    __swig_destroy__ = _mscl.delete_CV7ContinuousBIT_System_Process

# Register CV7ContinuousBIT_System_Process in _mscl:
_mscl.CV7ContinuousBIT_System_Process_swigregister(CV7ContinuousBIT_System_Process)

class CV7ContinuousBIT_System(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CV7ContinuousBIT_System_swiginit(self, _mscl.new_CV7ContinuousBIT_System(*args))
    RESPONSE_OFFSET = _mscl.CV7ContinuousBIT_System_RESPONSE_OFFSET
    GENERAL_FLAGS = _mscl.CV7ContinuousBIT_System_GENERAL_FLAGS
    PROCESS_FLAGS = _mscl.CV7ContinuousBIT_System_PROCESS_FLAGS

    def flags(self):
        return _mscl.CV7ContinuousBIT_System_flags(self)

    def general(self):
        return _mscl.CV7ContinuousBIT_System_general(self)

    def process(self):
        return _mscl.CV7ContinuousBIT_System_process(self)
    __swig_destroy__ = _mscl.delete_CV7ContinuousBIT_System

# Register CV7ContinuousBIT_System in _mscl:
_mscl.CV7ContinuousBIT_System_swigregister(CV7ContinuousBIT_System)

class CV7ContinuousBIT_IMU_General(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CV7ContinuousBIT_IMU_General_swiginit(self, _mscl.new_CV7ContinuousBIT_IMU_General(*args))
    CLOCK_FAULT = _mscl.CV7ContinuousBIT_IMU_General_CLOCK_FAULT
    COMMUNICATION_FAULT = _mscl.CV7ContinuousBIT_IMU_General_COMMUNICATION_FAULT
    TIMING_OVERRUN = _mscl.CV7ContinuousBIT_IMU_General_TIMING_OVERRUN
    CALIBRATION_ERROR_ACCEL = _mscl.CV7ContinuousBIT_IMU_General_CALIBRATION_ERROR_ACCEL
    CALIBRATION_ERROR_GYRO = _mscl.CV7ContinuousBIT_IMU_General_CALIBRATION_ERROR_GYRO
    CALIBRATION_ERROR_MAG = _mscl.CV7ContinuousBIT_IMU_General_CALIBRATION_ERROR_MAG

    def flags(self):
        return _mscl.CV7ContinuousBIT_IMU_General_flags(self)

    def clockFault(self):
        return _mscl.CV7ContinuousBIT_IMU_General_clockFault(self)

    def communicationFault(self):
        return _mscl.CV7ContinuousBIT_IMU_General_communicationFault(self)

    def timingOverrun(self):
        return _mscl.CV7ContinuousBIT_IMU_General_timingOverrun(self)

    def calibrationErrorAccel(self):
        return _mscl.CV7ContinuousBIT_IMU_General_calibrationErrorAccel(self)

    def calibrationErrorGyro(self):
        return _mscl.CV7ContinuousBIT_IMU_General_calibrationErrorGyro(self)

    def calibrationErrorMag(self):
        return _mscl.CV7ContinuousBIT_IMU_General_calibrationErrorMag(self)
    __swig_destroy__ = _mscl.delete_CV7ContinuousBIT_IMU_General

# Register CV7ContinuousBIT_IMU_General in _mscl:
_mscl.CV7ContinuousBIT_IMU_General_swigregister(CV7ContinuousBIT_IMU_General)

class CV7ContinuousBIT_IMU_Sensors(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CV7ContinuousBIT_IMU_Sensors_swiginit(self, _mscl.new_CV7ContinuousBIT_IMU_Sensors(*args))
    ACCEL_GENERAL_FAULT = _mscl.CV7ContinuousBIT_IMU_Sensors_ACCEL_GENERAL_FAULT
    ACCEL_OVERRANGE = _mscl.CV7ContinuousBIT_IMU_Sensors_ACCEL_OVERRANGE
    ACCEL_SELF_TEST_FAIL = _mscl.CV7ContinuousBIT_IMU_Sensors_ACCEL_SELF_TEST_FAIL
    GYRO_GENERAL_FAULT = _mscl.CV7ContinuousBIT_IMU_Sensors_GYRO_GENERAL_FAULT
    GYRO_OVERRANGE = _mscl.CV7ContinuousBIT_IMU_Sensors_GYRO_OVERRANGE
    GYRO_SELF_TEST_FAIL = _mscl.CV7ContinuousBIT_IMU_Sensors_GYRO_SELF_TEST_FAIL
    MAG_GENERAL_FAULT = _mscl.CV7ContinuousBIT_IMU_Sensors_MAG_GENERAL_FAULT
    MAG_OVERRANGE = _mscl.CV7ContinuousBIT_IMU_Sensors_MAG_OVERRANGE
    MAG_SELF_TEST_FAIL = _mscl.CV7ContinuousBIT_IMU_Sensors_MAG_SELF_TEST_FAIL
    PRESSURE_GENERAL_FAULT = _mscl.CV7ContinuousBIT_IMU_Sensors_PRESSURE_GENERAL_FAULT
    PRESSURE_OVERRANGE = _mscl.CV7ContinuousBIT_IMU_Sensors_PRESSURE_OVERRANGE
    PRESSURE_SELF_TEST_FAIL = _mscl.CV7ContinuousBIT_IMU_Sensors_PRESSURE_SELF_TEST_FAIL

    def flags(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_flags(self)

    def accelGeneralFault(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_accelGeneralFault(self)

    def accelOverrange(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_accelOverrange(self)

    def accelSelfTestFail(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_accelSelfTestFail(self)

    def gyroGeneralFault(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_gyroGeneralFault(self)

    def gyroOverrange(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_gyroOverrange(self)

    def gyroSelfTestFail(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_gyroSelfTestFail(self)

    def magGeneralFault(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_magGeneralFault(self)

    def magOverrange(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_magOverrange(self)

    def magSelfTestFail(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_magSelfTestFail(self)

    def pressureGeneralFault(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_pressureGeneralFault(self)

    def pressureOverrange(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_pressureOverrange(self)

    def pressureSelfTestFail(self):
        return _mscl.CV7ContinuousBIT_IMU_Sensors_pressureSelfTestFail(self)
    __swig_destroy__ = _mscl.delete_CV7ContinuousBIT_IMU_Sensors

# Register CV7ContinuousBIT_IMU_Sensors in _mscl:
_mscl.CV7ContinuousBIT_IMU_Sensors_swigregister(CV7ContinuousBIT_IMU_Sensors)

class CV7ContinuousBIT_IMU(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CV7ContinuousBIT_IMU_swiginit(self, _mscl.new_CV7ContinuousBIT_IMU(*args))
    RESPONSE_OFFSET = _mscl.CV7ContinuousBIT_IMU_RESPONSE_OFFSET
    GENERAL_FLAGS = _mscl.CV7ContinuousBIT_IMU_GENERAL_FLAGS
    SENSORS_FLAGS = _mscl.CV7ContinuousBIT_IMU_SENSORS_FLAGS
    FACTORY_BITS_INVALID = _mscl.CV7ContinuousBIT_IMU_FACTORY_BITS_INVALID

    def flags(self):
        return _mscl.CV7ContinuousBIT_IMU_flags(self)

    def general(self):
        return _mscl.CV7ContinuousBIT_IMU_general(self)

    def sensors(self):
        return _mscl.CV7ContinuousBIT_IMU_sensors(self)

    def factoryBitsInvalid(self):
        return _mscl.CV7ContinuousBIT_IMU_factoryBitsInvalid(self)
    __swig_destroy__ = _mscl.delete_CV7ContinuousBIT_IMU

# Register CV7ContinuousBIT_IMU in _mscl:
_mscl.CV7ContinuousBIT_IMU_swigregister(CV7ContinuousBIT_IMU)

class CV7ContinuousBIT_Filter_General(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CV7ContinuousBIT_Filter_General_swiginit(self, _mscl.new_CV7ContinuousBIT_Filter_General(*args))
    FAULT = _mscl.CV7ContinuousBIT_Filter_General_FAULT
    TIMING_OVERRUN = _mscl.CV7ContinuousBIT_Filter_General_TIMING_OVERRUN
    TIMING_UNDERRUN = _mscl.CV7ContinuousBIT_Filter_General_TIMING_UNDERRUN

    def flags(self):
        return _mscl.CV7ContinuousBIT_Filter_General_flags(self)

    def fault(self):
        return _mscl.CV7ContinuousBIT_Filter_General_fault(self)

    def timingOverrun(self):
        return _mscl.CV7ContinuousBIT_Filter_General_timingOverrun(self)

    def timingUnderrun(self):
        return _mscl.CV7ContinuousBIT_Filter_General_timingUnderrun(self)
    __swig_destroy__ = _mscl.delete_CV7ContinuousBIT_Filter_General

# Register CV7ContinuousBIT_Filter_General in _mscl:
_mscl.CV7ContinuousBIT_Filter_General_swigregister(CV7ContinuousBIT_Filter_General)

class CV7ContinuousBIT_Filter(Bitfield):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CV7ContinuousBIT_Filter_swiginit(self, _mscl.new_CV7ContinuousBIT_Filter(*args))
    RESPONSE_OFFSET = _mscl.CV7ContinuousBIT_Filter_RESPONSE_OFFSET
    GENERAL_FLAGS = _mscl.CV7ContinuousBIT_Filter_GENERAL_FLAGS

    def flags(self):
        return _mscl.CV7ContinuousBIT_Filter_flags(self)

    def general(self):
        return _mscl.CV7ContinuousBIT_Filter_general(self)
    __swig_destroy__ = _mscl.delete_CV7ContinuousBIT_Filter

# Register CV7ContinuousBIT_Filter in _mscl:
_mscl.CV7ContinuousBIT_Filter_swigregister(CV7ContinuousBIT_Filter)

class CV7ContinuousBIT(ContinuousBIT):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.CV7ContinuousBIT_swiginit(self, _mscl.new_CV7ContinuousBIT(*args))

    def system(self):
        return _mscl.CV7ContinuousBIT_system(self)

    def imu(self):
        return _mscl.CV7ContinuousBIT_imu(self)

    def filter(self):
        return _mscl.CV7ContinuousBIT_filter(self)

    def data(self):
        return _mscl.CV7ContinuousBIT_data(self)

    def as_MipDataPoints(self):
        return _mscl.CV7ContinuousBIT_as_MipDataPoints(self)
    __swig_destroy__ = _mscl.delete_CV7ContinuousBIT

# Register CV7ContinuousBIT in _mscl:
_mscl.CV7ContinuousBIT_swigregister(CV7ContinuousBIT)

class MipSharedDataFields(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    EVENT_SOURCE_NONE = _mscl.MipSharedDataFields_EVENT_SOURCE_NONE
    EVENT_SOURCE_UNKNOWN = _mscl.MipSharedDataFields_EVENT_SOURCE_UNKNOWN

    def __init__(self):
        _mscl.MipSharedDataFields_swiginit(self, _mscl.new_MipSharedDataFields())

    def hasEventSource(self):
        return _mscl.MipSharedDataFields_hasEventSource(self)

    def eventSource(self):
        return _mscl.MipSharedDataFields_eventSource(self)

    def hasTicks(self):
        return _mscl.MipSharedDataFields_hasTicks(self)

    def ticks(self):
        return _mscl.MipSharedDataFields_ticks(self)

    def hasDeltaTicks(self):
        return _mscl.MipSharedDataFields_hasDeltaTicks(self)

    def deltaTicks(self):
        return _mscl.MipSharedDataFields_deltaTicks(self)

    def hasGpsTimestamp(self):
        return _mscl.MipSharedDataFields_hasGpsTimestamp(self)

    def gpsTimestamp(self):
        return _mscl.MipSharedDataFields_gpsTimestamp(self)

    def gpsTimestampValid(self):
        return _mscl.MipSharedDataFields_gpsTimestampValid(self)

    def hasDeltaTime(self):
        return _mscl.MipSharedDataFields_hasDeltaTime(self)

    def deltaTime(self):
        return _mscl.MipSharedDataFields_deltaTime(self)

    def hasReferenceTime(self):
        return _mscl.MipSharedDataFields_hasReferenceTime(self)

    def referenceTime(self):
        return _mscl.MipSharedDataFields_referenceTime(self)

    def hasDeltaReferenceTime(self):
        return _mscl.MipSharedDataFields_hasDeltaReferenceTime(self)

    def deltaReferenceTime(self):
        return _mscl.MipSharedDataFields_deltaReferenceTime(self)

    def hasExternalTimestamp(self):
        return _mscl.MipSharedDataFields_hasExternalTimestamp(self)

    def externalTimestamp(self):
        return _mscl.MipSharedDataFields_externalTimestamp(self)

    def externalTimestampValid(self):
        return _mscl.MipSharedDataFields_externalTimestampValid(self)

    def hasDeltaExternalTime(self):
        return _mscl.MipSharedDataFields_hasDeltaExternalTime(self)

    def deltaExternalTime(self):
        return _mscl.MipSharedDataFields_deltaExternalTime(self)

    def deltaExternalTimeValid(self):
        return _mscl.MipSharedDataFields_deltaExternalTimeValid(self)

    def get(self, *args):
        return _mscl.MipSharedDataFields_get(self, *args)
    __swig_destroy__ = _mscl.delete_MipSharedDataFields

# Register MipSharedDataFields in _mscl:
_mscl.MipSharedDataFields_swigregister(MipSharedDataFields)

class MipDataPacket(MipPacket):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.MipDataPacket_swiginit(self, _mscl.new_MipDataPacket(*args))

    def data(self):
        return _mscl.MipDataPacket_data(self)

    def shared(self):
        return _mscl.MipDataPacket_shared(self)

    def collectedTimestamp(self):
        return _mscl.MipDataPacket_collectedTimestamp(self)

    def deviceTimestamp(self):
        return _mscl.MipDataPacket_deviceTimestamp(self)

    def hasDeviceTime(self):
        return _mscl.MipDataPacket_hasDeviceTime(self)

    def deviceTimeValid(self):
        return _mscl.MipDataPacket_deviceTimeValid(self)

    def deviceTimeFlags(self):
        return _mscl.MipDataPacket_deviceTimeFlags(self)
    __swig_destroy__ = _mscl.delete_MipDataPacket

# Register MipDataPacket in _mscl:
_mscl.MipDataPacket_swigregister(MipDataPacket)

class RawBytePacket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    INVALID_PACKET = _mscl.RawBytePacket_INVALID_PACKET
    DATA_PACKET = _mscl.RawBytePacket_DATA_PACKET
    COMMAND_PACKET = _mscl.RawBytePacket_COMMAND_PACKET
    NO_PACKET_FOUND = _mscl.RawBytePacket_NO_PACKET_FOUND
    FROM_READ = _mscl.RawBytePacket_FROM_READ
    FROM_SEND = _mscl.RawBytePacket_FROM_SEND

    def __init__(self):
        _mscl.RawBytePacket_swiginit(self, _mscl.new_RawBytePacket())

    def type(self, *args):
        return _mscl.RawBytePacket_type(self, *args)

    def source(self, *args):
        return _mscl.RawBytePacket_source(self, *args)

    def payload(self, *args):
        return _mscl.RawBytePacket_payload(self, *args)
    __swig_destroy__ = _mscl.delete_RawBytePacket

# Register RawBytePacket in _mscl:
_mscl.RawBytePacket_swigregister(RawBytePacket)

class MipNodeFeatures(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _mscl.delete_MipNodeFeatures

    @staticmethod
    def isChannelField(descriptor):
        return _mscl.MipNodeFeatures_isChannelField(descriptor)

    def supportsCategory(self, dataClass):
        return _mscl.MipNodeFeatures_supportsCategory(self, dataClass)

    def supportsCommand(self, commandId):
        return _mscl.MipNodeFeatures_supportsCommand(self, commandId)

    def supportedCommands(self):
        return _mscl.MipNodeFeatures_supportedCommands(self)

    def supportsChannelField(self, fieldId):
        return _mscl.MipNodeFeatures_supportsChannelField(self, fieldId)

    def filterSupportedChannelFields(self, fields):
        return _mscl.MipNodeFeatures_filterSupportedChannelFields(self, fields)

    def supportedChannelFields(self, *args):
        return _mscl.MipNodeFeatures_supportedChannelFields(self, *args)

    def supportedSampleRates(self, dataClass):
        return _mscl.MipNodeFeatures_supportedSampleRates(self, dataClass)

    def baseDataRate(self, dataClass):
        return _mscl.MipNodeFeatures_baseDataRate(self, dataClass)

    def gnssReceiverInfo(self):
        return _mscl.MipNodeFeatures_gnssReceiverInfo(self)

    def supportedGnssSources(self):
        return _mscl.MipNodeFeatures_supportedGnssSources(self)

    def supportedSensorRanges(self, *args):
        return _mscl.MipNodeFeatures_supportedSensorRanges(self, *args)

    def getCommPortInfo(self):
        return _mscl.MipNodeFeatures_getCommPortInfo(self)

    def useLegacyIdsForEnableDataStream(self):
        return _mscl.MipNodeFeatures_useLegacyIdsForEnableDataStream(self)

    def supportedHeadingUpdateOptions(self):
        return _mscl.MipNodeFeatures_supportedHeadingUpdateOptions(self)

    def supportedStatusSelectors(self):
        return _mscl.MipNodeFeatures_supportedStatusSelectors(self)

    def supportedEstimationControlOptions(self):
        return _mscl.MipNodeFeatures_supportedEstimationControlOptions(self)

    def supportedVehicleModeTypes(self):
        return _mscl.MipNodeFeatures_supportedVehicleModeTypes(self)

    def supportedAdaptiveMeasurementModes(self):
        return _mscl.MipNodeFeatures_supportedAdaptiveMeasurementModes(self)

    def supportedAdaptiveFilterLevels(self):
        return _mscl.MipNodeFeatures_supportedAdaptiveFilterLevels(self)

    def supportedAidingMeasurementOptions(self):
        return _mscl.MipNodeFeatures_supportedAidingMeasurementOptions(self)

    def supportedPpsSourceOptions(self):
        return _mscl.MipNodeFeatures_supportedPpsSourceOptions(self)

    def supportedGpioPinModes(self, feature, behavior):
        return _mscl.MipNodeFeatures_supportedGpioPinModes(self, feature, behavior)

    def supportedGpioBehaviors(self, feature):
        return _mscl.MipNodeFeatures_supportedGpioBehaviors(self, feature)

    def supportedGpioFeatures(self, pin):
        return _mscl.MipNodeFeatures_supportedGpioFeatures(self, pin)

    def supportedGpioConfigurations(self):
        return _mscl.MipNodeFeatures_supportedGpioConfigurations(self)

    def supportedGnssSignalConfigurations(self):
        return _mscl.MipNodeFeatures_supportedGnssSignalConfigurations(self)

    def supportedDeclinationSources(self):
        return _mscl.MipNodeFeatures_supportedDeclinationSources(self)

    def supportedInclinationSources(self):
        return _mscl.MipNodeFeatures_supportedInclinationSources(self)

    def supportedMagneticMagnitudeSources(self):
        return _mscl.MipNodeFeatures_supportedMagneticMagnitudeSources(self)

    def supportedEventThresholdChannels(self):
        return _mscl.MipNodeFeatures_supportedEventThresholdChannels(self)

    def supportedEventActionInfo(self):
        return _mscl.MipNodeFeatures_supportedEventActionInfo(self)

    def supportedEventTriggerInfo(self):
        return _mscl.MipNodeFeatures_supportedEventTriggerInfo(self)

    def supportsNorthCompensation(self):
        return _mscl.MipNodeFeatures_supportsNorthCompensation(self)

    def supportedLowPassFilterChannelFields(self):
        return _mscl.MipNodeFeatures_supportedLowPassFilterChannelFields(self)

# Register MipNodeFeatures in _mscl:
_mscl.MipNodeFeatures_swigregister(MipNodeFeatures)

def MipNodeFeatures_isChannelField(descriptor):
    return _mscl.MipNodeFeatures_isChannelField(descriptor)

class MipNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def doCommand(self, descriptorSet, cmdDescriptor, fieldData, ackNackResponse, dataResponse, responseDataDescriptor=0):
        return _mscl.MipNode_doCommand(self, descriptorSet, cmdDescriptor, fieldData, ackNackResponse, dataResponse, responseDataDescriptor)

    def getConfigCommandBytes(self):
        return _mscl.MipNode_getConfigCommandBytes(self)

    def sendCommandBytes(self, *args):
        return _mscl.MipNode_sendCommandBytes(self, *args)

    @staticmethod
    def deviceName(serial):
        return _mscl.MipNode_deviceName(serial)

    def connection(self):
        return _mscl.MipNode_connection(self)

    def features(self):
        return _mscl.MipNode_features(self)

    def clearDeviceInfo(self):
        return _mscl.MipNode_clearDeviceInfo(self)

    def lastCommunicationTime(self):
        return _mscl.MipNode_lastCommunicationTime(self)

    def lastDeviceState(self):
        return _mscl.MipNode_lastDeviceState(self)

    def setLastDeviceState(self, state):
        return _mscl.MipNode_setLastDeviceState(self, state)

    def firmwareVersion(self):
        return _mscl.MipNode_firmwareVersion(self)

    def model(self):
        return _mscl.MipNode_model(self)

    def modelName(self):
        return _mscl.MipNode_modelName(self)

    def modelNumber(self):
        return _mscl.MipNode_modelNumber(self)

    def serialNumber(self):
        return _mscl.MipNode_serialNumber(self)

    def lotNumber(self):
        return _mscl.MipNode_lotNumber(self)

    def deviceOptions(self):
        return _mscl.MipNode_deviceOptions(self)

    def timeout(self, *args):
        return _mscl.MipNode_timeout(self, *args)

    def name(self):
        return _mscl.MipNode_name(self)

    def ping(self):
        return _mscl.MipNode_ping(self)

    def setToIdle(self):
        return _mscl.MipNode_setToIdle(self)

    def cyclePower(self):
        return _mscl.MipNode_cyclePower(self)

    def resume(self):
        return _mscl.MipNode_resume(self)

    def getCommunicationMode(self):
        return _mscl.MipNode_getCommunicationMode(self)

    def setCommunicationMode(self, communicationMode):
        return _mscl.MipNode_setCommunicationMode(self, communicationMode)

    def saveSettingsAsStartup(self, *args):
        return _mscl.MipNode_saveSettingsAsStartup(self, *args)

    def loadStartupSettings(self, *args):
        return _mscl.MipNode_loadStartupSettings(self, *args)

    def loadFactoryDefaultSettings(self, *args):
        return _mscl.MipNode_loadFactoryDefaultSettings(self, *args)

    def setUARTBaudRate(self, *args):
        return _mscl.MipNode_setUARTBaudRate(self, *args)

    def getUARTBaudRate(self, portId=1):
        return _mscl.MipNode_getUARTBaudRate(self, portId)

    def getRawBytePackets(self, timeout=0, maxPackets=0):
        return _mscl.MipNode_getRawBytePackets(self, timeout, maxPackets)

# Register MipNode in _mscl:
_mscl.MipNode_swigregister(MipNode)

def MipNode_deviceName(serial):
    return _mscl.MipNode_deviceName(serial)

class InertialNode(MipNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, connection):
        _mscl.InertialNode_swiginit(self, _mscl.new_InertialNode(connection))
    __swig_destroy__ = _mscl.delete_InertialNode

    def getDataPackets(self, timeout=0, maxPackets=0):
        return _mscl.InertialNode_getDataPackets(self, timeout, maxPackets)

    def totalPackets(self):
        return _mscl.InertialNode_totalPackets(self)

    def pollData(self, *args):
        return _mscl.InertialNode_pollData(self, *args)

    def getDataRateBase(self, dataClass):
        return _mscl.InertialNode_getDataRateBase(self, dataClass)

    def getActiveChannelFields(self, dataClass):
        return _mscl.InertialNode_getActiveChannelFields(self, dataClass)

    def setActiveChannelFields(self, dataClass, channels):
        return _mscl.InertialNode_setActiveChannelFields(self, dataClass, channels)

    def saveActiveChannelFields(self, dataClass):
        return _mscl.InertialNode_saveActiveChannelFields(self, dataClass)

    def setFactoryStreamingChannels(self, option):
        return _mscl.InertialNode_setFactoryStreamingChannels(self, option)

    def getCommunicationMode(self):
        return _mscl.InertialNode_getCommunicationMode(self)

    def setCommunicationMode(self, communicationMode):
        return _mscl.InertialNode_setCommunicationMode(self, communicationMode)

    def isDataStreamEnabled(self, dataClass):
        return _mscl.InertialNode_isDataStreamEnabled(self, dataClass)

    def enableDataStream(self, dataClass, enable=True, resumeStreaming=True):
        return _mscl.InertialNode_enableDataStream(self, dataClass, enable, resumeStreaming)

    def resetFilter(self):
        return _mscl.InertialNode_resetFilter(self)

    def runFilter(self):
        return _mscl.InertialNode_runFilter(self)

    def getAutoInitialization(self):
        return _mscl.InertialNode_getAutoInitialization(self)

    def setAutoInitialization(self, enable):
        return _mscl.InertialNode_setAutoInitialization(self, enable)

    def getAltitudeAid(self):
        return _mscl.InertialNode_getAltitudeAid(self)

    def setAltitudeAid(self, enable):
        return _mscl.InertialNode_setAltitudeAid(self, enable)

    def getPitchRollAid(self):
        return _mscl.InertialNode_getPitchRollAid(self)

    def setPitchRollAid(self, enable):
        return _mscl.InertialNode_setPitchRollAid(self, enable)

    def enableVerticalGyroConstraint(self, enable):
        return _mscl.InertialNode_enableVerticalGyroConstraint(self, enable)

    def verticalGyroConstraintEnabled(self):
        return _mscl.InertialNode_verticalGyroConstraintEnabled(self)

    def enableWheeledVehicleConstraint(self, enable):
        return _mscl.InertialNode_enableWheeledVehicleConstraint(self, enable)

    def wheeledVehicleConstraintEnabled(self):
        return _mscl.InertialNode_wheeledVehicleConstraintEnabled(self)

    def setVelocityZUPT(self, ZUPTSettings):
        return _mscl.InertialNode_setVelocityZUPT(self, ZUPTSettings)

    def getVelocityZUPT(self):
        return _mscl.InertialNode_getVelocityZUPT(self)

    def setAngularRateZUPT(self, ZUPTSettings):
        return _mscl.InertialNode_setAngularRateZUPT(self, ZUPTSettings)

    def getAngularRateZUPT(self):
        return _mscl.InertialNode_getAngularRateZUPT(self)

    def cmdedVelZUPT(self):
        return _mscl.InertialNode_cmdedVelZUPT(self)

    def cmdedAngRateZUPT(self):
        return _mscl.InertialNode_cmdedAngRateZUPT(self)

    def setInitialAttitude(self, attitude):
        return _mscl.InertialNode_setInitialAttitude(self, attitude)

    def setInitialHeading(self, heading):
        return _mscl.InertialNode_setInitialHeading(self, heading)

    def getInitialFilterConfiguration(self):
        return _mscl.InertialNode_getInitialFilterConfiguration(self)

    def setInitialFilterConfiguration(self, filterConfig):
        return _mscl.InertialNode_setInitialFilterConfiguration(self, filterConfig)

    def getSensorToVehicleRotation_eulerAngles(self):
        return _mscl.InertialNode_getSensorToVehicleRotation_eulerAngles(self)

    def setSensorToVehicleRotation_eulerAngles(self, angles):
        return _mscl.InertialNode_setSensorToVehicleRotation_eulerAngles(self, angles)

    def getSensorToVehicleRotation_matrix(self):
        return _mscl.InertialNode_getSensorToVehicleRotation_matrix(self)

    def setSensorToVehicleRotation_matrix(self, dcm):
        return _mscl.InertialNode_setSensorToVehicleRotation_matrix(self, dcm)

    def getSensorToVehicleRotation_quaternion(self):
        return _mscl.InertialNode_getSensorToVehicleRotation_quaternion(self)

    def setSensorToVehicleRotation_quaternion(self, rotation):
        return _mscl.InertialNode_setSensorToVehicleRotation_quaternion(self, rotation)

    def getSensorToVehicleTransform_eulerAngles(self):
        return _mscl.InertialNode_getSensorToVehicleTransform_eulerAngles(self)

    def setSensorToVehicleTransform_eulerAngles(self, angles):
        return _mscl.InertialNode_setSensorToVehicleTransform_eulerAngles(self, angles)

    def getSensorToVehicleTransform_matrix(self):
        return _mscl.InertialNode_getSensorToVehicleTransform_matrix(self)

    def setSensorToVehicleTransform_matrix(self, dcm):
        return _mscl.InertialNode_setSensorToVehicleTransform_matrix(self, dcm)

    def getSensorToVehicleTransform_quaternion(self):
        return _mscl.InertialNode_getSensorToVehicleTransform_quaternion(self)

    def setSensorToVehicleTransform_quaternion(self, transformation):
        return _mscl.InertialNode_setSensorToVehicleTransform_quaternion(self, transformation)

    def getSensorToVehicleOffset(self):
        return _mscl.InertialNode_getSensorToVehicleOffset(self)

    def setSensorToVehicleOffset(self, offset):
        return _mscl.InertialNode_setSensorToVehicleOffset(self, offset)

    def getAntennaOffset(self):
        return _mscl.InertialNode_getAntennaOffset(self)

    def setAntennaOffset(self, offset):
        return _mscl.InertialNode_setAntennaOffset(self, offset)

    def getGNSSAssistedFixControl(self):
        return _mscl.InertialNode_getGNSSAssistedFixControl(self)

    def setGNSSAssistedFixControl(self, enableAssistedFix):
        return _mscl.InertialNode_setGNSSAssistedFixControl(self, enableAssistedFix)

    def getGNSSAssistTimeUpdate(self):
        return _mscl.InertialNode_getGNSSAssistTimeUpdate(self)

    def setGNSSAssistTimeUpdate(self, timeUpdate):
        return _mscl.InertialNode_setGNSSAssistTimeUpdate(self, timeUpdate)

    def getGPSTimeUpdate(self, timeFrame):
        return _mscl.InertialNode_getGPSTimeUpdate(self, timeFrame)

    def setGPSTimeUpdate(self, arg2, timeData):
        return _mscl.InertialNode_setGPSTimeUpdate(self, arg2, timeData)

    def setConstellationSettings(self, dataToUse):
        return _mscl.InertialNode_setConstellationSettings(self, dataToUse)

    def getConstellationSettings(self):
        return _mscl.InertialNode_getConstellationSettings(self)

    def setSBASSettings(self, dataToUse):
        return _mscl.InertialNode_setSBASSettings(self, dataToUse)

    def getSBASSettings(self):
        return _mscl.InertialNode_getSBASSettings(self)

    def setAccelerometerBias(self, biasVector):
        return _mscl.InertialNode_setAccelerometerBias(self, biasVector)

    def getAccelerometerBias(self):
        return _mscl.InertialNode_getAccelerometerBias(self)

    def setGyroBias(self, biasVector):
        return _mscl.InertialNode_setGyroBias(self, biasVector)

    def getGyroBias(self):
        return _mscl.InertialNode_getGyroBias(self)

    def captureGyroBias(self, samplingTime):
        return _mscl.InertialNode_captureGyroBias(self, samplingTime)

    def findMagnetometerCaptureAutoCalibration(self):
        return _mscl.InertialNode_findMagnetometerCaptureAutoCalibration(self)

    def saveMagnetometerCaptureAutoCalibration(self):
        return _mscl.InertialNode_saveMagnetometerCaptureAutoCalibration(self)

    def setMagnetometerSoftIronMatrix(self, matrix):
        return _mscl.InertialNode_setMagnetometerSoftIronMatrix(self, matrix)

    def getMagnetometerSoftIronMatrix(self):
        return _mscl.InertialNode_getMagnetometerSoftIronMatrix(self)

    def setMagnetometerHardIronOffset(self, offsetVector):
        return _mscl.InertialNode_setMagnetometerHardIronOffset(self, offsetVector)

    def getMagnetometerHardIronOffset(self):
        return _mscl.InertialNode_getMagnetometerHardIronOffset(self)

    def setConingAndScullingEnable(self, enable):
        return _mscl.InertialNode_setConingAndScullingEnable(self, enable)

    def getConingAndScullingEnable(self):
        return _mscl.InertialNode_getConingAndScullingEnable(self)

    def setLowPassFilterSettings(self, data):
        return _mscl.InertialNode_setLowPassFilterSettings(self, data)

    def getLowPassFilterSettings(self, dataDescriptors):
        return _mscl.InertialNode_getLowPassFilterSettings(self, dataDescriptors)

    def setComplementaryFilterSettings(self, data):
        return _mscl.InertialNode_setComplementaryFilterSettings(self, data)

    def getComplementaryFilterSettings(self):
        return _mscl.InertialNode_getComplementaryFilterSettings(self)

    def getBasicDeviceStatus(self):
        return _mscl.InertialNode_getBasicDeviceStatus(self)

    def getDiagnosticDeviceStatus(self):
        return _mscl.InertialNode_getDiagnosticDeviceStatus(self)

    def sendRawRTCM_2_3Message(self, theMessage):
        return _mscl.InertialNode_sendRawRTCM_2_3Message(self, theMessage)

    def setVehicleDynamicsMode(self, mode):
        return _mscl.InertialNode_setVehicleDynamicsMode(self, mode)

    def getVehicleDynamicsMode(self):
        return _mscl.InertialNode_getVehicleDynamicsMode(self)

    def setEstimationControlFlags(self, flags):
        return _mscl.InertialNode_setEstimationControlFlags(self, flags)

    def getEstimationControlFlags(self):
        return _mscl.InertialNode_getEstimationControlFlags(self)

    def setInclinationSource(self, options):
        return _mscl.InertialNode_setInclinationSource(self, options)

    def getInclinationSource(self):
        return _mscl.InertialNode_getInclinationSource(self)

    def setDeclinationSource(self, options):
        return _mscl.InertialNode_setDeclinationSource(self, options)

    def getDeclinationSource(self):
        return _mscl.InertialNode_getDeclinationSource(self)

    def setMagneticFieldMagnitudeSource(self, options):
        return _mscl.InertialNode_setMagneticFieldMagnitudeSource(self, options)

    def getMagneticFieldMagnitudeSource(self):
        return _mscl.InertialNode_getMagneticFieldMagnitudeSource(self)

    def setGNSS_SourceControl(self, gnssSource):
        return _mscl.InertialNode_setGNSS_SourceControl(self, gnssSource)

    def getGNSS_SourceControl(self):
        return _mscl.InertialNode_getGNSS_SourceControl(self)

    def sendExternalGNSSUpdate(self, gnssUpdateData):
        return _mscl.InertialNode_sendExternalGNSSUpdate(self, gnssUpdateData)

    def setHeadingUpdateControl(self, headingUpdateOptions):
        return _mscl.InertialNode_setHeadingUpdateControl(self, headingUpdateOptions)

    def tareOrientation(self, axisValue):
        return _mscl.InertialNode_tareOrientation(self, axisValue)

    def getHeadingUpdateControl(self):
        return _mscl.InertialNode_getHeadingUpdateControl(self)

    def setGravityErrorAdaptiveMeasurement(self, data):
        return _mscl.InertialNode_setGravityErrorAdaptiveMeasurement(self, data)

    def getGravityErrorAdaptiveMeasurement(self):
        return _mscl.InertialNode_getGravityErrorAdaptiveMeasurement(self)

    def setMagnetometerErrorAdaptiveMeasurement(self, data):
        return _mscl.InertialNode_setMagnetometerErrorAdaptiveMeasurement(self, data)

    def getMagnetometerErrorAdaptiveMeasurement(self):
        return _mscl.InertialNode_getMagnetometerErrorAdaptiveMeasurement(self)

    def setMagDipAngleErrorAdaptiveMeasurement(self, data):
        return _mscl.InertialNode_setMagDipAngleErrorAdaptiveMeasurement(self, data)

    def getMagDipAngleErrorAdaptiveMeasurement(self):
        return _mscl.InertialNode_getMagDipAngleErrorAdaptiveMeasurement(self)

    def setMagNoiseStandardDeviation(self, data):
        return _mscl.InertialNode_setMagNoiseStandardDeviation(self, data)

    def getMagNoiseStandardDeviation(self):
        return _mscl.InertialNode_getMagNoiseStandardDeviation(self)

    def setGravNoiseStandardDeviation(self, data):
        return _mscl.InertialNode_setGravNoiseStandardDeviation(self, data)

    def getGravNoiseStandardDeviation(self):
        return _mscl.InertialNode_getGravNoiseStandardDeviation(self)

    def setAccelNoiseStandardDeviation(self, data):
        return _mscl.InertialNode_setAccelNoiseStandardDeviation(self, data)

    def getAccelNoiseStandardDeviation(self):
        return _mscl.InertialNode_getAccelNoiseStandardDeviation(self)

    def setGyroNoiseStandardDeviation(self, data):
        return _mscl.InertialNode_setGyroNoiseStandardDeviation(self, data)

    def getGyroNoiseStandardDeviation(self):
        return _mscl.InertialNode_getGyroNoiseStandardDeviation(self)

    def setPressureAltNoiseStandardDeviation(self, data):
        return _mscl.InertialNode_setPressureAltNoiseStandardDeviation(self, data)

    def getPressureAltNoiseStandardDeviation(self):
        return _mscl.InertialNode_getPressureAltNoiseStandardDeviation(self)

    def setHardIronOffsetProcessNoise(self, data):
        return _mscl.InertialNode_setHardIronOffsetProcessNoise(self, data)

    def getHardIronOffsetProcessNoise(self):
        return _mscl.InertialNode_getHardIronOffsetProcessNoise(self)

    def setAccelBiasModelParams(self, data):
        return _mscl.InertialNode_setAccelBiasModelParams(self, data)

    def getAccelBiasModelParams(self):
        return _mscl.InertialNode_getAccelBiasModelParams(self)

    def setGyroBiasModelParams(self, data):
        return _mscl.InertialNode_setGyroBiasModelParams(self, data)

    def getGyroBiasModelParams(self):
        return _mscl.InertialNode_getGyroBiasModelParams(self)

    def setSoftIronMatrixProcessNoise(self, data):
        return _mscl.InertialNode_setSoftIronMatrixProcessNoise(self, data)

    def getSoftIronMatrixProcessNoise(self):
        return _mscl.InertialNode_getSoftIronMatrixProcessNoise(self)

    def setFixedReferencePosition(self, data):
        return _mscl.InertialNode_setFixedReferencePosition(self, data)

    def getFixedReferencePosition(self):
        return _mscl.InertialNode_getFixedReferencePosition(self)

    def setGPSDynamicsMode(self, data):
        return _mscl.InertialNode_setGPSDynamicsMode(self, data)

    def getGPSDynamicsMode(self):
        return _mscl.InertialNode_getGPSDynamicsMode(self)

    def setDevicePowerState(self, device, data):
        return _mscl.InertialNode_setDevicePowerState(self, device, data)

    def getDevicePowerState(self, device):
        return _mscl.InertialNode_getDevicePowerState(self, device)

    def setDeviceStreamFormat(self, device, data):
        return _mscl.InertialNode_setDeviceStreamFormat(self, device, data)

    def getDeviceStreamFormat(self, device):
        return _mscl.InertialNode_getDeviceStreamFormat(self, device)

    def setSignalConditioningSettings(self, data):
        return _mscl.InertialNode_setSignalConditioningSettings(self, data)

    def getSignalConditioningSettings(self):
        return _mscl.InertialNode_getSignalConditioningSettings(self)

    def setEnableDisableMeasurements(self, data):
        return _mscl.InertialNode_setEnableDisableMeasurements(self, data)

    def getEnableDisableMeasurements(self):
        return _mscl.InertialNode_getEnableDisableMeasurements(self)

    def setGravityNoiseMinimum(self, data):
        return _mscl.InertialNode_setGravityNoiseMinimum(self, data)

    def getGravityNoiseMinimum(self):
        return _mscl.InertialNode_getGravityNoiseMinimum(self)

    def sendExternalHeadingUpdate(self, *args):
        return _mscl.InertialNode_sendExternalHeadingUpdate(self, *args)

    def aidingMeasurementEnabled(self, aidingSource):
        return _mscl.InertialNode_aidingMeasurementEnabled(self, aidingSource)

    def enableDisableAidingMeasurement(self, aidingSource, enable):
        return _mscl.InertialNode_enableDisableAidingMeasurement(self, aidingSource, enable)

    def getAdaptiveFilterOptions(self):
        return _mscl.InertialNode_getAdaptiveFilterOptions(self)

    def setAdaptiveFilterOptions(self, options):
        return _mscl.InertialNode_setAdaptiveFilterOptions(self, options)

    def getMultiAntennaOffset(self, receiverId):
        return _mscl.InertialNode_getMultiAntennaOffset(self, receiverId)

    def setMultiAntennaOffset(self, receiverId, offset):
        return _mscl.InertialNode_setMultiAntennaOffset(self, receiverId, offset)

    def getPpsSource(self):
        return _mscl.InertialNode_getPpsSource(self)

    def setPpsSource(self, ppsSource):
        return _mscl.InertialNode_setPpsSource(self, ppsSource)

    def getOdometerConfig(self):
        return _mscl.InertialNode_getOdometerConfig(self)

    def setOdometerConfig(self, config):
        return _mscl.InertialNode_setOdometerConfig(self, config)

    def getSensorRange(self, sensorRangeType):
        return _mscl.InertialNode_getSensorRange(self, sensorRangeType)

    def setSensorRange(self, *args):
        return _mscl.InertialNode_setSensorRange(self, *args)

    def getGpioConfig(self, pin):
        return _mscl.InertialNode_getGpioConfig(self, pin)

    def setGpioConfig(self, config):
        return _mscl.InertialNode_setGpioConfig(self, config)

    def getGpioState(self, pin):
        return _mscl.InertialNode_getGpioState(self, pin)

    def setGpioState(self, pin, state):
        return _mscl.InertialNode_setGpioState(self, pin, state)

    def getEventTriggerMode(self, instance):
        return _mscl.InertialNode_getEventTriggerMode(self, instance)

    def setEventTriggerMode(self, instance, mode):
        return _mscl.InertialNode_setEventTriggerMode(self, instance, mode)

    def getEventTriggerConfig(self, instance):
        return _mscl.InertialNode_getEventTriggerConfig(self, instance)

    def setEventTriggerConfig(self, config):
        return _mscl.InertialNode_setEventTriggerConfig(self, config)

    def getEventActionConfig(self, instance):
        return _mscl.InertialNode_getEventActionConfig(self, instance)

    def setEventActionConfig(self, config, validateSupported=True):
        return _mscl.InertialNode_setEventActionConfig(self, config, validateSupported)

    def getAntennaLeverArmCal(self):
        return _mscl.InertialNode_getAntennaLeverArmCal(self)

    def setAntennaLeverArmCal(self, config):
        return _mscl.InertialNode_setAntennaLeverArmCal(self, config)

    def getRelativePositionReference(self):
        return _mscl.InertialNode_getRelativePositionReference(self)

    def setRelativePositionReference(self, ref):
        return _mscl.InertialNode_setRelativePositionReference(self, ref)

    def getLeverArmReferenceOffset(self):
        return _mscl.InertialNode_getLeverArmReferenceOffset(self)

    def setLeverArmReferenceOffset(self, offset):
        return _mscl.InertialNode_setLeverArmReferenceOffset(self, offset)

    def sendExternalSpeedMeasurementUpdate(self, tow, speed, unc):
        return _mscl.InertialNode_sendExternalSpeedMeasurementUpdate(self, tow, speed, unc)

    def getSpeedMeasurementOffset(self):
        return _mscl.InertialNode_getSpeedMeasurementOffset(self)

    def setSpeedMeasurementOffset(self, offset):
        return _mscl.InertialNode_setSpeedMeasurementOffset(self, offset)

    def getGnssSignalConfig(self):
        return _mscl.InertialNode_getGnssSignalConfig(self)

    def setGnssSignalConfig(self, config):
        return _mscl.InertialNode_setGnssSignalConfig(self, config)

    def rtkEnabled(self):
        return _mscl.InertialNode_rtkEnabled(self)

    def enableRtk(self, enable):
        return _mscl.InertialNode_enableRtk(self, enable)

    def getEventTriggerStatus(self, *args):
        return _mscl.InertialNode_getEventTriggerStatus(self, *args)

    def getEventActionStatus(self, *args):
        return _mscl.InertialNode_getEventActionStatus(self, *args)

    def getNmeaMessageFormat(self):
        return _mscl.InertialNode_getNmeaMessageFormat(self)

    def setNmeaMessageFormat(self, nmeaFormats):
        return _mscl.InertialNode_setNmeaMessageFormat(self, nmeaFormats)

# Register InertialNode in _mscl:
_mscl.InertialNode_swigregister(InertialNode)

class DisplacementNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, connection):
        _mscl.DisplacementNode_swiginit(self, _mscl.new_DisplacementNode(connection))
    __swig_destroy__ = _mscl.delete_DisplacementNode

    def doCommand(self, descriptorSet, cmdDescriptor, fieldData, ackNackResponse, dataResponse, responseDataDescriptor=0):
        return _mscl.DisplacementNode_doCommand(self, descriptorSet, cmdDescriptor, fieldData, ackNackResponse, dataResponse, responseDataDescriptor)

    @staticmethod
    def deviceName(serial):
        return _mscl.DisplacementNode_deviceName(serial)

    def connection(self):
        return _mscl.DisplacementNode_connection(self)

    def features(self):
        return _mscl.DisplacementNode_features(self)

    def lastCommunicationTime(self):
        return _mscl.DisplacementNode_lastCommunicationTime(self)

    def lastDeviceState(self):
        return _mscl.DisplacementNode_lastDeviceState(self)

    def firmwareVersion(self):
        return _mscl.DisplacementNode_firmwareVersion(self)

    def model(self):
        return _mscl.DisplacementNode_model(self)

    def modelName(self):
        return _mscl.DisplacementNode_modelName(self)

    def modelNumber(self):
        return _mscl.DisplacementNode_modelNumber(self)

    def serialNumber(self):
        return _mscl.DisplacementNode_serialNumber(self)

    def lotNumber(self):
        return _mscl.DisplacementNode_lotNumber(self)

    def deviceOptions(self):
        return _mscl.DisplacementNode_deviceOptions(self)

    def getDataPackets(self, timeout=0, maxPackets=0):
        return _mscl.DisplacementNode_getDataPackets(self, timeout, maxPackets)

    def totalPackets(self):
        return _mscl.DisplacementNode_totalPackets(self)

    def timeout(self, *args):
        return _mscl.DisplacementNode_timeout(self, *args)

    def name(self):
        return _mscl.DisplacementNode_name(self)

    def ping(self):
        return _mscl.DisplacementNode_ping(self)

    def setToIdle(self):
        return _mscl.DisplacementNode_setToIdle(self)

    def cyclePower(self):
        return _mscl.DisplacementNode_cyclePower(self)

    def resume(self):
        return _mscl.DisplacementNode_resume(self)

    def getDisplacementOutputDataRate(self):
        return _mscl.DisplacementNode_getDisplacementOutputDataRate(self)

    def getAnalogToDisplacementCal(self):
        return _mscl.DisplacementNode_getAnalogToDisplacementCal(self)

    def setDeviceTime(self, *args):
        return _mscl.DisplacementNode_setDeviceTime(self, *args)

# Register DisplacementNode in _mscl:
_mscl.DisplacementNode_swigregister(DisplacementNode)

def DisplacementNode_deviceName(serial):
    return _mscl.DisplacementNode_deviceName(serial)

class RTKNode(MipNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, connection):
        _mscl.RTKNode_swiginit(self, _mscl.new_RTKNode(connection))
    __swig_destroy__ = _mscl.delete_RTKNode

    def getCommunicationMode(self):
        return _mscl.RTKNode_getCommunicationMode(self)

    def setCommunicationMode(self, communicationMode):
        return _mscl.RTKNode_setCommunicationMode(self, communicationMode)

    def getDeviceStatusFlags(self):
        return _mscl.RTKNode_getDeviceStatusFlags(self)

    def getActivationCode(self):
        return _mscl.RTKNode_getActivationCode(self)

    def getStatusBitfieldVersion(self):
        return _mscl.RTKNode_getStatusBitfieldVersion(self)

# Register RTKNode in _mscl:
_mscl.RTKNode_swigregister(RTKNode)

class ChannelData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.ChannelData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.ChannelData___nonzero__(self)

    def __bool__(self):
        return _mscl.ChannelData___bool__(self)

    def __len__(self):
        return _mscl.ChannelData___len__(self)

    def __getslice__(self, i, j):
        return _mscl.ChannelData___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.ChannelData___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.ChannelData___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.ChannelData___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.ChannelData___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.ChannelData___setitem__(self, *args)

    def pop(self):
        return _mscl.ChannelData_pop(self)

    def append(self, x):
        return _mscl.ChannelData_append(self, x)

    def empty(self):
        return _mscl.ChannelData_empty(self)

    def size(self):
        return _mscl.ChannelData_size(self)

    def swap(self, v):
        return _mscl.ChannelData_swap(self, v)

    def begin(self):
        return _mscl.ChannelData_begin(self)

    def end(self):
        return _mscl.ChannelData_end(self)

    def rbegin(self):
        return _mscl.ChannelData_rbegin(self)

    def rend(self):
        return _mscl.ChannelData_rend(self)

    def clear(self):
        return _mscl.ChannelData_clear(self)

    def get_allocator(self):
        return _mscl.ChannelData_get_allocator(self)

    def pop_back(self):
        return _mscl.ChannelData_pop_back(self)

    def erase(self, *args):
        return _mscl.ChannelData_erase(self, *args)

    def __init__(self, *args):
        _mscl.ChannelData_swiginit(self, _mscl.new_ChannelData(*args))

    def push_back(self, x):
        return _mscl.ChannelData_push_back(self, x)

    def front(self):
        return _mscl.ChannelData_front(self)

    def back(self):
        return _mscl.ChannelData_back(self)

    def assign(self, n, x):
        return _mscl.ChannelData_assign(self, n, x)

    def resize(self, *args):
        return _mscl.ChannelData_resize(self, *args)

    def insert(self, *args):
        return _mscl.ChannelData_insert(self, *args)

    def reserve(self, n):
        return _mscl.ChannelData_reserve(self, n)

    def capacity(self):
        return _mscl.ChannelData_capacity(self)
    __swig_destroy__ = _mscl.delete_ChannelData

# Register ChannelData in _mscl:
_mscl.ChannelData_swigregister(ChannelData)

class MipDataPoints(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.MipDataPoints_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.MipDataPoints___nonzero__(self)

    def __bool__(self):
        return _mscl.MipDataPoints___bool__(self)

    def __len__(self):
        return _mscl.MipDataPoints___len__(self)

    def __getslice__(self, i, j):
        return _mscl.MipDataPoints___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.MipDataPoints___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.MipDataPoints___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.MipDataPoints___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.MipDataPoints___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.MipDataPoints___setitem__(self, *args)

    def pop(self):
        return _mscl.MipDataPoints_pop(self)

    def append(self, x):
        return _mscl.MipDataPoints_append(self, x)

    def empty(self):
        return _mscl.MipDataPoints_empty(self)

    def size(self):
        return _mscl.MipDataPoints_size(self)

    def swap(self, v):
        return _mscl.MipDataPoints_swap(self, v)

    def begin(self):
        return _mscl.MipDataPoints_begin(self)

    def end(self):
        return _mscl.MipDataPoints_end(self)

    def rbegin(self):
        return _mscl.MipDataPoints_rbegin(self)

    def rend(self):
        return _mscl.MipDataPoints_rend(self)

    def clear(self):
        return _mscl.MipDataPoints_clear(self)

    def get_allocator(self):
        return _mscl.MipDataPoints_get_allocator(self)

    def pop_back(self):
        return _mscl.MipDataPoints_pop_back(self)

    def erase(self, *args):
        return _mscl.MipDataPoints_erase(self, *args)

    def __init__(self, *args):
        _mscl.MipDataPoints_swiginit(self, _mscl.new_MipDataPoints(*args))

    def push_back(self, x):
        return _mscl.MipDataPoints_push_back(self, x)

    def front(self):
        return _mscl.MipDataPoints_front(self)

    def back(self):
        return _mscl.MipDataPoints_back(self)

    def assign(self, n, x):
        return _mscl.MipDataPoints_assign(self, n, x)

    def resize(self, *args):
        return _mscl.MipDataPoints_resize(self, *args)

    def insert(self, *args):
        return _mscl.MipDataPoints_insert(self, *args)

    def reserve(self, n):
        return _mscl.MipDataPoints_reserve(self, n)

    def capacity(self):
        return _mscl.MipDataPoints_capacity(self)
    __swig_destroy__ = _mscl.delete_MipDataPoints

# Register MipDataPoints in _mscl:
_mscl.MipDataPoints_swigregister(MipDataPoints)

class Bytes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.Bytes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.Bytes___nonzero__(self)

    def __bool__(self):
        return _mscl.Bytes___bool__(self)

    def __len__(self):
        return _mscl.Bytes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.Bytes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.Bytes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.Bytes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.Bytes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.Bytes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.Bytes___setitem__(self, *args)

    def pop(self):
        return _mscl.Bytes_pop(self)

    def append(self, x):
        return _mscl.Bytes_append(self, x)

    def empty(self):
        return _mscl.Bytes_empty(self)

    def size(self):
        return _mscl.Bytes_size(self)

    def swap(self, v):
        return _mscl.Bytes_swap(self, v)

    def begin(self):
        return _mscl.Bytes_begin(self)

    def end(self):
        return _mscl.Bytes_end(self)

    def rbegin(self):
        return _mscl.Bytes_rbegin(self)

    def rend(self):
        return _mscl.Bytes_rend(self)

    def clear(self):
        return _mscl.Bytes_clear(self)

    def get_allocator(self):
        return _mscl.Bytes_get_allocator(self)

    def pop_back(self):
        return _mscl.Bytes_pop_back(self)

    def erase(self, *args):
        return _mscl.Bytes_erase(self, *args)

    def __init__(self, *args):
        _mscl.Bytes_swiginit(self, _mscl.new_Bytes(*args))

    def push_back(self, x):
        return _mscl.Bytes_push_back(self, x)

    def front(self):
        return _mscl.Bytes_front(self)

    def back(self):
        return _mscl.Bytes_back(self)

    def assign(self, n, x):
        return _mscl.Bytes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.Bytes_resize(self, *args)

    def insert(self, *args):
        return _mscl.Bytes_insert(self, *args)

    def reserve(self, n):
        return _mscl.Bytes_reserve(self, n)

    def capacity(self):
        return _mscl.Bytes_capacity(self)
    __swig_destroy__ = _mscl.delete_Bytes

# Register Bytes in _mscl:
_mscl.Bytes_swigregister(Bytes)

class BytesCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.BytesCollection_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.BytesCollection___nonzero__(self)

    def __bool__(self):
        return _mscl.BytesCollection___bool__(self)

    def __len__(self):
        return _mscl.BytesCollection___len__(self)

    def __getslice__(self, i, j):
        return _mscl.BytesCollection___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.BytesCollection___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.BytesCollection___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.BytesCollection___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.BytesCollection___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.BytesCollection___setitem__(self, *args)

    def pop(self):
        return _mscl.BytesCollection_pop(self)

    def append(self, x):
        return _mscl.BytesCollection_append(self, x)

    def empty(self):
        return _mscl.BytesCollection_empty(self)

    def size(self):
        return _mscl.BytesCollection_size(self)

    def swap(self, v):
        return _mscl.BytesCollection_swap(self, v)

    def begin(self):
        return _mscl.BytesCollection_begin(self)

    def end(self):
        return _mscl.BytesCollection_end(self)

    def rbegin(self):
        return _mscl.BytesCollection_rbegin(self)

    def rend(self):
        return _mscl.BytesCollection_rend(self)

    def clear(self):
        return _mscl.BytesCollection_clear(self)

    def get_allocator(self):
        return _mscl.BytesCollection_get_allocator(self)

    def pop_back(self):
        return _mscl.BytesCollection_pop_back(self)

    def erase(self, *args):
        return _mscl.BytesCollection_erase(self, *args)

    def __init__(self, *args):
        _mscl.BytesCollection_swiginit(self, _mscl.new_BytesCollection(*args))

    def push_back(self, x):
        return _mscl.BytesCollection_push_back(self, x)

    def front(self):
        return _mscl.BytesCollection_front(self)

    def back(self):
        return _mscl.BytesCollection_back(self)

    def assign(self, n, x):
        return _mscl.BytesCollection_assign(self, n, x)

    def resize(self, *args):
        return _mscl.BytesCollection_resize(self, *args)

    def insert(self, *args):
        return _mscl.BytesCollection_insert(self, *args)

    def reserve(self, n):
        return _mscl.BytesCollection_reserve(self, n)

    def capacity(self):
        return _mscl.BytesCollection_capacity(self)
    __swig_destroy__ = _mscl.delete_BytesCollection

# Register BytesCollection in _mscl:
_mscl.BytesCollection_swigregister(BytesCollection)

class DeviceList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DeviceList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DeviceList___nonzero__(self)

    def __bool__(self):
        return _mscl.DeviceList___bool__(self)

    def __len__(self):
        return _mscl.DeviceList___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.DeviceList___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.DeviceList___delitem__(self, key)

    def has_key(self, key):
        return _mscl.DeviceList_has_key(self, key)

    def keys(self):
        return _mscl.DeviceList_keys(self)

    def values(self):
        return _mscl.DeviceList_values(self)

    def items(self):
        return _mscl.DeviceList_items(self)

    def __contains__(self, key):
        return _mscl.DeviceList___contains__(self, key)

    def key_iterator(self):
        return _mscl.DeviceList_key_iterator(self)

    def value_iterator(self):
        return _mscl.DeviceList_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.DeviceList___setitem__(self, *args)

    def asdict(self):
        return _mscl.DeviceList_asdict(self)

    def __init__(self, *args):
        _mscl.DeviceList_swiginit(self, _mscl.new_DeviceList(*args))

    def empty(self):
        return _mscl.DeviceList_empty(self)

    def size(self):
        return _mscl.DeviceList_size(self)

    def swap(self, v):
        return _mscl.DeviceList_swap(self, v)

    def begin(self):
        return _mscl.DeviceList_begin(self)

    def end(self):
        return _mscl.DeviceList_end(self)

    def rbegin(self):
        return _mscl.DeviceList_rbegin(self)

    def rend(self):
        return _mscl.DeviceList_rend(self)

    def clear(self):
        return _mscl.DeviceList_clear(self)

    def get_allocator(self):
        return _mscl.DeviceList_get_allocator(self)

    def count(self, x):
        return _mscl.DeviceList_count(self, x)

    def erase(self, *args):
        return _mscl.DeviceList_erase(self, *args)

    def find(self, x):
        return _mscl.DeviceList_find(self, x)

    def lower_bound(self, x):
        return _mscl.DeviceList_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.DeviceList_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_DeviceList

# Register DeviceList in _mscl:
_mscl.DeviceList_swigregister(DeviceList)

class NodeDiscoveries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.NodeDiscoveries_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.NodeDiscoveries___nonzero__(self)

    def __bool__(self):
        return _mscl.NodeDiscoveries___bool__(self)

    def __len__(self):
        return _mscl.NodeDiscoveries___len__(self)

    def __getslice__(self, i, j):
        return _mscl.NodeDiscoveries___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.NodeDiscoveries___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.NodeDiscoveries___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.NodeDiscoveries___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.NodeDiscoveries___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.NodeDiscoveries___setitem__(self, *args)

    def pop(self):
        return _mscl.NodeDiscoveries_pop(self)

    def append(self, x):
        return _mscl.NodeDiscoveries_append(self, x)

    def empty(self):
        return _mscl.NodeDiscoveries_empty(self)

    def size(self):
        return _mscl.NodeDiscoveries_size(self)

    def swap(self, v):
        return _mscl.NodeDiscoveries_swap(self, v)

    def begin(self):
        return _mscl.NodeDiscoveries_begin(self)

    def end(self):
        return _mscl.NodeDiscoveries_end(self)

    def rbegin(self):
        return _mscl.NodeDiscoveries_rbegin(self)

    def rend(self):
        return _mscl.NodeDiscoveries_rend(self)

    def clear(self):
        return _mscl.NodeDiscoveries_clear(self)

    def get_allocator(self):
        return _mscl.NodeDiscoveries_get_allocator(self)

    def pop_back(self):
        return _mscl.NodeDiscoveries_pop_back(self)

    def erase(self, *args):
        return _mscl.NodeDiscoveries_erase(self, *args)

    def __init__(self, *args):
        _mscl.NodeDiscoveries_swiginit(self, _mscl.new_NodeDiscoveries(*args))

    def push_back(self, x):
        return _mscl.NodeDiscoveries_push_back(self, x)

    def front(self):
        return _mscl.NodeDiscoveries_front(self)

    def back(self):
        return _mscl.NodeDiscoveries_back(self)

    def assign(self, n, x):
        return _mscl.NodeDiscoveries_assign(self, n, x)

    def resize(self, *args):
        return _mscl.NodeDiscoveries_resize(self, *args)

    def insert(self, *args):
        return _mscl.NodeDiscoveries_insert(self, *args)

    def reserve(self, n):
        return _mscl.NodeDiscoveries_reserve(self, n)

    def capacity(self):
        return _mscl.NodeDiscoveries_capacity(self)
    __swig_destroy__ = _mscl.delete_NodeDiscoveries

# Register NodeDiscoveries in _mscl:
_mscl.NodeDiscoveries_swigregister(NodeDiscoveries)

class DataSweeps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DataSweeps_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DataSweeps___nonzero__(self)

    def __bool__(self):
        return _mscl.DataSweeps___bool__(self)

    def __len__(self):
        return _mscl.DataSweeps___len__(self)

    def __getslice__(self, i, j):
        return _mscl.DataSweeps___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.DataSweeps___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.DataSweeps___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.DataSweeps___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.DataSweeps___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.DataSweeps___setitem__(self, *args)

    def pop(self):
        return _mscl.DataSweeps_pop(self)

    def append(self, x):
        return _mscl.DataSweeps_append(self, x)

    def empty(self):
        return _mscl.DataSweeps_empty(self)

    def size(self):
        return _mscl.DataSweeps_size(self)

    def swap(self, v):
        return _mscl.DataSweeps_swap(self, v)

    def begin(self):
        return _mscl.DataSweeps_begin(self)

    def end(self):
        return _mscl.DataSweeps_end(self)

    def rbegin(self):
        return _mscl.DataSweeps_rbegin(self)

    def rend(self):
        return _mscl.DataSweeps_rend(self)

    def clear(self):
        return _mscl.DataSweeps_clear(self)

    def get_allocator(self):
        return _mscl.DataSweeps_get_allocator(self)

    def pop_back(self):
        return _mscl.DataSweeps_pop_back(self)

    def erase(self, *args):
        return _mscl.DataSweeps_erase(self, *args)

    def __init__(self, *args):
        _mscl.DataSweeps_swiginit(self, _mscl.new_DataSweeps(*args))

    def push_back(self, x):
        return _mscl.DataSweeps_push_back(self, x)

    def front(self):
        return _mscl.DataSweeps_front(self)

    def back(self):
        return _mscl.DataSweeps_back(self)

    def assign(self, n, x):
        return _mscl.DataSweeps_assign(self, n, x)

    def resize(self, *args):
        return _mscl.DataSweeps_resize(self, *args)

    def insert(self, *args):
        return _mscl.DataSweeps_insert(self, *args)

    def reserve(self, n):
        return _mscl.DataSweeps_reserve(self, n)

    def capacity(self):
        return _mscl.DataSweeps_capacity(self)
    __swig_destroy__ = _mscl.delete_DataSweeps

# Register DataSweeps in _mscl:
_mscl.DataSweeps_swigregister(DataSweeps)

class LoggedDataSweeps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.LoggedDataSweeps_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.LoggedDataSweeps___nonzero__(self)

    def __bool__(self):
        return _mscl.LoggedDataSweeps___bool__(self)

    def __len__(self):
        return _mscl.LoggedDataSweeps___len__(self)

    def __getslice__(self, i, j):
        return _mscl.LoggedDataSweeps___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.LoggedDataSweeps___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.LoggedDataSweeps___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.LoggedDataSweeps___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.LoggedDataSweeps___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.LoggedDataSweeps___setitem__(self, *args)

    def pop(self):
        return _mscl.LoggedDataSweeps_pop(self)

    def append(self, x):
        return _mscl.LoggedDataSweeps_append(self, x)

    def empty(self):
        return _mscl.LoggedDataSweeps_empty(self)

    def size(self):
        return _mscl.LoggedDataSweeps_size(self)

    def swap(self, v):
        return _mscl.LoggedDataSweeps_swap(self, v)

    def begin(self):
        return _mscl.LoggedDataSweeps_begin(self)

    def end(self):
        return _mscl.LoggedDataSweeps_end(self)

    def rbegin(self):
        return _mscl.LoggedDataSweeps_rbegin(self)

    def rend(self):
        return _mscl.LoggedDataSweeps_rend(self)

    def clear(self):
        return _mscl.LoggedDataSweeps_clear(self)

    def get_allocator(self):
        return _mscl.LoggedDataSweeps_get_allocator(self)

    def pop_back(self):
        return _mscl.LoggedDataSweeps_pop_back(self)

    def erase(self, *args):
        return _mscl.LoggedDataSweeps_erase(self, *args)

    def __init__(self, *args):
        _mscl.LoggedDataSweeps_swiginit(self, _mscl.new_LoggedDataSweeps(*args))

    def push_back(self, x):
        return _mscl.LoggedDataSweeps_push_back(self, x)

    def front(self):
        return _mscl.LoggedDataSweeps_front(self)

    def back(self):
        return _mscl.LoggedDataSweeps_back(self)

    def assign(self, n, x):
        return _mscl.LoggedDataSweeps_assign(self, n, x)

    def resize(self, *args):
        return _mscl.LoggedDataSweeps_resize(self, *args)

    def insert(self, *args):
        return _mscl.LoggedDataSweeps_insert(self, *args)

    def reserve(self, n):
        return _mscl.LoggedDataSweeps_reserve(self, n)

    def capacity(self):
        return _mscl.LoggedDataSweeps_capacity(self)
    __swig_destroy__ = _mscl.delete_LoggedDataSweeps

# Register LoggedDataSweeps in _mscl:
_mscl.LoggedDataSweeps_swigregister(LoggedDataSweeps)

class MipDataPackets(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.MipDataPackets_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.MipDataPackets___nonzero__(self)

    def __bool__(self):
        return _mscl.MipDataPackets___bool__(self)

    def __len__(self):
        return _mscl.MipDataPackets___len__(self)

    def __getslice__(self, i, j):
        return _mscl.MipDataPackets___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.MipDataPackets___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.MipDataPackets___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.MipDataPackets___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.MipDataPackets___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.MipDataPackets___setitem__(self, *args)

    def pop(self):
        return _mscl.MipDataPackets_pop(self)

    def append(self, x):
        return _mscl.MipDataPackets_append(self, x)

    def empty(self):
        return _mscl.MipDataPackets_empty(self)

    def size(self):
        return _mscl.MipDataPackets_size(self)

    def swap(self, v):
        return _mscl.MipDataPackets_swap(self, v)

    def begin(self):
        return _mscl.MipDataPackets_begin(self)

    def end(self):
        return _mscl.MipDataPackets_end(self)

    def rbegin(self):
        return _mscl.MipDataPackets_rbegin(self)

    def rend(self):
        return _mscl.MipDataPackets_rend(self)

    def clear(self):
        return _mscl.MipDataPackets_clear(self)

    def get_allocator(self):
        return _mscl.MipDataPackets_get_allocator(self)

    def pop_back(self):
        return _mscl.MipDataPackets_pop_back(self)

    def erase(self, *args):
        return _mscl.MipDataPackets_erase(self, *args)

    def __init__(self, *args):
        _mscl.MipDataPackets_swiginit(self, _mscl.new_MipDataPackets(*args))

    def push_back(self, x):
        return _mscl.MipDataPackets_push_back(self, x)

    def front(self):
        return _mscl.MipDataPackets_front(self)

    def back(self):
        return _mscl.MipDataPackets_back(self)

    def assign(self, n, x):
        return _mscl.MipDataPackets_assign(self, n, x)

    def resize(self, *args):
        return _mscl.MipDataPackets_resize(self, *args)

    def insert(self, *args):
        return _mscl.MipDataPackets_insert(self, *args)

    def reserve(self, n):
        return _mscl.MipDataPackets_reserve(self, n)

    def capacity(self):
        return _mscl.MipDataPackets_capacity(self)
    __swig_destroy__ = _mscl.delete_MipDataPackets

# Register MipDataPackets in _mscl:
_mscl.MipDataPackets_swigregister(MipDataPackets)

class RawBytePackets(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.RawBytePackets_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.RawBytePackets___nonzero__(self)

    def __bool__(self):
        return _mscl.RawBytePackets___bool__(self)

    def __len__(self):
        return _mscl.RawBytePackets___len__(self)

    def __getslice__(self, i, j):
        return _mscl.RawBytePackets___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.RawBytePackets___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.RawBytePackets___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.RawBytePackets___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.RawBytePackets___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.RawBytePackets___setitem__(self, *args)

    def pop(self):
        return _mscl.RawBytePackets_pop(self)

    def append(self, x):
        return _mscl.RawBytePackets_append(self, x)

    def empty(self):
        return _mscl.RawBytePackets_empty(self)

    def size(self):
        return _mscl.RawBytePackets_size(self)

    def swap(self, v):
        return _mscl.RawBytePackets_swap(self, v)

    def begin(self):
        return _mscl.RawBytePackets_begin(self)

    def end(self):
        return _mscl.RawBytePackets_end(self)

    def rbegin(self):
        return _mscl.RawBytePackets_rbegin(self)

    def rend(self):
        return _mscl.RawBytePackets_rend(self)

    def clear(self):
        return _mscl.RawBytePackets_clear(self)

    def get_allocator(self):
        return _mscl.RawBytePackets_get_allocator(self)

    def pop_back(self):
        return _mscl.RawBytePackets_pop_back(self)

    def erase(self, *args):
        return _mscl.RawBytePackets_erase(self, *args)

    def __init__(self, *args):
        _mscl.RawBytePackets_swiginit(self, _mscl.new_RawBytePackets(*args))

    def push_back(self, x):
        return _mscl.RawBytePackets_push_back(self, x)

    def front(self):
        return _mscl.RawBytePackets_front(self)

    def back(self):
        return _mscl.RawBytePackets_back(self)

    def assign(self, n, x):
        return _mscl.RawBytePackets_assign(self, n, x)

    def resize(self, *args):
        return _mscl.RawBytePackets_resize(self, *args)

    def insert(self, *args):
        return _mscl.RawBytePackets_insert(self, *args)

    def reserve(self, n):
        return _mscl.RawBytePackets_reserve(self, n)

    def capacity(self):
        return _mscl.RawBytePackets_capacity(self)
    __swig_destroy__ = _mscl.delete_RawBytePackets

# Register RawBytePackets in _mscl:
_mscl.RawBytePackets_swigregister(RawBytePackets)

class MipChannels(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.MipChannels_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.MipChannels___nonzero__(self)

    def __bool__(self):
        return _mscl.MipChannels___bool__(self)

    def __len__(self):
        return _mscl.MipChannels___len__(self)

    def __getslice__(self, i, j):
        return _mscl.MipChannels___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.MipChannels___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.MipChannels___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.MipChannels___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.MipChannels___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.MipChannels___setitem__(self, *args)

    def pop(self):
        return _mscl.MipChannels_pop(self)

    def append(self, x):
        return _mscl.MipChannels_append(self, x)

    def empty(self):
        return _mscl.MipChannels_empty(self)

    def size(self):
        return _mscl.MipChannels_size(self)

    def swap(self, v):
        return _mscl.MipChannels_swap(self, v)

    def begin(self):
        return _mscl.MipChannels_begin(self)

    def end(self):
        return _mscl.MipChannels_end(self)

    def rbegin(self):
        return _mscl.MipChannels_rbegin(self)

    def rend(self):
        return _mscl.MipChannels_rend(self)

    def clear(self):
        return _mscl.MipChannels_clear(self)

    def get_allocator(self):
        return _mscl.MipChannels_get_allocator(self)

    def pop_back(self):
        return _mscl.MipChannels_pop_back(self)

    def erase(self, *args):
        return _mscl.MipChannels_erase(self, *args)

    def __init__(self, *args):
        _mscl.MipChannels_swiginit(self, _mscl.new_MipChannels(*args))

    def push_back(self, x):
        return _mscl.MipChannels_push_back(self, x)

    def front(self):
        return _mscl.MipChannels_front(self)

    def back(self):
        return _mscl.MipChannels_back(self)

    def assign(self, n, x):
        return _mscl.MipChannels_assign(self, n, x)

    def resize(self, *args):
        return _mscl.MipChannels_resize(self, *args)

    def insert(self, *args):
        return _mscl.MipChannels_insert(self, *args)

    def reserve(self, n):
        return _mscl.MipChannels_reserve(self, n)

    def capacity(self):
        return _mscl.MipChannels_capacity(self)
    __swig_destroy__ = _mscl.delete_MipChannels

# Register MipChannels in _mscl:
_mscl.MipChannels_swigregister(MipChannels)

class DataCollectionMethods(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DataCollectionMethods_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DataCollectionMethods___nonzero__(self)

    def __bool__(self):
        return _mscl.DataCollectionMethods___bool__(self)

    def __len__(self):
        return _mscl.DataCollectionMethods___len__(self)

    def __getslice__(self, i, j):
        return _mscl.DataCollectionMethods___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.DataCollectionMethods___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.DataCollectionMethods___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.DataCollectionMethods___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.DataCollectionMethods___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.DataCollectionMethods___setitem__(self, *args)

    def pop(self):
        return _mscl.DataCollectionMethods_pop(self)

    def append(self, x):
        return _mscl.DataCollectionMethods_append(self, x)

    def empty(self):
        return _mscl.DataCollectionMethods_empty(self)

    def size(self):
        return _mscl.DataCollectionMethods_size(self)

    def swap(self, v):
        return _mscl.DataCollectionMethods_swap(self, v)

    def begin(self):
        return _mscl.DataCollectionMethods_begin(self)

    def end(self):
        return _mscl.DataCollectionMethods_end(self)

    def rbegin(self):
        return _mscl.DataCollectionMethods_rbegin(self)

    def rend(self):
        return _mscl.DataCollectionMethods_rend(self)

    def clear(self):
        return _mscl.DataCollectionMethods_clear(self)

    def get_allocator(self):
        return _mscl.DataCollectionMethods_get_allocator(self)

    def pop_back(self):
        return _mscl.DataCollectionMethods_pop_back(self)

    def erase(self, *args):
        return _mscl.DataCollectionMethods_erase(self, *args)

    def __init__(self, *args):
        _mscl.DataCollectionMethods_swiginit(self, _mscl.new_DataCollectionMethods(*args))

    def push_back(self, x):
        return _mscl.DataCollectionMethods_push_back(self, x)

    def front(self):
        return _mscl.DataCollectionMethods_front(self)

    def back(self):
        return _mscl.DataCollectionMethods_back(self)

    def assign(self, n, x):
        return _mscl.DataCollectionMethods_assign(self, n, x)

    def resize(self, *args):
        return _mscl.DataCollectionMethods_resize(self, *args)

    def insert(self, *args):
        return _mscl.DataCollectionMethods_insert(self, *args)

    def reserve(self, n):
        return _mscl.DataCollectionMethods_reserve(self, n)

    def capacity(self):
        return _mscl.DataCollectionMethods_capacity(self)
    __swig_destroy__ = _mscl.delete_DataCollectionMethods

# Register DataCollectionMethods in _mscl:
_mscl.DataCollectionMethods_swigregister(DataCollectionMethods)

class DataFormats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DataFormats_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DataFormats___nonzero__(self)

    def __bool__(self):
        return _mscl.DataFormats___bool__(self)

    def __len__(self):
        return _mscl.DataFormats___len__(self)

    def __getslice__(self, i, j):
        return _mscl.DataFormats___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.DataFormats___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.DataFormats___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.DataFormats___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.DataFormats___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.DataFormats___setitem__(self, *args)

    def pop(self):
        return _mscl.DataFormats_pop(self)

    def append(self, x):
        return _mscl.DataFormats_append(self, x)

    def empty(self):
        return _mscl.DataFormats_empty(self)

    def size(self):
        return _mscl.DataFormats_size(self)

    def swap(self, v):
        return _mscl.DataFormats_swap(self, v)

    def begin(self):
        return _mscl.DataFormats_begin(self)

    def end(self):
        return _mscl.DataFormats_end(self)

    def rbegin(self):
        return _mscl.DataFormats_rbegin(self)

    def rend(self):
        return _mscl.DataFormats_rend(self)

    def clear(self):
        return _mscl.DataFormats_clear(self)

    def get_allocator(self):
        return _mscl.DataFormats_get_allocator(self)

    def pop_back(self):
        return _mscl.DataFormats_pop_back(self)

    def erase(self, *args):
        return _mscl.DataFormats_erase(self, *args)

    def __init__(self, *args):
        _mscl.DataFormats_swiginit(self, _mscl.new_DataFormats(*args))

    def push_back(self, x):
        return _mscl.DataFormats_push_back(self, x)

    def front(self):
        return _mscl.DataFormats_front(self)

    def back(self):
        return _mscl.DataFormats_back(self)

    def assign(self, n, x):
        return _mscl.DataFormats_assign(self, n, x)

    def resize(self, *args):
        return _mscl.DataFormats_resize(self, *args)

    def insert(self, *args):
        return _mscl.DataFormats_insert(self, *args)

    def reserve(self, n):
        return _mscl.DataFormats_reserve(self, n)

    def capacity(self):
        return _mscl.DataFormats_capacity(self)
    __swig_destroy__ = _mscl.delete_DataFormats

# Register DataFormats in _mscl:
_mscl.DataFormats_swigregister(DataFormats)

class WirelessSampleRates(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.WirelessSampleRates_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.WirelessSampleRates___nonzero__(self)

    def __bool__(self):
        return _mscl.WirelessSampleRates___bool__(self)

    def __len__(self):
        return _mscl.WirelessSampleRates___len__(self)

    def __getslice__(self, i, j):
        return _mscl.WirelessSampleRates___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.WirelessSampleRates___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.WirelessSampleRates___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.WirelessSampleRates___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.WirelessSampleRates___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.WirelessSampleRates___setitem__(self, *args)

    def pop(self):
        return _mscl.WirelessSampleRates_pop(self)

    def append(self, x):
        return _mscl.WirelessSampleRates_append(self, x)

    def empty(self):
        return _mscl.WirelessSampleRates_empty(self)

    def size(self):
        return _mscl.WirelessSampleRates_size(self)

    def swap(self, v):
        return _mscl.WirelessSampleRates_swap(self, v)

    def begin(self):
        return _mscl.WirelessSampleRates_begin(self)

    def end(self):
        return _mscl.WirelessSampleRates_end(self)

    def rbegin(self):
        return _mscl.WirelessSampleRates_rbegin(self)

    def rend(self):
        return _mscl.WirelessSampleRates_rend(self)

    def clear(self):
        return _mscl.WirelessSampleRates_clear(self)

    def get_allocator(self):
        return _mscl.WirelessSampleRates_get_allocator(self)

    def pop_back(self):
        return _mscl.WirelessSampleRates_pop_back(self)

    def erase(self, *args):
        return _mscl.WirelessSampleRates_erase(self, *args)

    def __init__(self, *args):
        _mscl.WirelessSampleRates_swiginit(self, _mscl.new_WirelessSampleRates(*args))

    def push_back(self, x):
        return _mscl.WirelessSampleRates_push_back(self, x)

    def front(self):
        return _mscl.WirelessSampleRates_front(self)

    def back(self):
        return _mscl.WirelessSampleRates_back(self)

    def assign(self, n, x):
        return _mscl.WirelessSampleRates_assign(self, n, x)

    def resize(self, *args):
        return _mscl.WirelessSampleRates_resize(self, *args)

    def insert(self, *args):
        return _mscl.WirelessSampleRates_insert(self, *args)

    def reserve(self, n):
        return _mscl.WirelessSampleRates_reserve(self, n)

    def capacity(self):
        return _mscl.WirelessSampleRates_capacity(self)
    __swig_destroy__ = _mscl.delete_WirelessSampleRates

# Register WirelessSampleRates in _mscl:
_mscl.WirelessSampleRates_swigregister(WirelessSampleRates)

class SamplingModes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.SamplingModes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.SamplingModes___nonzero__(self)

    def __bool__(self):
        return _mscl.SamplingModes___bool__(self)

    def __len__(self):
        return _mscl.SamplingModes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.SamplingModes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.SamplingModes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.SamplingModes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.SamplingModes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.SamplingModes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.SamplingModes___setitem__(self, *args)

    def pop(self):
        return _mscl.SamplingModes_pop(self)

    def append(self, x):
        return _mscl.SamplingModes_append(self, x)

    def empty(self):
        return _mscl.SamplingModes_empty(self)

    def size(self):
        return _mscl.SamplingModes_size(self)

    def swap(self, v):
        return _mscl.SamplingModes_swap(self, v)

    def begin(self):
        return _mscl.SamplingModes_begin(self)

    def end(self):
        return _mscl.SamplingModes_end(self)

    def rbegin(self):
        return _mscl.SamplingModes_rbegin(self)

    def rend(self):
        return _mscl.SamplingModes_rend(self)

    def clear(self):
        return _mscl.SamplingModes_clear(self)

    def get_allocator(self):
        return _mscl.SamplingModes_get_allocator(self)

    def pop_back(self):
        return _mscl.SamplingModes_pop_back(self)

    def erase(self, *args):
        return _mscl.SamplingModes_erase(self, *args)

    def __init__(self, *args):
        _mscl.SamplingModes_swiginit(self, _mscl.new_SamplingModes(*args))

    def push_back(self, x):
        return _mscl.SamplingModes_push_back(self, x)

    def front(self):
        return _mscl.SamplingModes_front(self)

    def back(self):
        return _mscl.SamplingModes_back(self)

    def assign(self, n, x):
        return _mscl.SamplingModes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.SamplingModes_resize(self, *args)

    def insert(self, *args):
        return _mscl.SamplingModes_insert(self, *args)

    def reserve(self, n):
        return _mscl.SamplingModes_reserve(self, n)

    def capacity(self):
        return _mscl.SamplingModes_capacity(self)
    __swig_destroy__ = _mscl.delete_SamplingModes

# Register SamplingModes in _mscl:
_mscl.SamplingModes_swigregister(SamplingModes)

class DefaultModes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DefaultModes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DefaultModes___nonzero__(self)

    def __bool__(self):
        return _mscl.DefaultModes___bool__(self)

    def __len__(self):
        return _mscl.DefaultModes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.DefaultModes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.DefaultModes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.DefaultModes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.DefaultModes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.DefaultModes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.DefaultModes___setitem__(self, *args)

    def pop(self):
        return _mscl.DefaultModes_pop(self)

    def append(self, x):
        return _mscl.DefaultModes_append(self, x)

    def empty(self):
        return _mscl.DefaultModes_empty(self)

    def size(self):
        return _mscl.DefaultModes_size(self)

    def swap(self, v):
        return _mscl.DefaultModes_swap(self, v)

    def begin(self):
        return _mscl.DefaultModes_begin(self)

    def end(self):
        return _mscl.DefaultModes_end(self)

    def rbegin(self):
        return _mscl.DefaultModes_rbegin(self)

    def rend(self):
        return _mscl.DefaultModes_rend(self)

    def clear(self):
        return _mscl.DefaultModes_clear(self)

    def get_allocator(self):
        return _mscl.DefaultModes_get_allocator(self)

    def pop_back(self):
        return _mscl.DefaultModes_pop_back(self)

    def erase(self, *args):
        return _mscl.DefaultModes_erase(self, *args)

    def __init__(self, *args):
        _mscl.DefaultModes_swiginit(self, _mscl.new_DefaultModes(*args))

    def push_back(self, x):
        return _mscl.DefaultModes_push_back(self, x)

    def front(self):
        return _mscl.DefaultModes_front(self)

    def back(self):
        return _mscl.DefaultModes_back(self)

    def assign(self, n, x):
        return _mscl.DefaultModes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.DefaultModes_resize(self, *args)

    def insert(self, *args):
        return _mscl.DefaultModes_insert(self, *args)

    def reserve(self, n):
        return _mscl.DefaultModes_reserve(self, n)

    def capacity(self):
        return _mscl.DefaultModes_capacity(self)
    __swig_destroy__ = _mscl.delete_DefaultModes

# Register DefaultModes in _mscl:
_mscl.DefaultModes_swigregister(DefaultModes)

class TransmitPowers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.TransmitPowers_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.TransmitPowers___nonzero__(self)

    def __bool__(self):
        return _mscl.TransmitPowers___bool__(self)

    def __len__(self):
        return _mscl.TransmitPowers___len__(self)

    def __getslice__(self, i, j):
        return _mscl.TransmitPowers___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.TransmitPowers___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.TransmitPowers___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.TransmitPowers___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.TransmitPowers___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.TransmitPowers___setitem__(self, *args)

    def pop(self):
        return _mscl.TransmitPowers_pop(self)

    def append(self, x):
        return _mscl.TransmitPowers_append(self, x)

    def empty(self):
        return _mscl.TransmitPowers_empty(self)

    def size(self):
        return _mscl.TransmitPowers_size(self)

    def swap(self, v):
        return _mscl.TransmitPowers_swap(self, v)

    def begin(self):
        return _mscl.TransmitPowers_begin(self)

    def end(self):
        return _mscl.TransmitPowers_end(self)

    def rbegin(self):
        return _mscl.TransmitPowers_rbegin(self)

    def rend(self):
        return _mscl.TransmitPowers_rend(self)

    def clear(self):
        return _mscl.TransmitPowers_clear(self)

    def get_allocator(self):
        return _mscl.TransmitPowers_get_allocator(self)

    def pop_back(self):
        return _mscl.TransmitPowers_pop_back(self)

    def erase(self, *args):
        return _mscl.TransmitPowers_erase(self, *args)

    def __init__(self, *args):
        _mscl.TransmitPowers_swiginit(self, _mscl.new_TransmitPowers(*args))

    def push_back(self, x):
        return _mscl.TransmitPowers_push_back(self, x)

    def front(self):
        return _mscl.TransmitPowers_front(self)

    def back(self):
        return _mscl.TransmitPowers_back(self)

    def assign(self, n, x):
        return _mscl.TransmitPowers_assign(self, n, x)

    def resize(self, *args):
        return _mscl.TransmitPowers_resize(self, *args)

    def insert(self, *args):
        return _mscl.TransmitPowers_insert(self, *args)

    def reserve(self, n):
        return _mscl.TransmitPowers_reserve(self, n)

    def capacity(self):
        return _mscl.TransmitPowers_capacity(self)
    __swig_destroy__ = _mscl.delete_TransmitPowers

# Register TransmitPowers in _mscl:
_mscl.TransmitPowers_swigregister(TransmitPowers)

class ChannelGroupSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.ChannelGroupSettings_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.ChannelGroupSettings___nonzero__(self)

    def __bool__(self):
        return _mscl.ChannelGroupSettings___bool__(self)

    def __len__(self):
        return _mscl.ChannelGroupSettings___len__(self)

    def __getslice__(self, i, j):
        return _mscl.ChannelGroupSettings___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.ChannelGroupSettings___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.ChannelGroupSettings___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.ChannelGroupSettings___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.ChannelGroupSettings___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.ChannelGroupSettings___setitem__(self, *args)

    def pop(self):
        return _mscl.ChannelGroupSettings_pop(self)

    def append(self, x):
        return _mscl.ChannelGroupSettings_append(self, x)

    def empty(self):
        return _mscl.ChannelGroupSettings_empty(self)

    def size(self):
        return _mscl.ChannelGroupSettings_size(self)

    def swap(self, v):
        return _mscl.ChannelGroupSettings_swap(self, v)

    def begin(self):
        return _mscl.ChannelGroupSettings_begin(self)

    def end(self):
        return _mscl.ChannelGroupSettings_end(self)

    def rbegin(self):
        return _mscl.ChannelGroupSettings_rbegin(self)

    def rend(self):
        return _mscl.ChannelGroupSettings_rend(self)

    def clear(self):
        return _mscl.ChannelGroupSettings_clear(self)

    def get_allocator(self):
        return _mscl.ChannelGroupSettings_get_allocator(self)

    def pop_back(self):
        return _mscl.ChannelGroupSettings_pop_back(self)

    def erase(self, *args):
        return _mscl.ChannelGroupSettings_erase(self, *args)

    def __init__(self, *args):
        _mscl.ChannelGroupSettings_swiginit(self, _mscl.new_ChannelGroupSettings(*args))

    def push_back(self, x):
        return _mscl.ChannelGroupSettings_push_back(self, x)

    def front(self):
        return _mscl.ChannelGroupSettings_front(self)

    def back(self):
        return _mscl.ChannelGroupSettings_back(self)

    def assign(self, n, x):
        return _mscl.ChannelGroupSettings_assign(self, n, x)

    def resize(self, *args):
        return _mscl.ChannelGroupSettings_resize(self, *args)

    def insert(self, *args):
        return _mscl.ChannelGroupSettings_insert(self, *args)

    def reserve(self, n):
        return _mscl.ChannelGroupSettings_reserve(self, n)

    def capacity(self):
        return _mscl.ChannelGroupSettings_capacity(self)
    __swig_destroy__ = _mscl.delete_ChannelGroupSettings

# Register ChannelGroupSettings in _mscl:
_mscl.ChannelGroupSettings_swigregister(ChannelGroupSettings)

class FatigueModes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.FatigueModes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.FatigueModes___nonzero__(self)

    def __bool__(self):
        return _mscl.FatigueModes___bool__(self)

    def __len__(self):
        return _mscl.FatigueModes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.FatigueModes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.FatigueModes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.FatigueModes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.FatigueModes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.FatigueModes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.FatigueModes___setitem__(self, *args)

    def pop(self):
        return _mscl.FatigueModes_pop(self)

    def append(self, x):
        return _mscl.FatigueModes_append(self, x)

    def empty(self):
        return _mscl.FatigueModes_empty(self)

    def size(self):
        return _mscl.FatigueModes_size(self)

    def swap(self, v):
        return _mscl.FatigueModes_swap(self, v)

    def begin(self):
        return _mscl.FatigueModes_begin(self)

    def end(self):
        return _mscl.FatigueModes_end(self)

    def rbegin(self):
        return _mscl.FatigueModes_rbegin(self)

    def rend(self):
        return _mscl.FatigueModes_rend(self)

    def clear(self):
        return _mscl.FatigueModes_clear(self)

    def get_allocator(self):
        return _mscl.FatigueModes_get_allocator(self)

    def pop_back(self):
        return _mscl.FatigueModes_pop_back(self)

    def erase(self, *args):
        return _mscl.FatigueModes_erase(self, *args)

    def __init__(self, *args):
        _mscl.FatigueModes_swiginit(self, _mscl.new_FatigueModes(*args))

    def push_back(self, x):
        return _mscl.FatigueModes_push_back(self, x)

    def front(self):
        return _mscl.FatigueModes_front(self)

    def back(self):
        return _mscl.FatigueModes_back(self)

    def assign(self, n, x):
        return _mscl.FatigueModes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.FatigueModes_resize(self, *args)

    def insert(self, *args):
        return _mscl.FatigueModes_insert(self, *args)

    def reserve(self, n):
        return _mscl.FatigueModes_reserve(self, n)

    def capacity(self):
        return _mscl.FatigueModes_capacity(self)
    __swig_destroy__ = _mscl.delete_FatigueModes

# Register FatigueModes in _mscl:
_mscl.FatigueModes_swigregister(FatigueModes)

class Filters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.Filters_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.Filters___nonzero__(self)

    def __bool__(self):
        return _mscl.Filters___bool__(self)

    def __len__(self):
        return _mscl.Filters___len__(self)

    def __getslice__(self, i, j):
        return _mscl.Filters___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.Filters___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.Filters___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.Filters___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.Filters___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.Filters___setitem__(self, *args)

    def pop(self):
        return _mscl.Filters_pop(self)

    def append(self, x):
        return _mscl.Filters_append(self, x)

    def empty(self):
        return _mscl.Filters_empty(self)

    def size(self):
        return _mscl.Filters_size(self)

    def swap(self, v):
        return _mscl.Filters_swap(self, v)

    def begin(self):
        return _mscl.Filters_begin(self)

    def end(self):
        return _mscl.Filters_end(self)

    def rbegin(self):
        return _mscl.Filters_rbegin(self)

    def rend(self):
        return _mscl.Filters_rend(self)

    def clear(self):
        return _mscl.Filters_clear(self)

    def get_allocator(self):
        return _mscl.Filters_get_allocator(self)

    def pop_back(self):
        return _mscl.Filters_pop_back(self)

    def erase(self, *args):
        return _mscl.Filters_erase(self, *args)

    def __init__(self, *args):
        _mscl.Filters_swiginit(self, _mscl.new_Filters(*args))

    def push_back(self, x):
        return _mscl.Filters_push_back(self, x)

    def front(self):
        return _mscl.Filters_front(self)

    def back(self):
        return _mscl.Filters_back(self)

    def assign(self, n, x):
        return _mscl.Filters_assign(self, n, x)

    def resize(self, *args):
        return _mscl.Filters_resize(self, *args)

    def insert(self, *args):
        return _mscl.Filters_insert(self, *args)

    def reserve(self, n):
        return _mscl.Filters_reserve(self, n)

    def capacity(self):
        return _mscl.Filters_capacity(self)
    __swig_destroy__ = _mscl.delete_Filters

# Register Filters in _mscl:
_mscl.Filters_swigregister(Filters)

class HighPassFilters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.HighPassFilters_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.HighPassFilters___nonzero__(self)

    def __bool__(self):
        return _mscl.HighPassFilters___bool__(self)

    def __len__(self):
        return _mscl.HighPassFilters___len__(self)

    def __getslice__(self, i, j):
        return _mscl.HighPassFilters___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.HighPassFilters___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.HighPassFilters___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.HighPassFilters___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.HighPassFilters___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.HighPassFilters___setitem__(self, *args)

    def pop(self):
        return _mscl.HighPassFilters_pop(self)

    def append(self, x):
        return _mscl.HighPassFilters_append(self, x)

    def empty(self):
        return _mscl.HighPassFilters_empty(self)

    def size(self):
        return _mscl.HighPassFilters_size(self)

    def swap(self, v):
        return _mscl.HighPassFilters_swap(self, v)

    def begin(self):
        return _mscl.HighPassFilters_begin(self)

    def end(self):
        return _mscl.HighPassFilters_end(self)

    def rbegin(self):
        return _mscl.HighPassFilters_rbegin(self)

    def rend(self):
        return _mscl.HighPassFilters_rend(self)

    def clear(self):
        return _mscl.HighPassFilters_clear(self)

    def get_allocator(self):
        return _mscl.HighPassFilters_get_allocator(self)

    def pop_back(self):
        return _mscl.HighPassFilters_pop_back(self)

    def erase(self, *args):
        return _mscl.HighPassFilters_erase(self, *args)

    def __init__(self, *args):
        _mscl.HighPassFilters_swiginit(self, _mscl.new_HighPassFilters(*args))

    def push_back(self, x):
        return _mscl.HighPassFilters_push_back(self, x)

    def front(self):
        return _mscl.HighPassFilters_front(self)

    def back(self):
        return _mscl.HighPassFilters_back(self)

    def assign(self, n, x):
        return _mscl.HighPassFilters_assign(self, n, x)

    def resize(self, *args):
        return _mscl.HighPassFilters_resize(self, *args)

    def insert(self, *args):
        return _mscl.HighPassFilters_insert(self, *args)

    def reserve(self, n):
        return _mscl.HighPassFilters_reserve(self, n)

    def capacity(self):
        return _mscl.HighPassFilters_capacity(self)
    __swig_destroy__ = _mscl.delete_HighPassFilters

# Register HighPassFilters in _mscl:
_mscl.HighPassFilters_swigregister(HighPassFilters)

class StorageLimitModes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.StorageLimitModes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.StorageLimitModes___nonzero__(self)

    def __bool__(self):
        return _mscl.StorageLimitModes___bool__(self)

    def __len__(self):
        return _mscl.StorageLimitModes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.StorageLimitModes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.StorageLimitModes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.StorageLimitModes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.StorageLimitModes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.StorageLimitModes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.StorageLimitModes___setitem__(self, *args)

    def pop(self):
        return _mscl.StorageLimitModes_pop(self)

    def append(self, x):
        return _mscl.StorageLimitModes_append(self, x)

    def empty(self):
        return _mscl.StorageLimitModes_empty(self)

    def size(self):
        return _mscl.StorageLimitModes_size(self)

    def swap(self, v):
        return _mscl.StorageLimitModes_swap(self, v)

    def begin(self):
        return _mscl.StorageLimitModes_begin(self)

    def end(self):
        return _mscl.StorageLimitModes_end(self)

    def rbegin(self):
        return _mscl.StorageLimitModes_rbegin(self)

    def rend(self):
        return _mscl.StorageLimitModes_rend(self)

    def clear(self):
        return _mscl.StorageLimitModes_clear(self)

    def get_allocator(self):
        return _mscl.StorageLimitModes_get_allocator(self)

    def pop_back(self):
        return _mscl.StorageLimitModes_pop_back(self)

    def erase(self, *args):
        return _mscl.StorageLimitModes_erase(self, *args)

    def __init__(self, *args):
        _mscl.StorageLimitModes_swiginit(self, _mscl.new_StorageLimitModes(*args))

    def push_back(self, x):
        return _mscl.StorageLimitModes_push_back(self, x)

    def front(self):
        return _mscl.StorageLimitModes_front(self)

    def back(self):
        return _mscl.StorageLimitModes_back(self)

    def assign(self, n, x):
        return _mscl.StorageLimitModes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.StorageLimitModes_resize(self, *args)

    def insert(self, *args):
        return _mscl.StorageLimitModes_insert(self, *args)

    def reserve(self, n):
        return _mscl.StorageLimitModes_reserve(self, n)

    def capacity(self):
        return _mscl.StorageLimitModes_capacity(self)
    __swig_destroy__ = _mscl.delete_StorageLimitModes

# Register StorageLimitModes in _mscl:
_mscl.StorageLimitModes_swigregister(StorageLimitModes)

class InputRanges(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.InputRanges_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.InputRanges___nonzero__(self)

    def __bool__(self):
        return _mscl.InputRanges___bool__(self)

    def __len__(self):
        return _mscl.InputRanges___len__(self)

    def __getslice__(self, i, j):
        return _mscl.InputRanges___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.InputRanges___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.InputRanges___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.InputRanges___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.InputRanges___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.InputRanges___setitem__(self, *args)

    def pop(self):
        return _mscl.InputRanges_pop(self)

    def append(self, x):
        return _mscl.InputRanges_append(self, x)

    def empty(self):
        return _mscl.InputRanges_empty(self)

    def size(self):
        return _mscl.InputRanges_size(self)

    def swap(self, v):
        return _mscl.InputRanges_swap(self, v)

    def begin(self):
        return _mscl.InputRanges_begin(self)

    def end(self):
        return _mscl.InputRanges_end(self)

    def rbegin(self):
        return _mscl.InputRanges_rbegin(self)

    def rend(self):
        return _mscl.InputRanges_rend(self)

    def clear(self):
        return _mscl.InputRanges_clear(self)

    def get_allocator(self):
        return _mscl.InputRanges_get_allocator(self)

    def pop_back(self):
        return _mscl.InputRanges_pop_back(self)

    def erase(self, *args):
        return _mscl.InputRanges_erase(self, *args)

    def __init__(self, *args):
        _mscl.InputRanges_swiginit(self, _mscl.new_InputRanges(*args))

    def push_back(self, x):
        return _mscl.InputRanges_push_back(self, x)

    def front(self):
        return _mscl.InputRanges_front(self)

    def back(self):
        return _mscl.InputRanges_back(self)

    def assign(self, n, x):
        return _mscl.InputRanges_assign(self, n, x)

    def resize(self, *args):
        return _mscl.InputRanges_resize(self, *args)

    def insert(self, *args):
        return _mscl.InputRanges_insert(self, *args)

    def reserve(self, n):
        return _mscl.InputRanges_reserve(self, n)

    def capacity(self):
        return _mscl.InputRanges_capacity(self)
    __swig_destroy__ = _mscl.delete_InputRanges

# Register InputRanges in _mscl:
_mscl.InputRanges_swigregister(InputRanges)

class DataModes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DataModes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DataModes___nonzero__(self)

    def __bool__(self):
        return _mscl.DataModes___bool__(self)

    def __len__(self):
        return _mscl.DataModes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.DataModes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.DataModes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.DataModes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.DataModes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.DataModes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.DataModes___setitem__(self, *args)

    def pop(self):
        return _mscl.DataModes_pop(self)

    def append(self, x):
        return _mscl.DataModes_append(self, x)

    def empty(self):
        return _mscl.DataModes_empty(self)

    def size(self):
        return _mscl.DataModes_size(self)

    def swap(self, v):
        return _mscl.DataModes_swap(self, v)

    def begin(self):
        return _mscl.DataModes_begin(self)

    def end(self):
        return _mscl.DataModes_end(self)

    def rbegin(self):
        return _mscl.DataModes_rbegin(self)

    def rend(self):
        return _mscl.DataModes_rend(self)

    def clear(self):
        return _mscl.DataModes_clear(self)

    def get_allocator(self):
        return _mscl.DataModes_get_allocator(self)

    def pop_back(self):
        return _mscl.DataModes_pop_back(self)

    def erase(self, *args):
        return _mscl.DataModes_erase(self, *args)

    def __init__(self, *args):
        _mscl.DataModes_swiginit(self, _mscl.new_DataModes(*args))

    def push_back(self, x):
        return _mscl.DataModes_push_back(self, x)

    def front(self):
        return _mscl.DataModes_front(self)

    def back(self):
        return _mscl.DataModes_back(self)

    def assign(self, n, x):
        return _mscl.DataModes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.DataModes_resize(self, *args)

    def insert(self, *args):
        return _mscl.DataModes_insert(self, *args)

    def reserve(self, n):
        return _mscl.DataModes_reserve(self, n)

    def capacity(self):
        return _mscl.DataModes_capacity(self)
    __swig_destroy__ = _mscl.delete_DataModes

# Register DataModes in _mscl:
_mscl.DataModes_swigregister(DataModes)

class CommProtocols(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.CommProtocols_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.CommProtocols___nonzero__(self)

    def __bool__(self):
        return _mscl.CommProtocols___bool__(self)

    def __len__(self):
        return _mscl.CommProtocols___len__(self)

    def __getslice__(self, i, j):
        return _mscl.CommProtocols___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.CommProtocols___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.CommProtocols___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.CommProtocols___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.CommProtocols___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.CommProtocols___setitem__(self, *args)

    def pop(self):
        return _mscl.CommProtocols_pop(self)

    def append(self, x):
        return _mscl.CommProtocols_append(self, x)

    def empty(self):
        return _mscl.CommProtocols_empty(self)

    def size(self):
        return _mscl.CommProtocols_size(self)

    def swap(self, v):
        return _mscl.CommProtocols_swap(self, v)

    def begin(self):
        return _mscl.CommProtocols_begin(self)

    def end(self):
        return _mscl.CommProtocols_end(self)

    def rbegin(self):
        return _mscl.CommProtocols_rbegin(self)

    def rend(self):
        return _mscl.CommProtocols_rend(self)

    def clear(self):
        return _mscl.CommProtocols_clear(self)

    def get_allocator(self):
        return _mscl.CommProtocols_get_allocator(self)

    def pop_back(self):
        return _mscl.CommProtocols_pop_back(self)

    def erase(self, *args):
        return _mscl.CommProtocols_erase(self, *args)

    def __init__(self, *args):
        _mscl.CommProtocols_swiginit(self, _mscl.new_CommProtocols(*args))

    def push_back(self, x):
        return _mscl.CommProtocols_push_back(self, x)

    def front(self):
        return _mscl.CommProtocols_front(self)

    def back(self):
        return _mscl.CommProtocols_back(self)

    def assign(self, n, x):
        return _mscl.CommProtocols_assign(self, n, x)

    def resize(self, *args):
        return _mscl.CommProtocols_resize(self, *args)

    def insert(self, *args):
        return _mscl.CommProtocols_insert(self, *args)

    def reserve(self, n):
        return _mscl.CommProtocols_reserve(self, n)

    def capacity(self):
        return _mscl.CommProtocols_capacity(self)
    __swig_destroy__ = _mscl.delete_CommProtocols

# Register CommProtocols in _mscl:
_mscl.CommProtocols_swigregister(CommProtocols)

class Voltages(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.Voltages_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.Voltages___nonzero__(self)

    def __bool__(self):
        return _mscl.Voltages___bool__(self)

    def __len__(self):
        return _mscl.Voltages___len__(self)

    def __getslice__(self, i, j):
        return _mscl.Voltages___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.Voltages___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.Voltages___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.Voltages___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.Voltages___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.Voltages___setitem__(self, *args)

    def pop(self):
        return _mscl.Voltages_pop(self)

    def append(self, x):
        return _mscl.Voltages_append(self, x)

    def empty(self):
        return _mscl.Voltages_empty(self)

    def size(self):
        return _mscl.Voltages_size(self)

    def swap(self, v):
        return _mscl.Voltages_swap(self, v)

    def begin(self):
        return _mscl.Voltages_begin(self)

    def end(self):
        return _mscl.Voltages_end(self)

    def rbegin(self):
        return _mscl.Voltages_rbegin(self)

    def rend(self):
        return _mscl.Voltages_rend(self)

    def clear(self):
        return _mscl.Voltages_clear(self)

    def get_allocator(self):
        return _mscl.Voltages_get_allocator(self)

    def pop_back(self):
        return _mscl.Voltages_pop_back(self)

    def erase(self, *args):
        return _mscl.Voltages_erase(self, *args)

    def __init__(self, *args):
        _mscl.Voltages_swiginit(self, _mscl.new_Voltages(*args))

    def push_back(self, x):
        return _mscl.Voltages_push_back(self, x)

    def front(self):
        return _mscl.Voltages_front(self)

    def back(self):
        return _mscl.Voltages_back(self)

    def assign(self, n, x):
        return _mscl.Voltages_assign(self, n, x)

    def resize(self, *args):
        return _mscl.Voltages_resize(self, *args)

    def insert(self, *args):
        return _mscl.Voltages_insert(self, *args)

    def reserve(self, n):
        return _mscl.Voltages_reserve(self, n)

    def capacity(self):
        return _mscl.Voltages_capacity(self)
    __swig_destroy__ = _mscl.delete_Voltages

# Register Voltages in _mscl:
_mscl.Voltages_swigregister(Voltages)

class SensorOutputModes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.SensorOutputModes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.SensorOutputModes___nonzero__(self)

    def __bool__(self):
        return _mscl.SensorOutputModes___bool__(self)

    def __len__(self):
        return _mscl.SensorOutputModes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.SensorOutputModes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.SensorOutputModes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.SensorOutputModes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.SensorOutputModes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.SensorOutputModes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.SensorOutputModes___setitem__(self, *args)

    def pop(self):
        return _mscl.SensorOutputModes_pop(self)

    def append(self, x):
        return _mscl.SensorOutputModes_append(self, x)

    def empty(self):
        return _mscl.SensorOutputModes_empty(self)

    def size(self):
        return _mscl.SensorOutputModes_size(self)

    def swap(self, v):
        return _mscl.SensorOutputModes_swap(self, v)

    def begin(self):
        return _mscl.SensorOutputModes_begin(self)

    def end(self):
        return _mscl.SensorOutputModes_end(self)

    def rbegin(self):
        return _mscl.SensorOutputModes_rbegin(self)

    def rend(self):
        return _mscl.SensorOutputModes_rend(self)

    def clear(self):
        return _mscl.SensorOutputModes_clear(self)

    def get_allocator(self):
        return _mscl.SensorOutputModes_get_allocator(self)

    def pop_back(self):
        return _mscl.SensorOutputModes_pop_back(self)

    def erase(self, *args):
        return _mscl.SensorOutputModes_erase(self, *args)

    def __init__(self, *args):
        _mscl.SensorOutputModes_swiginit(self, _mscl.new_SensorOutputModes(*args))

    def push_back(self, x):
        return _mscl.SensorOutputModes_push_back(self, x)

    def front(self):
        return _mscl.SensorOutputModes_front(self)

    def back(self):
        return _mscl.SensorOutputModes_back(self)

    def assign(self, n, x):
        return _mscl.SensorOutputModes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.SensorOutputModes_resize(self, *args)

    def insert(self, *args):
        return _mscl.SensorOutputModes_insert(self, *args)

    def reserve(self, n):
        return _mscl.SensorOutputModes_reserve(self, n)

    def capacity(self):
        return _mscl.SensorOutputModes_capacity(self)
    __swig_destroy__ = _mscl.delete_SensorOutputModes

# Register SensorOutputModes in _mscl:
_mscl.SensorOutputModes_swigregister(SensorOutputModes)

class CfcFilters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.CfcFilters_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.CfcFilters___nonzero__(self)

    def __bool__(self):
        return _mscl.CfcFilters___bool__(self)

    def __len__(self):
        return _mscl.CfcFilters___len__(self)

    def __getslice__(self, i, j):
        return _mscl.CfcFilters___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.CfcFilters___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.CfcFilters___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.CfcFilters___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.CfcFilters___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.CfcFilters___setitem__(self, *args)

    def pop(self):
        return _mscl.CfcFilters_pop(self)

    def append(self, x):
        return _mscl.CfcFilters_append(self, x)

    def empty(self):
        return _mscl.CfcFilters_empty(self)

    def size(self):
        return _mscl.CfcFilters_size(self)

    def swap(self, v):
        return _mscl.CfcFilters_swap(self, v)

    def begin(self):
        return _mscl.CfcFilters_begin(self)

    def end(self):
        return _mscl.CfcFilters_end(self)

    def rbegin(self):
        return _mscl.CfcFilters_rbegin(self)

    def rend(self):
        return _mscl.CfcFilters_rend(self)

    def clear(self):
        return _mscl.CfcFilters_clear(self)

    def get_allocator(self):
        return _mscl.CfcFilters_get_allocator(self)

    def pop_back(self):
        return _mscl.CfcFilters_pop_back(self)

    def erase(self, *args):
        return _mscl.CfcFilters_erase(self, *args)

    def __init__(self, *args):
        _mscl.CfcFilters_swiginit(self, _mscl.new_CfcFilters(*args))

    def push_back(self, x):
        return _mscl.CfcFilters_push_back(self, x)

    def front(self):
        return _mscl.CfcFilters_front(self)

    def back(self):
        return _mscl.CfcFilters_back(self)

    def assign(self, n, x):
        return _mscl.CfcFilters_assign(self, n, x)

    def resize(self, *args):
        return _mscl.CfcFilters_resize(self, *args)

    def insert(self, *args):
        return _mscl.CfcFilters_insert(self, *args)

    def reserve(self, n):
        return _mscl.CfcFilters_reserve(self, n)

    def capacity(self):
        return _mscl.CfcFilters_capacity(self)
    __swig_destroy__ = _mscl.delete_CfcFilters

# Register CfcFilters in _mscl:
_mscl.CfcFilters_swigregister(CfcFilters)

class TransducerTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.TransducerTypes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.TransducerTypes___nonzero__(self)

    def __bool__(self):
        return _mscl.TransducerTypes___bool__(self)

    def __len__(self):
        return _mscl.TransducerTypes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.TransducerTypes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.TransducerTypes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.TransducerTypes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.TransducerTypes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.TransducerTypes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.TransducerTypes___setitem__(self, *args)

    def pop(self):
        return _mscl.TransducerTypes_pop(self)

    def append(self, x):
        return _mscl.TransducerTypes_append(self, x)

    def empty(self):
        return _mscl.TransducerTypes_empty(self)

    def size(self):
        return _mscl.TransducerTypes_size(self)

    def swap(self, v):
        return _mscl.TransducerTypes_swap(self, v)

    def begin(self):
        return _mscl.TransducerTypes_begin(self)

    def end(self):
        return _mscl.TransducerTypes_end(self)

    def rbegin(self):
        return _mscl.TransducerTypes_rbegin(self)

    def rend(self):
        return _mscl.TransducerTypes_rend(self)

    def clear(self):
        return _mscl.TransducerTypes_clear(self)

    def get_allocator(self):
        return _mscl.TransducerTypes_get_allocator(self)

    def pop_back(self):
        return _mscl.TransducerTypes_pop_back(self)

    def erase(self, *args):
        return _mscl.TransducerTypes_erase(self, *args)

    def __init__(self, *args):
        _mscl.TransducerTypes_swiginit(self, _mscl.new_TransducerTypes(*args))

    def push_back(self, x):
        return _mscl.TransducerTypes_push_back(self, x)

    def front(self):
        return _mscl.TransducerTypes_front(self)

    def back(self):
        return _mscl.TransducerTypes_back(self)

    def assign(self, n, x):
        return _mscl.TransducerTypes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.TransducerTypes_resize(self, *args)

    def insert(self, *args):
        return _mscl.TransducerTypes_insert(self, *args)

    def reserve(self, n):
        return _mscl.TransducerTypes_reserve(self, n)

    def capacity(self):
        return _mscl.TransducerTypes_capacity(self)
    __swig_destroy__ = _mscl.delete_TransducerTypes

# Register TransducerTypes in _mscl:
_mscl.TransducerTypes_swigregister(TransducerTypes)

class EepromMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.EepromMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.EepromMap___nonzero__(self)

    def __bool__(self):
        return _mscl.EepromMap___bool__(self)

    def __len__(self):
        return _mscl.EepromMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.EepromMap___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.EepromMap___delitem__(self, key)

    def has_key(self, key):
        return _mscl.EepromMap_has_key(self, key)

    def keys(self):
        return _mscl.EepromMap_keys(self)

    def values(self):
        return _mscl.EepromMap_values(self)

    def items(self):
        return _mscl.EepromMap_items(self)

    def __contains__(self, key):
        return _mscl.EepromMap___contains__(self, key)

    def key_iterator(self):
        return _mscl.EepromMap_key_iterator(self)

    def value_iterator(self):
        return _mscl.EepromMap_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.EepromMap___setitem__(self, *args)

    def asdict(self):
        return _mscl.EepromMap_asdict(self)

    def __init__(self, *args):
        _mscl.EepromMap_swiginit(self, _mscl.new_EepromMap(*args))

    def empty(self):
        return _mscl.EepromMap_empty(self)

    def size(self):
        return _mscl.EepromMap_size(self)

    def swap(self, v):
        return _mscl.EepromMap_swap(self, v)

    def begin(self):
        return _mscl.EepromMap_begin(self)

    def end(self):
        return _mscl.EepromMap_end(self)

    def rbegin(self):
        return _mscl.EepromMap_rbegin(self)

    def rend(self):
        return _mscl.EepromMap_rend(self)

    def clear(self):
        return _mscl.EepromMap_clear(self)

    def get_allocator(self):
        return _mscl.EepromMap_get_allocator(self)

    def count(self, x):
        return _mscl.EepromMap_count(self, x)

    def erase(self, *args):
        return _mscl.EepromMap_erase(self, *args)

    def find(self, x):
        return _mscl.EepromMap_find(self, x)

    def lower_bound(self, x):
        return _mscl.EepromMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.EepromMap_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_EepromMap

# Register EepromMap in _mscl:
_mscl.EepromMap_swigregister(EepromMap)

class DerivedChannelMasks(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DerivedChannelMasks_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DerivedChannelMasks___nonzero__(self)

    def __bool__(self):
        return _mscl.DerivedChannelMasks___bool__(self)

    def __len__(self):
        return _mscl.DerivedChannelMasks___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.DerivedChannelMasks___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.DerivedChannelMasks___delitem__(self, key)

    def has_key(self, key):
        return _mscl.DerivedChannelMasks_has_key(self, key)

    def keys(self):
        return _mscl.DerivedChannelMasks_keys(self)

    def values(self):
        return _mscl.DerivedChannelMasks_values(self)

    def items(self):
        return _mscl.DerivedChannelMasks_items(self)

    def __contains__(self, key):
        return _mscl.DerivedChannelMasks___contains__(self, key)

    def key_iterator(self):
        return _mscl.DerivedChannelMasks_key_iterator(self)

    def value_iterator(self):
        return _mscl.DerivedChannelMasks_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.DerivedChannelMasks___setitem__(self, *args)

    def asdict(self):
        return _mscl.DerivedChannelMasks_asdict(self)

    def __init__(self, *args):
        _mscl.DerivedChannelMasks_swiginit(self, _mscl.new_DerivedChannelMasks(*args))

    def empty(self):
        return _mscl.DerivedChannelMasks_empty(self)

    def size(self):
        return _mscl.DerivedChannelMasks_size(self)

    def swap(self, v):
        return _mscl.DerivedChannelMasks_swap(self, v)

    def begin(self):
        return _mscl.DerivedChannelMasks_begin(self)

    def end(self):
        return _mscl.DerivedChannelMasks_end(self)

    def rbegin(self):
        return _mscl.DerivedChannelMasks_rbegin(self)

    def rend(self):
        return _mscl.DerivedChannelMasks_rend(self)

    def clear(self):
        return _mscl.DerivedChannelMasks_clear(self)

    def get_allocator(self):
        return _mscl.DerivedChannelMasks_get_allocator(self)

    def count(self, x):
        return _mscl.DerivedChannelMasks_count(self, x)

    def erase(self, *args):
        return _mscl.DerivedChannelMasks_erase(self, *args)

    def find(self, x):
        return _mscl.DerivedChannelMasks_find(self, x)

    def lower_bound(self, x):
        return _mscl.DerivedChannelMasks_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.DerivedChannelMasks_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_DerivedChannelMasks

# Register DerivedChannelMasks in _mscl:
_mscl.DerivedChannelMasks_swigregister(DerivedChannelMasks)

class DeviceStatusMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DeviceStatusMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DeviceStatusMap___nonzero__(self)

    def __bool__(self):
        return _mscl.DeviceStatusMap___bool__(self)

    def __len__(self):
        return _mscl.DeviceStatusMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.DeviceStatusMap___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.DeviceStatusMap___delitem__(self, key)

    def has_key(self, key):
        return _mscl.DeviceStatusMap_has_key(self, key)

    def keys(self):
        return _mscl.DeviceStatusMap_keys(self)

    def values(self):
        return _mscl.DeviceStatusMap_values(self)

    def items(self):
        return _mscl.DeviceStatusMap_items(self)

    def __contains__(self, key):
        return _mscl.DeviceStatusMap___contains__(self, key)

    def key_iterator(self):
        return _mscl.DeviceStatusMap_key_iterator(self)

    def value_iterator(self):
        return _mscl.DeviceStatusMap_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.DeviceStatusMap___setitem__(self, *args)

    def asdict(self):
        return _mscl.DeviceStatusMap_asdict(self)

    def __init__(self, *args):
        _mscl.DeviceStatusMap_swiginit(self, _mscl.new_DeviceStatusMap(*args))

    def empty(self):
        return _mscl.DeviceStatusMap_empty(self)

    def size(self):
        return _mscl.DeviceStatusMap_size(self)

    def swap(self, v):
        return _mscl.DeviceStatusMap_swap(self, v)

    def begin(self):
        return _mscl.DeviceStatusMap_begin(self)

    def end(self):
        return _mscl.DeviceStatusMap_end(self)

    def rbegin(self):
        return _mscl.DeviceStatusMap_rbegin(self)

    def rend(self):
        return _mscl.DeviceStatusMap_rend(self)

    def clear(self):
        return _mscl.DeviceStatusMap_clear(self)

    def get_allocator(self):
        return _mscl.DeviceStatusMap_get_allocator(self)

    def count(self, x):
        return _mscl.DeviceStatusMap_count(self, x)

    def erase(self, *args):
        return _mscl.DeviceStatusMap_erase(self, *args)

    def find(self, x):
        return _mscl.DeviceStatusMap_find(self, x)

    def lower_bound(self, x):
        return _mscl.DeviceStatusMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.DeviceStatusMap_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_DeviceStatusMap

# Register DeviceStatusMap in _mscl:
_mscl.DeviceStatusMap_swigregister(DeviceStatusMap)

class DeviceStatusValueMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DeviceStatusValueMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DeviceStatusValueMap___nonzero__(self)

    def __bool__(self):
        return _mscl.DeviceStatusValueMap___bool__(self)

    def __len__(self):
        return _mscl.DeviceStatusValueMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.DeviceStatusValueMap___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.DeviceStatusValueMap___delitem__(self, key)

    def has_key(self, key):
        return _mscl.DeviceStatusValueMap_has_key(self, key)

    def keys(self):
        return _mscl.DeviceStatusValueMap_keys(self)

    def values(self):
        return _mscl.DeviceStatusValueMap_values(self)

    def items(self):
        return _mscl.DeviceStatusValueMap_items(self)

    def __contains__(self, key):
        return _mscl.DeviceStatusValueMap___contains__(self, key)

    def key_iterator(self):
        return _mscl.DeviceStatusValueMap_key_iterator(self)

    def value_iterator(self):
        return _mscl.DeviceStatusValueMap_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.DeviceStatusValueMap___setitem__(self, *args)

    def asdict(self):
        return _mscl.DeviceStatusValueMap_asdict(self)

    def __init__(self, *args):
        _mscl.DeviceStatusValueMap_swiginit(self, _mscl.new_DeviceStatusValueMap(*args))

    def empty(self):
        return _mscl.DeviceStatusValueMap_empty(self)

    def size(self):
        return _mscl.DeviceStatusValueMap_size(self)

    def swap(self, v):
        return _mscl.DeviceStatusValueMap_swap(self, v)

    def begin(self):
        return _mscl.DeviceStatusValueMap_begin(self)

    def end(self):
        return _mscl.DeviceStatusValueMap_end(self)

    def rbegin(self):
        return _mscl.DeviceStatusValueMap_rbegin(self)

    def rend(self):
        return _mscl.DeviceStatusValueMap_rend(self)

    def clear(self):
        return _mscl.DeviceStatusValueMap_clear(self)

    def get_allocator(self):
        return _mscl.DeviceStatusValueMap_get_allocator(self)

    def count(self, x):
        return _mscl.DeviceStatusValueMap_count(self, x)

    def erase(self, *args):
        return _mscl.DeviceStatusValueMap_erase(self, *args)

    def find(self, x):
        return _mscl.DeviceStatusValueMap_find(self, x)

    def lower_bound(self, x):
        return _mscl.DeviceStatusValueMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.DeviceStatusValueMap_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_DeviceStatusValueMap

# Register DeviceStatusValueMap in _mscl:
_mscl.DeviceStatusValueMap_swigregister(DeviceStatusValueMap)

class SampleRates(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.SampleRates_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.SampleRates___nonzero__(self)

    def __bool__(self):
        return _mscl.SampleRates___bool__(self)

    def __len__(self):
        return _mscl.SampleRates___len__(self)

    def __getslice__(self, i, j):
        return _mscl.SampleRates___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.SampleRates___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.SampleRates___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.SampleRates___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.SampleRates___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.SampleRates___setitem__(self, *args)

    def pop(self):
        return _mscl.SampleRates_pop(self)

    def append(self, x):
        return _mscl.SampleRates_append(self, x)

    def empty(self):
        return _mscl.SampleRates_empty(self)

    def size(self):
        return _mscl.SampleRates_size(self)

    def swap(self, v):
        return _mscl.SampleRates_swap(self, v)

    def begin(self):
        return _mscl.SampleRates_begin(self)

    def end(self):
        return _mscl.SampleRates_end(self)

    def rbegin(self):
        return _mscl.SampleRates_rbegin(self)

    def rend(self):
        return _mscl.SampleRates_rend(self)

    def clear(self):
        return _mscl.SampleRates_clear(self)

    def get_allocator(self):
        return _mscl.SampleRates_get_allocator(self)

    def pop_back(self):
        return _mscl.SampleRates_pop_back(self)

    def erase(self, *args):
        return _mscl.SampleRates_erase(self, *args)

    def __init__(self, *args):
        _mscl.SampleRates_swiginit(self, _mscl.new_SampleRates(*args))

    def push_back(self, x):
        return _mscl.SampleRates_push_back(self, x)

    def front(self):
        return _mscl.SampleRates_front(self)

    def back(self):
        return _mscl.SampleRates_back(self)

    def assign(self, n, x):
        return _mscl.SampleRates_assign(self, n, x)

    def resize(self, *args):
        return _mscl.SampleRates_resize(self, *args)

    def insert(self, *args):
        return _mscl.SampleRates_insert(self, *args)

    def reserve(self, n):
        return _mscl.SampleRates_reserve(self, n)

    def capacity(self):
        return _mscl.SampleRates_capacity(self)
    __swig_destroy__ = _mscl.delete_SampleRates

# Register SampleRates in _mscl:
_mscl.SampleRates_swigregister(SampleRates)

class ConfigIssues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.ConfigIssues_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.ConfigIssues___nonzero__(self)

    def __bool__(self):
        return _mscl.ConfigIssues___bool__(self)

    def __len__(self):
        return _mscl.ConfigIssues___len__(self)

    def __getslice__(self, i, j):
        return _mscl.ConfigIssues___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.ConfigIssues___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.ConfigIssues___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.ConfigIssues___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.ConfigIssues___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.ConfigIssues___setitem__(self, *args)

    def pop(self):
        return _mscl.ConfigIssues_pop(self)

    def append(self, x):
        return _mscl.ConfigIssues_append(self, x)

    def empty(self):
        return _mscl.ConfigIssues_empty(self)

    def size(self):
        return _mscl.ConfigIssues_size(self)

    def swap(self, v):
        return _mscl.ConfigIssues_swap(self, v)

    def begin(self):
        return _mscl.ConfigIssues_begin(self)

    def end(self):
        return _mscl.ConfigIssues_end(self)

    def rbegin(self):
        return _mscl.ConfigIssues_rbegin(self)

    def rend(self):
        return _mscl.ConfigIssues_rend(self)

    def clear(self):
        return _mscl.ConfigIssues_clear(self)

    def get_allocator(self):
        return _mscl.ConfigIssues_get_allocator(self)

    def pop_back(self):
        return _mscl.ConfigIssues_pop_back(self)

    def erase(self, *args):
        return _mscl.ConfigIssues_erase(self, *args)

    def __init__(self, *args):
        _mscl.ConfigIssues_swiginit(self, _mscl.new_ConfigIssues(*args))

    def push_back(self, x):
        return _mscl.ConfigIssues_push_back(self, x)

    def front(self):
        return _mscl.ConfigIssues_front(self)

    def back(self):
        return _mscl.ConfigIssues_back(self)

    def assign(self, n, x):
        return _mscl.ConfigIssues_assign(self, n, x)

    def resize(self, *args):
        return _mscl.ConfigIssues_resize(self, *args)

    def insert(self, *args):
        return _mscl.ConfigIssues_insert(self, *args)

    def reserve(self, n):
        return _mscl.ConfigIssues_reserve(self, n)

    def capacity(self):
        return _mscl.ConfigIssues_capacity(self)
    __swig_destroy__ = _mscl.delete_ConfigIssues

# Register ConfigIssues in _mscl:
_mscl.ConfigIssues_swigregister(ConfigIssues)

class MipChannelFields(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.MipChannelFields_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.MipChannelFields___nonzero__(self)

    def __bool__(self):
        return _mscl.MipChannelFields___bool__(self)

    def __len__(self):
        return _mscl.MipChannelFields___len__(self)

    def __getslice__(self, i, j):
        return _mscl.MipChannelFields___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.MipChannelFields___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.MipChannelFields___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.MipChannelFields___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.MipChannelFields___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.MipChannelFields___setitem__(self, *args)

    def pop(self):
        return _mscl.MipChannelFields_pop(self)

    def append(self, x):
        return _mscl.MipChannelFields_append(self, x)

    def empty(self):
        return _mscl.MipChannelFields_empty(self)

    def size(self):
        return _mscl.MipChannelFields_size(self)

    def swap(self, v):
        return _mscl.MipChannelFields_swap(self, v)

    def begin(self):
        return _mscl.MipChannelFields_begin(self)

    def end(self):
        return _mscl.MipChannelFields_end(self)

    def rbegin(self):
        return _mscl.MipChannelFields_rbegin(self)

    def rend(self):
        return _mscl.MipChannelFields_rend(self)

    def clear(self):
        return _mscl.MipChannelFields_clear(self)

    def get_allocator(self):
        return _mscl.MipChannelFields_get_allocator(self)

    def pop_back(self):
        return _mscl.MipChannelFields_pop_back(self)

    def erase(self, *args):
        return _mscl.MipChannelFields_erase(self, *args)

    def __init__(self, *args):
        _mscl.MipChannelFields_swiginit(self, _mscl.new_MipChannelFields(*args))

    def push_back(self, x):
        return _mscl.MipChannelFields_push_back(self, x)

    def front(self):
        return _mscl.MipChannelFields_front(self)

    def back(self):
        return _mscl.MipChannelFields_back(self)

    def assign(self, n, x):
        return _mscl.MipChannelFields_assign(self, n, x)

    def resize(self, *args):
        return _mscl.MipChannelFields_resize(self, *args)

    def insert(self, *args):
        return _mscl.MipChannelFields_insert(self, *args)

    def reserve(self, n):
        return _mscl.MipChannelFields_reserve(self, n)

    def capacity(self):
        return _mscl.MipChannelFields_capacity(self)
    __swig_destroy__ = _mscl.delete_MipChannelFields

# Register MipChannelFields in _mscl:
_mscl.MipChannelFields_swigregister(MipChannelFields)

class MipCommands(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.MipCommands_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.MipCommands___nonzero__(self)

    def __bool__(self):
        return _mscl.MipCommands___bool__(self)

    def __len__(self):
        return _mscl.MipCommands___len__(self)

    def __getslice__(self, i, j):
        return _mscl.MipCommands___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.MipCommands___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.MipCommands___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.MipCommands___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.MipCommands___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.MipCommands___setitem__(self, *args)

    def pop(self):
        return _mscl.MipCommands_pop(self)

    def append(self, x):
        return _mscl.MipCommands_append(self, x)

    def empty(self):
        return _mscl.MipCommands_empty(self)

    def size(self):
        return _mscl.MipCommands_size(self)

    def swap(self, v):
        return _mscl.MipCommands_swap(self, v)

    def begin(self):
        return _mscl.MipCommands_begin(self)

    def end(self):
        return _mscl.MipCommands_end(self)

    def rbegin(self):
        return _mscl.MipCommands_rbegin(self)

    def rend(self):
        return _mscl.MipCommands_rend(self)

    def clear(self):
        return _mscl.MipCommands_clear(self)

    def get_allocator(self):
        return _mscl.MipCommands_get_allocator(self)

    def pop_back(self):
        return _mscl.MipCommands_pop_back(self)

    def erase(self, *args):
        return _mscl.MipCommands_erase(self, *args)

    def __init__(self, *args):
        _mscl.MipCommands_swiginit(self, _mscl.new_MipCommands(*args))

    def push_back(self, x):
        return _mscl.MipCommands_push_back(self, x)

    def front(self):
        return _mscl.MipCommands_front(self)

    def back(self):
        return _mscl.MipCommands_back(self)

    def assign(self, n, x):
        return _mscl.MipCommands_assign(self, n, x)

    def resize(self, *args):
        return _mscl.MipCommands_resize(self, *args)

    def insert(self, *args):
        return _mscl.MipCommands_insert(self, *args)

    def reserve(self, n):
        return _mscl.MipCommands_reserve(self, n)

    def capacity(self):
        return _mscl.MipCommands_capacity(self)
    __swig_destroy__ = _mscl.delete_MipCommands

# Register MipCommands in _mscl:
_mscl.MipCommands_swigregister(MipCommands)

class MipChannelIdentifiers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.MipChannelIdentifiers_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.MipChannelIdentifiers___nonzero__(self)

    def __bool__(self):
        return _mscl.MipChannelIdentifiers___bool__(self)

    def __len__(self):
        return _mscl.MipChannelIdentifiers___len__(self)

    def __getslice__(self, i, j):
        return _mscl.MipChannelIdentifiers___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.MipChannelIdentifiers___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.MipChannelIdentifiers___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.MipChannelIdentifiers___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.MipChannelIdentifiers___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.MipChannelIdentifiers___setitem__(self, *args)

    def pop(self):
        return _mscl.MipChannelIdentifiers_pop(self)

    def append(self, x):
        return _mscl.MipChannelIdentifiers_append(self, x)

    def empty(self):
        return _mscl.MipChannelIdentifiers_empty(self)

    def size(self):
        return _mscl.MipChannelIdentifiers_size(self)

    def swap(self, v):
        return _mscl.MipChannelIdentifiers_swap(self, v)

    def begin(self):
        return _mscl.MipChannelIdentifiers_begin(self)

    def end(self):
        return _mscl.MipChannelIdentifiers_end(self)

    def rbegin(self):
        return _mscl.MipChannelIdentifiers_rbegin(self)

    def rend(self):
        return _mscl.MipChannelIdentifiers_rend(self)

    def clear(self):
        return _mscl.MipChannelIdentifiers_clear(self)

    def get_allocator(self):
        return _mscl.MipChannelIdentifiers_get_allocator(self)

    def pop_back(self):
        return _mscl.MipChannelIdentifiers_pop_back(self)

    def erase(self, *args):
        return _mscl.MipChannelIdentifiers_erase(self, *args)

    def __init__(self, *args):
        _mscl.MipChannelIdentifiers_swiginit(self, _mscl.new_MipChannelIdentifiers(*args))

    def push_back(self, x):
        return _mscl.MipChannelIdentifiers_push_back(self, x)

    def front(self):
        return _mscl.MipChannelIdentifiers_front(self)

    def back(self):
        return _mscl.MipChannelIdentifiers_back(self)

    def assign(self, n, x):
        return _mscl.MipChannelIdentifiers_assign(self, n, x)

    def resize(self, *args):
        return _mscl.MipChannelIdentifiers_resize(self, *args)

    def insert(self, *args):
        return _mscl.MipChannelIdentifiers_insert(self, *args)

    def reserve(self, n):
        return _mscl.MipChannelIdentifiers_reserve(self, n)

    def capacity(self):
        return _mscl.MipChannelIdentifiers_capacity(self)
    __swig_destroy__ = _mscl.delete_MipChannelIdentifiers

# Register MipChannelIdentifiers in _mscl:
_mscl.MipChannelIdentifiers_swigregister(MipChannelIdentifiers)

class MipCommandSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.MipCommandSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.MipCommandSet___nonzero__(self)

    def __bool__(self):
        return _mscl.MipCommandSet___bool__(self)

    def __len__(self):
        return _mscl.MipCommandSet___len__(self)

    def __getslice__(self, i, j):
        return _mscl.MipCommandSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.MipCommandSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.MipCommandSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.MipCommandSet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.MipCommandSet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.MipCommandSet___setitem__(self, *args)

    def pop(self):
        return _mscl.MipCommandSet_pop(self)

    def append(self, x):
        return _mscl.MipCommandSet_append(self, x)

    def empty(self):
        return _mscl.MipCommandSet_empty(self)

    def size(self):
        return _mscl.MipCommandSet_size(self)

    def swap(self, v):
        return _mscl.MipCommandSet_swap(self, v)

    def begin(self):
        return _mscl.MipCommandSet_begin(self)

    def end(self):
        return _mscl.MipCommandSet_end(self)

    def rbegin(self):
        return _mscl.MipCommandSet_rbegin(self)

    def rend(self):
        return _mscl.MipCommandSet_rend(self)

    def clear(self):
        return _mscl.MipCommandSet_clear(self)

    def get_allocator(self):
        return _mscl.MipCommandSet_get_allocator(self)

    def pop_back(self):
        return _mscl.MipCommandSet_pop_back(self)

    def erase(self, *args):
        return _mscl.MipCommandSet_erase(self, *args)

    def __init__(self, *args):
        _mscl.MipCommandSet_swiginit(self, _mscl.new_MipCommandSet(*args))

    def push_back(self, x):
        return _mscl.MipCommandSet_push_back(self, x)

    def front(self):
        return _mscl.MipCommandSet_front(self)

    def back(self):
        return _mscl.MipCommandSet_back(self)

    def assign(self, n, x):
        return _mscl.MipCommandSet_assign(self, n, x)

    def resize(self, *args):
        return _mscl.MipCommandSet_resize(self, *args)

    def insert(self, *args):
        return _mscl.MipCommandSet_insert(self, *args)

    def reserve(self, n):
        return _mscl.MipCommandSet_reserve(self, n)

    def capacity(self):
        return _mscl.MipCommandSet_capacity(self)
    __swig_destroy__ = _mscl.delete_MipCommandSet

# Register MipCommandSet in _mscl:
_mscl.MipCommandSet_swigregister(MipCommandSet)

class MipFieldValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.MipFieldValues_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.MipFieldValues___nonzero__(self)

    def __bool__(self):
        return _mscl.MipFieldValues___bool__(self)

    def __len__(self):
        return _mscl.MipFieldValues___len__(self)

    def __getslice__(self, i, j):
        return _mscl.MipFieldValues___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.MipFieldValues___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.MipFieldValues___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.MipFieldValues___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.MipFieldValues___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.MipFieldValues___setitem__(self, *args)

    def pop(self):
        return _mscl.MipFieldValues_pop(self)

    def append(self, x):
        return _mscl.MipFieldValues_append(self, x)

    def empty(self):
        return _mscl.MipFieldValues_empty(self)

    def size(self):
        return _mscl.MipFieldValues_size(self)

    def swap(self, v):
        return _mscl.MipFieldValues_swap(self, v)

    def begin(self):
        return _mscl.MipFieldValues_begin(self)

    def end(self):
        return _mscl.MipFieldValues_end(self)

    def rbegin(self):
        return _mscl.MipFieldValues_rbegin(self)

    def rend(self):
        return _mscl.MipFieldValues_rend(self)

    def clear(self):
        return _mscl.MipFieldValues_clear(self)

    def get_allocator(self):
        return _mscl.MipFieldValues_get_allocator(self)

    def pop_back(self):
        return _mscl.MipFieldValues_pop_back(self)

    def erase(self, *args):
        return _mscl.MipFieldValues_erase(self, *args)

    def __init__(self, *args):
        _mscl.MipFieldValues_swiginit(self, _mscl.new_MipFieldValues(*args))

    def push_back(self, x):
        return _mscl.MipFieldValues_push_back(self, x)

    def front(self):
        return _mscl.MipFieldValues_front(self)

    def back(self):
        return _mscl.MipFieldValues_back(self)

    def assign(self, n, x):
        return _mscl.MipFieldValues_assign(self, n, x)

    def resize(self, *args):
        return _mscl.MipFieldValues_resize(self, *args)

    def insert(self, *args):
        return _mscl.MipFieldValues_insert(self, *args)

    def reserve(self, n):
        return _mscl.MipFieldValues_reserve(self, n)

    def capacity(self):
        return _mscl.MipFieldValues_capacity(self)
    __swig_destroy__ = _mscl.delete_MipFieldValues

# Register MipFieldValues in _mscl:
_mscl.MipFieldValues_swigregister(MipFieldValues)

class MipCommandParamPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.MipCommandParamPair_swiginit(self, _mscl.new_MipCommandParamPair(*args))
    first = property(_mscl.MipCommandParamPair_first_get, _mscl.MipCommandParamPair_first_set)
    second = property(_mscl.MipCommandParamPair_second_get, _mscl.MipCommandParamPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _mscl.delete_MipCommandParamPair

# Register MipCommandParamPair in _mscl:
_mscl.MipCommandParamPair_swigregister(MipCommandParamPair)

class MipCommandParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.MipCommandParameters_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.MipCommandParameters___nonzero__(self)

    def __bool__(self):
        return _mscl.MipCommandParameters___bool__(self)

    def __len__(self):
        return _mscl.MipCommandParameters___len__(self)

    def __getslice__(self, i, j):
        return _mscl.MipCommandParameters___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.MipCommandParameters___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.MipCommandParameters___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.MipCommandParameters___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.MipCommandParameters___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.MipCommandParameters___setitem__(self, *args)

    def pop(self):
        return _mscl.MipCommandParameters_pop(self)

    def append(self, x):
        return _mscl.MipCommandParameters_append(self, x)

    def empty(self):
        return _mscl.MipCommandParameters_empty(self)

    def size(self):
        return _mscl.MipCommandParameters_size(self)

    def swap(self, v):
        return _mscl.MipCommandParameters_swap(self, v)

    def begin(self):
        return _mscl.MipCommandParameters_begin(self)

    def end(self):
        return _mscl.MipCommandParameters_end(self)

    def rbegin(self):
        return _mscl.MipCommandParameters_rbegin(self)

    def rend(self):
        return _mscl.MipCommandParameters_rend(self)

    def clear(self):
        return _mscl.MipCommandParameters_clear(self)

    def get_allocator(self):
        return _mscl.MipCommandParameters_get_allocator(self)

    def pop_back(self):
        return _mscl.MipCommandParameters_pop_back(self)

    def erase(self, *args):
        return _mscl.MipCommandParameters_erase(self, *args)

    def __init__(self, *args):
        _mscl.MipCommandParameters_swiginit(self, _mscl.new_MipCommandParameters(*args))

    def push_back(self, x):
        return _mscl.MipCommandParameters_push_back(self, x)

    def front(self):
        return _mscl.MipCommandParameters_front(self)

    def back(self):
        return _mscl.MipCommandParameters_back(self)

    def assign(self, n, x):
        return _mscl.MipCommandParameters_assign(self, n, x)

    def resize(self, *args):
        return _mscl.MipCommandParameters_resize(self, *args)

    def insert(self, *args):
        return _mscl.MipCommandParameters_insert(self, *args)

    def reserve(self, n):
        return _mscl.MipCommandParameters_reserve(self, n)

    def capacity(self):
        return _mscl.MipCommandParameters_capacity(self)
    __swig_destroy__ = _mscl.delete_MipCommandParameters

# Register MipCommandParameters in _mscl:
_mscl.MipCommandParameters_swigregister(MipCommandParameters)

class ChannelIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.ChannelIndex_swiginit(self, _mscl.new_ChannelIndex(*args))
    first = property(_mscl.ChannelIndex_first_get, _mscl.ChannelIndex_first_set)
    second = property(_mscl.ChannelIndex_second_get, _mscl.ChannelIndex_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _mscl.delete_ChannelIndex

# Register ChannelIndex in _mscl:
_mscl.ChannelIndex_swigregister(ChannelIndex)

class ChannelIndices(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.ChannelIndices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.ChannelIndices___nonzero__(self)

    def __bool__(self):
        return _mscl.ChannelIndices___bool__(self)

    def __len__(self):
        return _mscl.ChannelIndices___len__(self)

    def __getslice__(self, i, j):
        return _mscl.ChannelIndices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.ChannelIndices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.ChannelIndices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.ChannelIndices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.ChannelIndices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.ChannelIndices___setitem__(self, *args)

    def pop(self):
        return _mscl.ChannelIndices_pop(self)

    def append(self, x):
        return _mscl.ChannelIndices_append(self, x)

    def empty(self):
        return _mscl.ChannelIndices_empty(self)

    def size(self):
        return _mscl.ChannelIndices_size(self)

    def swap(self, v):
        return _mscl.ChannelIndices_swap(self, v)

    def begin(self):
        return _mscl.ChannelIndices_begin(self)

    def end(self):
        return _mscl.ChannelIndices_end(self)

    def rbegin(self):
        return _mscl.ChannelIndices_rbegin(self)

    def rend(self):
        return _mscl.ChannelIndices_rend(self)

    def clear(self):
        return _mscl.ChannelIndices_clear(self)

    def get_allocator(self):
        return _mscl.ChannelIndices_get_allocator(self)

    def pop_back(self):
        return _mscl.ChannelIndices_pop_back(self)

    def erase(self, *args):
        return _mscl.ChannelIndices_erase(self, *args)

    def __init__(self, *args):
        _mscl.ChannelIndices_swiginit(self, _mscl.new_ChannelIndices(*args))

    def push_back(self, x):
        return _mscl.ChannelIndices_push_back(self, x)

    def front(self):
        return _mscl.ChannelIndices_front(self)

    def back(self):
        return _mscl.ChannelIndices_back(self)

    def assign(self, n, x):
        return _mscl.ChannelIndices_assign(self, n, x)

    def resize(self, *args):
        return _mscl.ChannelIndices_resize(self, *args)

    def insert(self, *args):
        return _mscl.ChannelIndices_insert(self, *args)

    def reserve(self, n):
        return _mscl.ChannelIndices_reserve(self, n)

    def capacity(self):
        return _mscl.ChannelIndices_capacity(self)
    __swig_destroy__ = _mscl.delete_ChannelIndices

# Register ChannelIndices in _mscl:
_mscl.ChannelIndices_swigregister(ChannelIndices)

class ChannelFieldQualifiers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.ChannelFieldQualifiers_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.ChannelFieldQualifiers___nonzero__(self)

    def __bool__(self):
        return _mscl.ChannelFieldQualifiers___bool__(self)

    def __len__(self):
        return _mscl.ChannelFieldQualifiers___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.ChannelFieldQualifiers___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.ChannelFieldQualifiers___delitem__(self, key)

    def has_key(self, key):
        return _mscl.ChannelFieldQualifiers_has_key(self, key)

    def keys(self):
        return _mscl.ChannelFieldQualifiers_keys(self)

    def values(self):
        return _mscl.ChannelFieldQualifiers_values(self)

    def items(self):
        return _mscl.ChannelFieldQualifiers_items(self)

    def __contains__(self, key):
        return _mscl.ChannelFieldQualifiers___contains__(self, key)

    def key_iterator(self):
        return _mscl.ChannelFieldQualifiers_key_iterator(self)

    def value_iterator(self):
        return _mscl.ChannelFieldQualifiers_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.ChannelFieldQualifiers___setitem__(self, *args)

    def asdict(self):
        return _mscl.ChannelFieldQualifiers_asdict(self)

    def __init__(self, *args):
        _mscl.ChannelFieldQualifiers_swiginit(self, _mscl.new_ChannelFieldQualifiers(*args))

    def empty(self):
        return _mscl.ChannelFieldQualifiers_empty(self)

    def size(self):
        return _mscl.ChannelFieldQualifiers_size(self)

    def swap(self, v):
        return _mscl.ChannelFieldQualifiers_swap(self, v)

    def begin(self):
        return _mscl.ChannelFieldQualifiers_begin(self)

    def end(self):
        return _mscl.ChannelFieldQualifiers_end(self)

    def rbegin(self):
        return _mscl.ChannelFieldQualifiers_rbegin(self)

    def rend(self):
        return _mscl.ChannelFieldQualifiers_rend(self)

    def clear(self):
        return _mscl.ChannelFieldQualifiers_clear(self)

    def get_allocator(self):
        return _mscl.ChannelFieldQualifiers_get_allocator(self)

    def count(self, x):
        return _mscl.ChannelFieldQualifiers_count(self, x)

    def erase(self, *args):
        return _mscl.ChannelFieldQualifiers_erase(self, *args)

    def find(self, x):
        return _mscl.ChannelFieldQualifiers_find(self, x)

    def lower_bound(self, x):
        return _mscl.ChannelFieldQualifiers_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.ChannelFieldQualifiers_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_ChannelFieldQualifiers

# Register ChannelFieldQualifiers in _mscl:
_mscl.ChannelFieldQualifiers_swigregister(ChannelFieldQualifiers)

class GnssReceivers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.GnssReceivers_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.GnssReceivers___nonzero__(self)

    def __bool__(self):
        return _mscl.GnssReceivers___bool__(self)

    def __len__(self):
        return _mscl.GnssReceivers___len__(self)

    def __getslice__(self, i, j):
        return _mscl.GnssReceivers___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.GnssReceivers___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.GnssReceivers___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.GnssReceivers___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.GnssReceivers___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.GnssReceivers___setitem__(self, *args)

    def pop(self):
        return _mscl.GnssReceivers_pop(self)

    def append(self, x):
        return _mscl.GnssReceivers_append(self, x)

    def empty(self):
        return _mscl.GnssReceivers_empty(self)

    def size(self):
        return _mscl.GnssReceivers_size(self)

    def swap(self, v):
        return _mscl.GnssReceivers_swap(self, v)

    def begin(self):
        return _mscl.GnssReceivers_begin(self)

    def end(self):
        return _mscl.GnssReceivers_end(self)

    def rbegin(self):
        return _mscl.GnssReceivers_rbegin(self)

    def rend(self):
        return _mscl.GnssReceivers_rend(self)

    def clear(self):
        return _mscl.GnssReceivers_clear(self)

    def get_allocator(self):
        return _mscl.GnssReceivers_get_allocator(self)

    def pop_back(self):
        return _mscl.GnssReceivers_pop_back(self)

    def erase(self, *args):
        return _mscl.GnssReceivers_erase(self, *args)

    def __init__(self, *args):
        _mscl.GnssReceivers_swiginit(self, _mscl.new_GnssReceivers(*args))

    def push_back(self, x):
        return _mscl.GnssReceivers_push_back(self, x)

    def front(self):
        return _mscl.GnssReceivers_front(self)

    def back(self):
        return _mscl.GnssReceivers_back(self)

    def assign(self, n, x):
        return _mscl.GnssReceivers_assign(self, n, x)

    def resize(self, *args):
        return _mscl.GnssReceivers_resize(self, *args)

    def insert(self, *args):
        return _mscl.GnssReceivers_insert(self, *args)

    def reserve(self, n):
        return _mscl.GnssReceivers_reserve(self, n)

    def capacity(self):
        return _mscl.GnssReceivers_capacity(self)
    __swig_destroy__ = _mscl.delete_GnssReceivers

# Register GnssReceivers in _mscl:
_mscl.GnssReceivers_swigregister(GnssReceivers)

class SensorRanges(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.SensorRanges_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.SensorRanges___nonzero__(self)

    def __bool__(self):
        return _mscl.SensorRanges___bool__(self)

    def __len__(self):
        return _mscl.SensorRanges___len__(self)

    def __getslice__(self, i, j):
        return _mscl.SensorRanges___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.SensorRanges___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.SensorRanges___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.SensorRanges___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.SensorRanges___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.SensorRanges___setitem__(self, *args)

    def pop(self):
        return _mscl.SensorRanges_pop(self)

    def append(self, x):
        return _mscl.SensorRanges_append(self, x)

    def empty(self):
        return _mscl.SensorRanges_empty(self)

    def size(self):
        return _mscl.SensorRanges_size(self)

    def swap(self, v):
        return _mscl.SensorRanges_swap(self, v)

    def begin(self):
        return _mscl.SensorRanges_begin(self)

    def end(self):
        return _mscl.SensorRanges_end(self)

    def rbegin(self):
        return _mscl.SensorRanges_rbegin(self)

    def rend(self):
        return _mscl.SensorRanges_rend(self)

    def clear(self):
        return _mscl.SensorRanges_clear(self)

    def get_allocator(self):
        return _mscl.SensorRanges_get_allocator(self)

    def pop_back(self):
        return _mscl.SensorRanges_pop_back(self)

    def erase(self, *args):
        return _mscl.SensorRanges_erase(self, *args)

    def __init__(self, *args):
        _mscl.SensorRanges_swiginit(self, _mscl.new_SensorRanges(*args))

    def push_back(self, x):
        return _mscl.SensorRanges_push_back(self, x)

    def front(self):
        return _mscl.SensorRanges_front(self)

    def back(self):
        return _mscl.SensorRanges_back(self)

    def assign(self, n, x):
        return _mscl.SensorRanges_assign(self, n, x)

    def resize(self, *args):
        return _mscl.SensorRanges_resize(self, *args)

    def insert(self, *args):
        return _mscl.SensorRanges_insert(self, *args)

    def reserve(self, n):
        return _mscl.SensorRanges_reserve(self, n)

    def capacity(self):
        return _mscl.SensorRanges_capacity(self)
    __swig_destroy__ = _mscl.delete_SensorRanges

# Register SensorRanges in _mscl:
_mscl.SensorRanges_swigregister(SensorRanges)

class SensorRangeOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.SensorRangeOptions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.SensorRangeOptions___nonzero__(self)

    def __bool__(self):
        return _mscl.SensorRangeOptions___bool__(self)

    def __len__(self):
        return _mscl.SensorRangeOptions___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.SensorRangeOptions___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.SensorRangeOptions___delitem__(self, key)

    def has_key(self, key):
        return _mscl.SensorRangeOptions_has_key(self, key)

    def keys(self):
        return _mscl.SensorRangeOptions_keys(self)

    def values(self):
        return _mscl.SensorRangeOptions_values(self)

    def items(self):
        return _mscl.SensorRangeOptions_items(self)

    def __contains__(self, key):
        return _mscl.SensorRangeOptions___contains__(self, key)

    def key_iterator(self):
        return _mscl.SensorRangeOptions_key_iterator(self)

    def value_iterator(self):
        return _mscl.SensorRangeOptions_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.SensorRangeOptions___setitem__(self, *args)

    def asdict(self):
        return _mscl.SensorRangeOptions_asdict(self)

    def __init__(self, *args):
        _mscl.SensorRangeOptions_swiginit(self, _mscl.new_SensorRangeOptions(*args))

    def empty(self):
        return _mscl.SensorRangeOptions_empty(self)

    def size(self):
        return _mscl.SensorRangeOptions_size(self)

    def swap(self, v):
        return _mscl.SensorRangeOptions_swap(self, v)

    def begin(self):
        return _mscl.SensorRangeOptions_begin(self)

    def end(self):
        return _mscl.SensorRangeOptions_end(self)

    def rbegin(self):
        return _mscl.SensorRangeOptions_rbegin(self)

    def rend(self):
        return _mscl.SensorRangeOptions_rend(self)

    def clear(self):
        return _mscl.SensorRangeOptions_clear(self)

    def get_allocator(self):
        return _mscl.SensorRangeOptions_get_allocator(self)

    def count(self, x):
        return _mscl.SensorRangeOptions_count(self, x)

    def erase(self, *args):
        return _mscl.SensorRangeOptions_erase(self, *args)

    def find(self, x):
        return _mscl.SensorRangeOptions_find(self, x)

    def lower_bound(self, x):
        return _mscl.SensorRangeOptions_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.SensorRangeOptions_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_SensorRangeOptions

# Register SensorRangeOptions in _mscl:
_mscl.SensorRangeOptions_swigregister(SensorRangeOptions)

class CommPortInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.CommPortInfo_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.CommPortInfo___nonzero__(self)

    def __bool__(self):
        return _mscl.CommPortInfo___bool__(self)

    def __len__(self):
        return _mscl.CommPortInfo___len__(self)

    def __getslice__(self, i, j):
        return _mscl.CommPortInfo___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.CommPortInfo___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.CommPortInfo___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.CommPortInfo___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.CommPortInfo___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.CommPortInfo___setitem__(self, *args)

    def pop(self):
        return _mscl.CommPortInfo_pop(self)

    def append(self, x):
        return _mscl.CommPortInfo_append(self, x)

    def empty(self):
        return _mscl.CommPortInfo_empty(self)

    def size(self):
        return _mscl.CommPortInfo_size(self)

    def swap(self, v):
        return _mscl.CommPortInfo_swap(self, v)

    def begin(self):
        return _mscl.CommPortInfo_begin(self)

    def end(self):
        return _mscl.CommPortInfo_end(self)

    def rbegin(self):
        return _mscl.CommPortInfo_rbegin(self)

    def rend(self):
        return _mscl.CommPortInfo_rend(self)

    def clear(self):
        return _mscl.CommPortInfo_clear(self)

    def get_allocator(self):
        return _mscl.CommPortInfo_get_allocator(self)

    def pop_back(self):
        return _mscl.CommPortInfo_pop_back(self)

    def erase(self, *args):
        return _mscl.CommPortInfo_erase(self, *args)

    def __init__(self, *args):
        _mscl.CommPortInfo_swiginit(self, _mscl.new_CommPortInfo(*args))

    def push_back(self, x):
        return _mscl.CommPortInfo_push_back(self, x)

    def front(self):
        return _mscl.CommPortInfo_front(self)

    def back(self):
        return _mscl.CommPortInfo_back(self)

    def assign(self, n, x):
        return _mscl.CommPortInfo_assign(self, n, x)

    def resize(self, *args):
        return _mscl.CommPortInfo_resize(self, *args)

    def insert(self, *args):
        return _mscl.CommPortInfo_insert(self, *args)

    def reserve(self, n):
        return _mscl.CommPortInfo_reserve(self, n)

    def capacity(self):
        return _mscl.CommPortInfo_capacity(self)
    __swig_destroy__ = _mscl.delete_CommPortInfo

# Register CommPortInfo in _mscl:
_mscl.CommPortInfo_swigregister(CommPortInfo)

class EventTriggerStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.EventTriggerStatus_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.EventTriggerStatus___nonzero__(self)

    def __bool__(self):
        return _mscl.EventTriggerStatus___bool__(self)

    def __len__(self):
        return _mscl.EventTriggerStatus___len__(self)

    def __getslice__(self, i, j):
        return _mscl.EventTriggerStatus___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.EventTriggerStatus___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.EventTriggerStatus___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.EventTriggerStatus___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.EventTriggerStatus___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.EventTriggerStatus___setitem__(self, *args)

    def pop(self):
        return _mscl.EventTriggerStatus_pop(self)

    def append(self, x):
        return _mscl.EventTriggerStatus_append(self, x)

    def empty(self):
        return _mscl.EventTriggerStatus_empty(self)

    def size(self):
        return _mscl.EventTriggerStatus_size(self)

    def swap(self, v):
        return _mscl.EventTriggerStatus_swap(self, v)

    def begin(self):
        return _mscl.EventTriggerStatus_begin(self)

    def end(self):
        return _mscl.EventTriggerStatus_end(self)

    def rbegin(self):
        return _mscl.EventTriggerStatus_rbegin(self)

    def rend(self):
        return _mscl.EventTriggerStatus_rend(self)

    def clear(self):
        return _mscl.EventTriggerStatus_clear(self)

    def get_allocator(self):
        return _mscl.EventTriggerStatus_get_allocator(self)

    def pop_back(self):
        return _mscl.EventTriggerStatus_pop_back(self)

    def erase(self, *args):
        return _mscl.EventTriggerStatus_erase(self, *args)

    def __init__(self, *args):
        _mscl.EventTriggerStatus_swiginit(self, _mscl.new_EventTriggerStatus(*args))

    def push_back(self, x):
        return _mscl.EventTriggerStatus_push_back(self, x)

    def front(self):
        return _mscl.EventTriggerStatus_front(self)

    def back(self):
        return _mscl.EventTriggerStatus_back(self)

    def assign(self, n, x):
        return _mscl.EventTriggerStatus_assign(self, n, x)

    def resize(self, *args):
        return _mscl.EventTriggerStatus_resize(self, *args)

    def insert(self, *args):
        return _mscl.EventTriggerStatus_insert(self, *args)

    def reserve(self, n):
        return _mscl.EventTriggerStatus_reserve(self, n)

    def capacity(self):
        return _mscl.EventTriggerStatus_capacity(self)
    __swig_destroy__ = _mscl.delete_EventTriggerStatus

# Register EventTriggerStatus in _mscl:
_mscl.EventTriggerStatus_swigregister(EventTriggerStatus)

class EventActionStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.EventActionStatus_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.EventActionStatus___nonzero__(self)

    def __bool__(self):
        return _mscl.EventActionStatus___bool__(self)

    def __len__(self):
        return _mscl.EventActionStatus___len__(self)

    def __getslice__(self, i, j):
        return _mscl.EventActionStatus___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.EventActionStatus___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.EventActionStatus___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.EventActionStatus___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.EventActionStatus___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.EventActionStatus___setitem__(self, *args)

    def pop(self):
        return _mscl.EventActionStatus_pop(self)

    def append(self, x):
        return _mscl.EventActionStatus_append(self, x)

    def empty(self):
        return _mscl.EventActionStatus_empty(self)

    def size(self):
        return _mscl.EventActionStatus_size(self)

    def swap(self, v):
        return _mscl.EventActionStatus_swap(self, v)

    def begin(self):
        return _mscl.EventActionStatus_begin(self)

    def end(self):
        return _mscl.EventActionStatus_end(self)

    def rbegin(self):
        return _mscl.EventActionStatus_rbegin(self)

    def rend(self):
        return _mscl.EventActionStatus_rend(self)

    def clear(self):
        return _mscl.EventActionStatus_clear(self)

    def get_allocator(self):
        return _mscl.EventActionStatus_get_allocator(self)

    def pop_back(self):
        return _mscl.EventActionStatus_pop_back(self)

    def erase(self, *args):
        return _mscl.EventActionStatus_erase(self, *args)

    def __init__(self, *args):
        _mscl.EventActionStatus_swiginit(self, _mscl.new_EventActionStatus(*args))

    def push_back(self, x):
        return _mscl.EventActionStatus_push_back(self, x)

    def front(self):
        return _mscl.EventActionStatus_front(self)

    def back(self):
        return _mscl.EventActionStatus_back(self)

    def assign(self, n, x):
        return _mscl.EventActionStatus_assign(self, n, x)

    def resize(self, *args):
        return _mscl.EventActionStatus_resize(self, *args)

    def insert(self, *args):
        return _mscl.EventActionStatus_insert(self, *args)

    def reserve(self, n):
        return _mscl.EventActionStatus_reserve(self, n)

    def capacity(self):
        return _mscl.EventActionStatus_capacity(self)
    __swig_destroy__ = _mscl.delete_EventActionStatus

# Register EventActionStatus in _mscl:
_mscl.EventActionStatus_swigregister(EventActionStatus)

class ChannelGroups(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.ChannelGroups_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.ChannelGroups___nonzero__(self)

    def __bool__(self):
        return _mscl.ChannelGroups___bool__(self)

    def __len__(self):
        return _mscl.ChannelGroups___len__(self)

    def __getslice__(self, i, j):
        return _mscl.ChannelGroups___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.ChannelGroups___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.ChannelGroups___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.ChannelGroups___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.ChannelGroups___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.ChannelGroups___setitem__(self, *args)

    def pop(self):
        return _mscl.ChannelGroups_pop(self)

    def append(self, x):
        return _mscl.ChannelGroups_append(self, x)

    def empty(self):
        return _mscl.ChannelGroups_empty(self)

    def size(self):
        return _mscl.ChannelGroups_size(self)

    def swap(self, v):
        return _mscl.ChannelGroups_swap(self, v)

    def begin(self):
        return _mscl.ChannelGroups_begin(self)

    def end(self):
        return _mscl.ChannelGroups_end(self)

    def rbegin(self):
        return _mscl.ChannelGroups_rbegin(self)

    def rend(self):
        return _mscl.ChannelGroups_rend(self)

    def clear(self):
        return _mscl.ChannelGroups_clear(self)

    def get_allocator(self):
        return _mscl.ChannelGroups_get_allocator(self)

    def pop_back(self):
        return _mscl.ChannelGroups_pop_back(self)

    def erase(self, *args):
        return _mscl.ChannelGroups_erase(self, *args)

    def __init__(self, *args):
        _mscl.ChannelGroups_swiginit(self, _mscl.new_ChannelGroups(*args))

    def push_back(self, x):
        return _mscl.ChannelGroups_push_back(self, x)

    def front(self):
        return _mscl.ChannelGroups_front(self)

    def back(self):
        return _mscl.ChannelGroups_back(self)

    def assign(self, n, x):
        return _mscl.ChannelGroups_assign(self, n, x)

    def resize(self, *args):
        return _mscl.ChannelGroups_resize(self, *args)

    def insert(self, *args):
        return _mscl.ChannelGroups_insert(self, *args)

    def reserve(self, n):
        return _mscl.ChannelGroups_reserve(self, n)

    def capacity(self):
        return _mscl.ChannelGroups_capacity(self)
    __swig_destroy__ = _mscl.delete_ChannelGroups

# Register ChannelGroups in _mscl:
_mscl.ChannelGroups_swigregister(ChannelGroups)

class WirelessChannels(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.WirelessChannels_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.WirelessChannels___nonzero__(self)

    def __bool__(self):
        return _mscl.WirelessChannels___bool__(self)

    def __len__(self):
        return _mscl.WirelessChannels___len__(self)

    def __getslice__(self, i, j):
        return _mscl.WirelessChannels___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.WirelessChannels___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.WirelessChannels___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.WirelessChannels___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.WirelessChannels___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.WirelessChannels___setitem__(self, *args)

    def pop(self):
        return _mscl.WirelessChannels_pop(self)

    def append(self, x):
        return _mscl.WirelessChannels_append(self, x)

    def empty(self):
        return _mscl.WirelessChannels_empty(self)

    def size(self):
        return _mscl.WirelessChannels_size(self)

    def swap(self, v):
        return _mscl.WirelessChannels_swap(self, v)

    def begin(self):
        return _mscl.WirelessChannels_begin(self)

    def end(self):
        return _mscl.WirelessChannels_end(self)

    def rbegin(self):
        return _mscl.WirelessChannels_rbegin(self)

    def rend(self):
        return _mscl.WirelessChannels_rend(self)

    def clear(self):
        return _mscl.WirelessChannels_clear(self)

    def get_allocator(self):
        return _mscl.WirelessChannels_get_allocator(self)

    def pop_back(self):
        return _mscl.WirelessChannels_pop_back(self)

    def erase(self, *args):
        return _mscl.WirelessChannels_erase(self, *args)

    def __init__(self, *args):
        _mscl.WirelessChannels_swiginit(self, _mscl.new_WirelessChannels(*args))

    def push_back(self, x):
        return _mscl.WirelessChannels_push_back(self, x)

    def front(self):
        return _mscl.WirelessChannels_front(self)

    def back(self):
        return _mscl.WirelessChannels_back(self)

    def assign(self, n, x):
        return _mscl.WirelessChannels_assign(self, n, x)

    def resize(self, *args):
        return _mscl.WirelessChannels_resize(self, *args)

    def insert(self, *args):
        return _mscl.WirelessChannels_insert(self, *args)

    def reserve(self, n):
        return _mscl.WirelessChannels_reserve(self, n)

    def capacity(self):
        return _mscl.WirelessChannels_capacity(self)
    __swig_destroy__ = _mscl.delete_WirelessChannels

# Register WirelessChannels in _mscl:
_mscl.WirelessChannels_swigregister(WirelessChannels)

class DamageAngles(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.DamageAngles_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.DamageAngles___nonzero__(self)

    def __bool__(self):
        return _mscl.DamageAngles___bool__(self)

    def __len__(self):
        return _mscl.DamageAngles___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.DamageAngles___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.DamageAngles___delitem__(self, key)

    def has_key(self, key):
        return _mscl.DamageAngles_has_key(self, key)

    def keys(self):
        return _mscl.DamageAngles_keys(self)

    def values(self):
        return _mscl.DamageAngles_values(self)

    def items(self):
        return _mscl.DamageAngles_items(self)

    def __contains__(self, key):
        return _mscl.DamageAngles___contains__(self, key)

    def key_iterator(self):
        return _mscl.DamageAngles_key_iterator(self)

    def value_iterator(self):
        return _mscl.DamageAngles_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.DamageAngles___setitem__(self, *args)

    def asdict(self):
        return _mscl.DamageAngles_asdict(self)

    def __init__(self, *args):
        _mscl.DamageAngles_swiginit(self, _mscl.new_DamageAngles(*args))

    def empty(self):
        return _mscl.DamageAngles_empty(self)

    def size(self):
        return _mscl.DamageAngles_size(self)

    def swap(self, v):
        return _mscl.DamageAngles_swap(self, v)

    def begin(self):
        return _mscl.DamageAngles_begin(self)

    def end(self):
        return _mscl.DamageAngles_end(self)

    def rbegin(self):
        return _mscl.DamageAngles_rbegin(self)

    def rend(self):
        return _mscl.DamageAngles_rend(self)

    def clear(self):
        return _mscl.DamageAngles_clear(self)

    def get_allocator(self):
        return _mscl.DamageAngles_get_allocator(self)

    def count(self, x):
        return _mscl.DamageAngles_count(self, x)

    def erase(self, *args):
        return _mscl.DamageAngles_erase(self, *args)

    def find(self, x):
        return _mscl.DamageAngles_find(self, x)

    def lower_bound(self, x):
        return _mscl.DamageAngles_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.DamageAngles_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_DamageAngles

# Register DamageAngles in _mscl:
_mscl.DamageAngles_swigregister(DamageAngles)

class SnCurveSegments(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.SnCurveSegments_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.SnCurveSegments___nonzero__(self)

    def __bool__(self):
        return _mscl.SnCurveSegments___bool__(self)

    def __len__(self):
        return _mscl.SnCurveSegments___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.SnCurveSegments___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.SnCurveSegments___delitem__(self, key)

    def has_key(self, key):
        return _mscl.SnCurveSegments_has_key(self, key)

    def keys(self):
        return _mscl.SnCurveSegments_keys(self)

    def values(self):
        return _mscl.SnCurveSegments_values(self)

    def items(self):
        return _mscl.SnCurveSegments_items(self)

    def __contains__(self, key):
        return _mscl.SnCurveSegments___contains__(self, key)

    def key_iterator(self):
        return _mscl.SnCurveSegments_key_iterator(self)

    def value_iterator(self):
        return _mscl.SnCurveSegments_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.SnCurveSegments___setitem__(self, *args)

    def asdict(self):
        return _mscl.SnCurveSegments_asdict(self)

    def __init__(self, *args):
        _mscl.SnCurveSegments_swiginit(self, _mscl.new_SnCurveSegments(*args))

    def empty(self):
        return _mscl.SnCurveSegments_empty(self)

    def size(self):
        return _mscl.SnCurveSegments_size(self)

    def swap(self, v):
        return _mscl.SnCurveSegments_swap(self, v)

    def begin(self):
        return _mscl.SnCurveSegments_begin(self)

    def end(self):
        return _mscl.SnCurveSegments_end(self)

    def rbegin(self):
        return _mscl.SnCurveSegments_rbegin(self)

    def rend(self):
        return _mscl.SnCurveSegments_rend(self)

    def clear(self):
        return _mscl.SnCurveSegments_clear(self)

    def get_allocator(self):
        return _mscl.SnCurveSegments_get_allocator(self)

    def count(self, x):
        return _mscl.SnCurveSegments_count(self, x)

    def erase(self, *args):
        return _mscl.SnCurveSegments_erase(self, *args)

    def find(self, x):
        return _mscl.SnCurveSegments_find(self, x)

    def lower_bound(self, x):
        return _mscl.SnCurveSegments_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.SnCurveSegments_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_SnCurveSegments

# Register SnCurveSegments in _mscl:
_mscl.SnCurveSegments_swigregister(SnCurveSegments)

class RfSweep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.RfSweep_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.RfSweep___nonzero__(self)

    def __bool__(self):
        return _mscl.RfSweep___bool__(self)

    def __len__(self):
        return _mscl.RfSweep___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.RfSweep___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.RfSweep___delitem__(self, key)

    def has_key(self, key):
        return _mscl.RfSweep_has_key(self, key)

    def keys(self):
        return _mscl.RfSweep_keys(self)

    def values(self):
        return _mscl.RfSweep_values(self)

    def items(self):
        return _mscl.RfSweep_items(self)

    def __contains__(self, key):
        return _mscl.RfSweep___contains__(self, key)

    def key_iterator(self):
        return _mscl.RfSweep_key_iterator(self)

    def value_iterator(self):
        return _mscl.RfSweep_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.RfSweep___setitem__(self, *args)

    def asdict(self):
        return _mscl.RfSweep_asdict(self)

    def __init__(self, *args):
        _mscl.RfSweep_swiginit(self, _mscl.new_RfSweep(*args))

    def empty(self):
        return _mscl.RfSweep_empty(self)

    def size(self):
        return _mscl.RfSweep_size(self)

    def swap(self, v):
        return _mscl.RfSweep_swap(self, v)

    def begin(self):
        return _mscl.RfSweep_begin(self)

    def end(self):
        return _mscl.RfSweep_end(self)

    def rbegin(self):
        return _mscl.RfSweep_rbegin(self)

    def rend(self):
        return _mscl.RfSweep_rend(self)

    def clear(self):
        return _mscl.RfSweep_clear(self)

    def get_allocator(self):
        return _mscl.RfSweep_get_allocator(self)

    def count(self, x):
        return _mscl.RfSweep_count(self, x)

    def erase(self, *args):
        return _mscl.RfSweep_erase(self, *args)

    def find(self, x):
        return _mscl.RfSweep_find(self, x)

    def lower_bound(self, x):
        return _mscl.RfSweep_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.RfSweep_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_RfSweep

# Register RfSweep in _mscl:
_mscl.RfSweep_swigregister(RfSweep)

class Triggers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.Triggers_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.Triggers___nonzero__(self)

    def __bool__(self):
        return _mscl.Triggers___bool__(self)

    def __len__(self):
        return _mscl.Triggers___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.Triggers___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.Triggers___delitem__(self, key)

    def has_key(self, key):
        return _mscl.Triggers_has_key(self, key)

    def keys(self):
        return _mscl.Triggers_keys(self)

    def values(self):
        return _mscl.Triggers_values(self)

    def items(self):
        return _mscl.Triggers_items(self)

    def __contains__(self, key):
        return _mscl.Triggers___contains__(self, key)

    def key_iterator(self):
        return _mscl.Triggers_key_iterator(self)

    def value_iterator(self):
        return _mscl.Triggers_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.Triggers___setitem__(self, *args)

    def asdict(self):
        return _mscl.Triggers_asdict(self)

    def __init__(self, *args):
        _mscl.Triggers_swiginit(self, _mscl.new_Triggers(*args))

    def empty(self):
        return _mscl.Triggers_empty(self)

    def size(self):
        return _mscl.Triggers_size(self)

    def swap(self, v):
        return _mscl.Triggers_swap(self, v)

    def begin(self):
        return _mscl.Triggers_begin(self)

    def end(self):
        return _mscl.Triggers_end(self)

    def rbegin(self):
        return _mscl.Triggers_rbegin(self)

    def rend(self):
        return _mscl.Triggers_rend(self)

    def clear(self):
        return _mscl.Triggers_clear(self)

    def get_allocator(self):
        return _mscl.Triggers_get_allocator(self)

    def count(self, x):
        return _mscl.Triggers_count(self, x)

    def erase(self, *args):
        return _mscl.Triggers_erase(self, *args)

    def find(self, x):
        return _mscl.Triggers_find(self, x)

    def lower_bound(self, x):
        return _mscl.Triggers_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.Triggers_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_Triggers

# Register Triggers in _mscl:
_mscl.Triggers_swigregister(Triggers)

class ChannelCalMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.ChannelCalMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.ChannelCalMap___nonzero__(self)

    def __bool__(self):
        return _mscl.ChannelCalMap___bool__(self)

    def __len__(self):
        return _mscl.ChannelCalMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.ChannelCalMap___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.ChannelCalMap___delitem__(self, key)

    def has_key(self, key):
        return _mscl.ChannelCalMap_has_key(self, key)

    def keys(self):
        return _mscl.ChannelCalMap_keys(self)

    def values(self):
        return _mscl.ChannelCalMap_values(self)

    def items(self):
        return _mscl.ChannelCalMap_items(self)

    def __contains__(self, key):
        return _mscl.ChannelCalMap___contains__(self, key)

    def key_iterator(self):
        return _mscl.ChannelCalMap_key_iterator(self)

    def value_iterator(self):
        return _mscl.ChannelCalMap_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.ChannelCalMap___setitem__(self, *args)

    def asdict(self):
        return _mscl.ChannelCalMap_asdict(self)

    def __init__(self, *args):
        _mscl.ChannelCalMap_swiginit(self, _mscl.new_ChannelCalMap(*args))

    def empty(self):
        return _mscl.ChannelCalMap_empty(self)

    def size(self):
        return _mscl.ChannelCalMap_size(self)

    def swap(self, v):
        return _mscl.ChannelCalMap_swap(self, v)

    def begin(self):
        return _mscl.ChannelCalMap_begin(self)

    def end(self):
        return _mscl.ChannelCalMap_end(self)

    def rbegin(self):
        return _mscl.ChannelCalMap_rbegin(self)

    def rend(self):
        return _mscl.ChannelCalMap_rend(self)

    def clear(self):
        return _mscl.ChannelCalMap_clear(self)

    def get_allocator(self):
        return _mscl.ChannelCalMap_get_allocator(self)

    def count(self, x):
        return _mscl.ChannelCalMap_count(self, x)

    def erase(self, *args):
        return _mscl.ChannelCalMap_erase(self, *args)

    def find(self, x):
        return _mscl.ChannelCalMap_find(self, x)

    def lower_bound(self, x):
        return _mscl.ChannelCalMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.ChannelCalMap_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_ChannelCalMap

# Register ChannelCalMap in _mscl:
_mscl.ChannelCalMap_swigregister(ChannelCalMap)

class WirelessPollData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.WirelessPollData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.WirelessPollData___nonzero__(self)

    def __bool__(self):
        return _mscl.WirelessPollData___bool__(self)

    def __len__(self):
        return _mscl.WirelessPollData___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.WirelessPollData___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.WirelessPollData___delitem__(self, key)

    def has_key(self, key):
        return _mscl.WirelessPollData_has_key(self, key)

    def keys(self):
        return _mscl.WirelessPollData_keys(self)

    def values(self):
        return _mscl.WirelessPollData_values(self)

    def items(self):
        return _mscl.WirelessPollData_items(self)

    def __contains__(self, key):
        return _mscl.WirelessPollData___contains__(self, key)

    def key_iterator(self):
        return _mscl.WirelessPollData_key_iterator(self)

    def value_iterator(self):
        return _mscl.WirelessPollData_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.WirelessPollData___setitem__(self, *args)

    def asdict(self):
        return _mscl.WirelessPollData_asdict(self)

    def __init__(self, *args):
        _mscl.WirelessPollData_swiginit(self, _mscl.new_WirelessPollData(*args))

    def empty(self):
        return _mscl.WirelessPollData_empty(self)

    def size(self):
        return _mscl.WirelessPollData_size(self)

    def swap(self, v):
        return _mscl.WirelessPollData_swap(self, v)

    def begin(self):
        return _mscl.WirelessPollData_begin(self)

    def end(self):
        return _mscl.WirelessPollData_end(self)

    def rbegin(self):
        return _mscl.WirelessPollData_rbegin(self)

    def rend(self):
        return _mscl.WirelessPollData_rend(self)

    def clear(self):
        return _mscl.WirelessPollData_clear(self)

    def get_allocator(self):
        return _mscl.WirelessPollData_get_allocator(self)

    def count(self, x):
        return _mscl.WirelessPollData_count(self, x)

    def erase(self, *args):
        return _mscl.WirelessPollData_erase(self, *args)

    def find(self, x):
        return _mscl.WirelessPollData_find(self, x)

    def lower_bound(self, x):
        return _mscl.WirelessPollData_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.WirelessPollData_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_WirelessPollData

# Register WirelessPollData in _mscl:
_mscl.WirelessPollData_swigregister(WirelessPollData)

class ConnectionDebugDataVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.ConnectionDebugDataVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.ConnectionDebugDataVec___nonzero__(self)

    def __bool__(self):
        return _mscl.ConnectionDebugDataVec___bool__(self)

    def __len__(self):
        return _mscl.ConnectionDebugDataVec___len__(self)

    def __getslice__(self, i, j):
        return _mscl.ConnectionDebugDataVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.ConnectionDebugDataVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.ConnectionDebugDataVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.ConnectionDebugDataVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.ConnectionDebugDataVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.ConnectionDebugDataVec___setitem__(self, *args)

    def pop(self):
        return _mscl.ConnectionDebugDataVec_pop(self)

    def append(self, x):
        return _mscl.ConnectionDebugDataVec_append(self, x)

    def empty(self):
        return _mscl.ConnectionDebugDataVec_empty(self)

    def size(self):
        return _mscl.ConnectionDebugDataVec_size(self)

    def swap(self, v):
        return _mscl.ConnectionDebugDataVec_swap(self, v)

    def begin(self):
        return _mscl.ConnectionDebugDataVec_begin(self)

    def end(self):
        return _mscl.ConnectionDebugDataVec_end(self)

    def rbegin(self):
        return _mscl.ConnectionDebugDataVec_rbegin(self)

    def rend(self):
        return _mscl.ConnectionDebugDataVec_rend(self)

    def clear(self):
        return _mscl.ConnectionDebugDataVec_clear(self)

    def get_allocator(self):
        return _mscl.ConnectionDebugDataVec_get_allocator(self)

    def pop_back(self):
        return _mscl.ConnectionDebugDataVec_pop_back(self)

    def erase(self, *args):
        return _mscl.ConnectionDebugDataVec_erase(self, *args)

    def __init__(self, *args):
        _mscl.ConnectionDebugDataVec_swiginit(self, _mscl.new_ConnectionDebugDataVec(*args))

    def push_back(self, x):
        return _mscl.ConnectionDebugDataVec_push_back(self, x)

    def front(self):
        return _mscl.ConnectionDebugDataVec_front(self)

    def back(self):
        return _mscl.ConnectionDebugDataVec_back(self)

    def assign(self, n, x):
        return _mscl.ConnectionDebugDataVec_assign(self, n, x)

    def resize(self, *args):
        return _mscl.ConnectionDebugDataVec_resize(self, *args)

    def insert(self, *args):
        return _mscl.ConnectionDebugDataVec_insert(self, *args)

    def reserve(self, n):
        return _mscl.ConnectionDebugDataVec_reserve(self, n)

    def capacity(self):
        return _mscl.ConnectionDebugDataVec_capacity(self)
    __swig_destroy__ = _mscl.delete_ConnectionDebugDataVec

# Register ConnectionDebugDataVec in _mscl:
_mscl.ConnectionDebugDataVec_swigregister(ConnectionDebugDataVec)

class SatellitePRNs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.SatellitePRNs_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.SatellitePRNs___nonzero__(self)

    def __bool__(self):
        return _mscl.SatellitePRNs___bool__(self)

    def __len__(self):
        return _mscl.SatellitePRNs___len__(self)

    def __getslice__(self, i, j):
        return _mscl.SatellitePRNs___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.SatellitePRNs___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.SatellitePRNs___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.SatellitePRNs___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.SatellitePRNs___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.SatellitePRNs___setitem__(self, *args)

    def pop(self):
        return _mscl.SatellitePRNs_pop(self)

    def append(self, x):
        return _mscl.SatellitePRNs_append(self, x)

    def empty(self):
        return _mscl.SatellitePRNs_empty(self)

    def size(self):
        return _mscl.SatellitePRNs_size(self)

    def swap(self, v):
        return _mscl.SatellitePRNs_swap(self, v)

    def begin(self):
        return _mscl.SatellitePRNs_begin(self)

    def end(self):
        return _mscl.SatellitePRNs_end(self)

    def rbegin(self):
        return _mscl.SatellitePRNs_rbegin(self)

    def rend(self):
        return _mscl.SatellitePRNs_rend(self)

    def clear(self):
        return _mscl.SatellitePRNs_clear(self)

    def get_allocator(self):
        return _mscl.SatellitePRNs_get_allocator(self)

    def pop_back(self):
        return _mscl.SatellitePRNs_pop_back(self)

    def erase(self, *args):
        return _mscl.SatellitePRNs_erase(self, *args)

    def __init__(self, *args):
        _mscl.SatellitePRNs_swiginit(self, _mscl.new_SatellitePRNs(*args))

    def push_back(self, x):
        return _mscl.SatellitePRNs_push_back(self, x)

    def front(self):
        return _mscl.SatellitePRNs_front(self)

    def back(self):
        return _mscl.SatellitePRNs_back(self)

    def assign(self, n, x):
        return _mscl.SatellitePRNs_assign(self, n, x)

    def resize(self, *args):
        return _mscl.SatellitePRNs_resize(self, *args)

    def insert(self, *args):
        return _mscl.SatellitePRNs_insert(self, *args)

    def reserve(self, n):
        return _mscl.SatellitePRNs_reserve(self, n)

    def capacity(self):
        return _mscl.SatellitePRNs_capacity(self)
    __swig_destroy__ = _mscl.delete_SatellitePRNs

# Register SatellitePRNs in _mscl:
_mscl.SatellitePRNs_swigregister(SatellitePRNs)

class Constellations(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.Constellations_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.Constellations___nonzero__(self)

    def __bool__(self):
        return _mscl.Constellations___bool__(self)

    def __len__(self):
        return _mscl.Constellations___len__(self)

    def __getslice__(self, i, j):
        return _mscl.Constellations___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.Constellations___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.Constellations___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.Constellations___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.Constellations___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.Constellations___setitem__(self, *args)

    def pop(self):
        return _mscl.Constellations_pop(self)

    def append(self, x):
        return _mscl.Constellations_append(self, x)

    def empty(self):
        return _mscl.Constellations_empty(self)

    def size(self):
        return _mscl.Constellations_size(self)

    def swap(self, v):
        return _mscl.Constellations_swap(self, v)

    def begin(self):
        return _mscl.Constellations_begin(self)

    def end(self):
        return _mscl.Constellations_end(self)

    def rbegin(self):
        return _mscl.Constellations_rbegin(self)

    def rend(self):
        return _mscl.Constellations_rend(self)

    def clear(self):
        return _mscl.Constellations_clear(self)

    def get_allocator(self):
        return _mscl.Constellations_get_allocator(self)

    def pop_back(self):
        return _mscl.Constellations_pop_back(self)

    def erase(self, *args):
        return _mscl.Constellations_erase(self, *args)

    def __init__(self, *args):
        _mscl.Constellations_swiginit(self, _mscl.new_Constellations(*args))

    def push_back(self, x):
        return _mscl.Constellations_push_back(self, x)

    def front(self):
        return _mscl.Constellations_front(self)

    def back(self):
        return _mscl.Constellations_back(self)

    def assign(self, n, x):
        return _mscl.Constellations_assign(self, n, x)

    def resize(self, *args):
        return _mscl.Constellations_resize(self, *args)

    def insert(self, *args):
        return _mscl.Constellations_insert(self, *args)

    def reserve(self, n):
        return _mscl.Constellations_reserve(self, n)

    def capacity(self):
        return _mscl.Constellations_capacity(self)
    __swig_destroy__ = _mscl.delete_Constellations

# Register Constellations in _mscl:
_mscl.Constellations_swigregister(Constellations)

class HeadingUpdateOptionsList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.HeadingUpdateOptionsList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.HeadingUpdateOptionsList___nonzero__(self)

    def __bool__(self):
        return _mscl.HeadingUpdateOptionsList___bool__(self)

    def __len__(self):
        return _mscl.HeadingUpdateOptionsList___len__(self)

    def __getslice__(self, i, j):
        return _mscl.HeadingUpdateOptionsList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.HeadingUpdateOptionsList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.HeadingUpdateOptionsList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.HeadingUpdateOptionsList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.HeadingUpdateOptionsList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.HeadingUpdateOptionsList___setitem__(self, *args)

    def pop(self):
        return _mscl.HeadingUpdateOptionsList_pop(self)

    def append(self, x):
        return _mscl.HeadingUpdateOptionsList_append(self, x)

    def empty(self):
        return _mscl.HeadingUpdateOptionsList_empty(self)

    def size(self):
        return _mscl.HeadingUpdateOptionsList_size(self)

    def swap(self, v):
        return _mscl.HeadingUpdateOptionsList_swap(self, v)

    def begin(self):
        return _mscl.HeadingUpdateOptionsList_begin(self)

    def end(self):
        return _mscl.HeadingUpdateOptionsList_end(self)

    def rbegin(self):
        return _mscl.HeadingUpdateOptionsList_rbegin(self)

    def rend(self):
        return _mscl.HeadingUpdateOptionsList_rend(self)

    def clear(self):
        return _mscl.HeadingUpdateOptionsList_clear(self)

    def get_allocator(self):
        return _mscl.HeadingUpdateOptionsList_get_allocator(self)

    def pop_back(self):
        return _mscl.HeadingUpdateOptionsList_pop_back(self)

    def erase(self, *args):
        return _mscl.HeadingUpdateOptionsList_erase(self, *args)

    def __init__(self, *args):
        _mscl.HeadingUpdateOptionsList_swiginit(self, _mscl.new_HeadingUpdateOptionsList(*args))

    def push_back(self, x):
        return _mscl.HeadingUpdateOptionsList_push_back(self, x)

    def front(self):
        return _mscl.HeadingUpdateOptionsList_front(self)

    def back(self):
        return _mscl.HeadingUpdateOptionsList_back(self)

    def assign(self, n, x):
        return _mscl.HeadingUpdateOptionsList_assign(self, n, x)

    def resize(self, *args):
        return _mscl.HeadingUpdateOptionsList_resize(self, *args)

    def insert(self, *args):
        return _mscl.HeadingUpdateOptionsList_insert(self, *args)

    def reserve(self, n):
        return _mscl.HeadingUpdateOptionsList_reserve(self, n)

    def capacity(self):
        return _mscl.HeadingUpdateOptionsList_capacity(self)
    __swig_destroy__ = _mscl.delete_HeadingUpdateOptionsList

# Register HeadingUpdateOptionsList in _mscl:
_mscl.HeadingUpdateOptionsList_swigregister(HeadingUpdateOptionsList)

class AdaptiveMeasurementModes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.AdaptiveMeasurementModes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.AdaptiveMeasurementModes___nonzero__(self)

    def __bool__(self):
        return _mscl.AdaptiveMeasurementModes___bool__(self)

    def __len__(self):
        return _mscl.AdaptiveMeasurementModes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.AdaptiveMeasurementModes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.AdaptiveMeasurementModes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.AdaptiveMeasurementModes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.AdaptiveMeasurementModes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.AdaptiveMeasurementModes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.AdaptiveMeasurementModes___setitem__(self, *args)

    def pop(self):
        return _mscl.AdaptiveMeasurementModes_pop(self)

    def append(self, x):
        return _mscl.AdaptiveMeasurementModes_append(self, x)

    def empty(self):
        return _mscl.AdaptiveMeasurementModes_empty(self)

    def size(self):
        return _mscl.AdaptiveMeasurementModes_size(self)

    def swap(self, v):
        return _mscl.AdaptiveMeasurementModes_swap(self, v)

    def begin(self):
        return _mscl.AdaptiveMeasurementModes_begin(self)

    def end(self):
        return _mscl.AdaptiveMeasurementModes_end(self)

    def rbegin(self):
        return _mscl.AdaptiveMeasurementModes_rbegin(self)

    def rend(self):
        return _mscl.AdaptiveMeasurementModes_rend(self)

    def clear(self):
        return _mscl.AdaptiveMeasurementModes_clear(self)

    def get_allocator(self):
        return _mscl.AdaptiveMeasurementModes_get_allocator(self)

    def pop_back(self):
        return _mscl.AdaptiveMeasurementModes_pop_back(self)

    def erase(self, *args):
        return _mscl.AdaptiveMeasurementModes_erase(self, *args)

    def __init__(self, *args):
        _mscl.AdaptiveMeasurementModes_swiginit(self, _mscl.new_AdaptiveMeasurementModes(*args))

    def push_back(self, x):
        return _mscl.AdaptiveMeasurementModes_push_back(self, x)

    def front(self):
        return _mscl.AdaptiveMeasurementModes_front(self)

    def back(self):
        return _mscl.AdaptiveMeasurementModes_back(self)

    def assign(self, n, x):
        return _mscl.AdaptiveMeasurementModes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.AdaptiveMeasurementModes_resize(self, *args)

    def insert(self, *args):
        return _mscl.AdaptiveMeasurementModes_insert(self, *args)

    def reserve(self, n):
        return _mscl.AdaptiveMeasurementModes_reserve(self, n)

    def capacity(self):
        return _mscl.AdaptiveMeasurementModes_capacity(self)
    __swig_destroy__ = _mscl.delete_AdaptiveMeasurementModes

# Register AdaptiveMeasurementModes in _mscl:
_mscl.AdaptiveMeasurementModes_swigregister(AdaptiveMeasurementModes)

class GeometricVectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.GeometricVectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.GeometricVectors___nonzero__(self)

    def __bool__(self):
        return _mscl.GeometricVectors___bool__(self)

    def __len__(self):
        return _mscl.GeometricVectors___len__(self)

    def __getslice__(self, i, j):
        return _mscl.GeometricVectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.GeometricVectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.GeometricVectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.GeometricVectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.GeometricVectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.GeometricVectors___setitem__(self, *args)

    def pop(self):
        return _mscl.GeometricVectors_pop(self)

    def append(self, x):
        return _mscl.GeometricVectors_append(self, x)

    def empty(self):
        return _mscl.GeometricVectors_empty(self)

    def size(self):
        return _mscl.GeometricVectors_size(self)

    def swap(self, v):
        return _mscl.GeometricVectors_swap(self, v)

    def begin(self):
        return _mscl.GeometricVectors_begin(self)

    def end(self):
        return _mscl.GeometricVectors_end(self)

    def rbegin(self):
        return _mscl.GeometricVectors_rbegin(self)

    def rend(self):
        return _mscl.GeometricVectors_rend(self)

    def clear(self):
        return _mscl.GeometricVectors_clear(self)

    def get_allocator(self):
        return _mscl.GeometricVectors_get_allocator(self)

    def pop_back(self):
        return _mscl.GeometricVectors_pop_back(self)

    def erase(self, *args):
        return _mscl.GeometricVectors_erase(self, *args)

    def __init__(self, *args):
        _mscl.GeometricVectors_swiginit(self, _mscl.new_GeometricVectors(*args))

    def push_back(self, x):
        return _mscl.GeometricVectors_push_back(self, x)

    def front(self):
        return _mscl.GeometricVectors_front(self)

    def back(self):
        return _mscl.GeometricVectors_back(self)

    def assign(self, n, x):
        return _mscl.GeometricVectors_assign(self, n, x)

    def resize(self, *args):
        return _mscl.GeometricVectors_resize(self, *args)

    def insert(self, *args):
        return _mscl.GeometricVectors_insert(self, *args)

    def reserve(self, n):
        return _mscl.GeometricVectors_reserve(self, n)

    def capacity(self):
        return _mscl.GeometricVectors_capacity(self)
    __swig_destroy__ = _mscl.delete_GeometricVectors

# Register GeometricVectors in _mscl:
_mscl.GeometricVectors_swigregister(GeometricVectors)

class Matrix_3x3s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.Matrix_3x3s_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.Matrix_3x3s___nonzero__(self)

    def __bool__(self):
        return _mscl.Matrix_3x3s___bool__(self)

    def __len__(self):
        return _mscl.Matrix_3x3s___len__(self)

    def __getslice__(self, i, j):
        return _mscl.Matrix_3x3s___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.Matrix_3x3s___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.Matrix_3x3s___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.Matrix_3x3s___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.Matrix_3x3s___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.Matrix_3x3s___setitem__(self, *args)

    def pop(self):
        return _mscl.Matrix_3x3s_pop(self)

    def append(self, x):
        return _mscl.Matrix_3x3s_append(self, x)

    def empty(self):
        return _mscl.Matrix_3x3s_empty(self)

    def size(self):
        return _mscl.Matrix_3x3s_size(self)

    def swap(self, v):
        return _mscl.Matrix_3x3s_swap(self, v)

    def begin(self):
        return _mscl.Matrix_3x3s_begin(self)

    def end(self):
        return _mscl.Matrix_3x3s_end(self)

    def rbegin(self):
        return _mscl.Matrix_3x3s_rbegin(self)

    def rend(self):
        return _mscl.Matrix_3x3s_rend(self)

    def clear(self):
        return _mscl.Matrix_3x3s_clear(self)

    def get_allocator(self):
        return _mscl.Matrix_3x3s_get_allocator(self)

    def pop_back(self):
        return _mscl.Matrix_3x3s_pop_back(self)

    def erase(self, *args):
        return _mscl.Matrix_3x3s_erase(self, *args)

    def __init__(self, *args):
        _mscl.Matrix_3x3s_swiginit(self, _mscl.new_Matrix_3x3s(*args))

    def push_back(self, x):
        return _mscl.Matrix_3x3s_push_back(self, x)

    def front(self):
        return _mscl.Matrix_3x3s_front(self)

    def back(self):
        return _mscl.Matrix_3x3s_back(self)

    def assign(self, n, x):
        return _mscl.Matrix_3x3s_assign(self, n, x)

    def resize(self, *args):
        return _mscl.Matrix_3x3s_resize(self, *args)

    def insert(self, *args):
        return _mscl.Matrix_3x3s_insert(self, *args)

    def reserve(self, n):
        return _mscl.Matrix_3x3s_reserve(self, n)

    def capacity(self):
        return _mscl.Matrix_3x3s_capacity(self)
    __swig_destroy__ = _mscl.delete_Matrix_3x3s

# Register Matrix_3x3s in _mscl:
_mscl.Matrix_3x3s_swigregister(Matrix_3x3s)

class StatusSelectors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.StatusSelectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.StatusSelectors___nonzero__(self)

    def __bool__(self):
        return _mscl.StatusSelectors___bool__(self)

    def __len__(self):
        return _mscl.StatusSelectors___len__(self)

    def __getslice__(self, i, j):
        return _mscl.StatusSelectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.StatusSelectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.StatusSelectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.StatusSelectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.StatusSelectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.StatusSelectors___setitem__(self, *args)

    def pop(self):
        return _mscl.StatusSelectors_pop(self)

    def append(self, x):
        return _mscl.StatusSelectors_append(self, x)

    def empty(self):
        return _mscl.StatusSelectors_empty(self)

    def size(self):
        return _mscl.StatusSelectors_size(self)

    def swap(self, v):
        return _mscl.StatusSelectors_swap(self, v)

    def begin(self):
        return _mscl.StatusSelectors_begin(self)

    def end(self):
        return _mscl.StatusSelectors_end(self)

    def rbegin(self):
        return _mscl.StatusSelectors_rbegin(self)

    def rend(self):
        return _mscl.StatusSelectors_rend(self)

    def clear(self):
        return _mscl.StatusSelectors_clear(self)

    def get_allocator(self):
        return _mscl.StatusSelectors_get_allocator(self)

    def pop_back(self):
        return _mscl.StatusSelectors_pop_back(self)

    def erase(self, *args):
        return _mscl.StatusSelectors_erase(self, *args)

    def __init__(self, *args):
        _mscl.StatusSelectors_swiginit(self, _mscl.new_StatusSelectors(*args))

    def push_back(self, x):
        return _mscl.StatusSelectors_push_back(self, x)

    def front(self):
        return _mscl.StatusSelectors_front(self)

    def back(self):
        return _mscl.StatusSelectors_back(self)

    def assign(self, n, x):
        return _mscl.StatusSelectors_assign(self, n, x)

    def resize(self, *args):
        return _mscl.StatusSelectors_resize(self, *args)

    def insert(self, *args):
        return _mscl.StatusSelectors_insert(self, *args)

    def reserve(self, n):
        return _mscl.StatusSelectors_reserve(self, n)

    def capacity(self):
        return _mscl.StatusSelectors_capacity(self)
    __swig_destroy__ = _mscl.delete_StatusSelectors

# Register StatusSelectors in _mscl:
_mscl.StatusSelectors_swigregister(StatusSelectors)

class VehicleModeTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.VehicleModeTypes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.VehicleModeTypes___nonzero__(self)

    def __bool__(self):
        return _mscl.VehicleModeTypes___bool__(self)

    def __len__(self):
        return _mscl.VehicleModeTypes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.VehicleModeTypes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.VehicleModeTypes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.VehicleModeTypes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.VehicleModeTypes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.VehicleModeTypes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.VehicleModeTypes___setitem__(self, *args)

    def pop(self):
        return _mscl.VehicleModeTypes_pop(self)

    def append(self, x):
        return _mscl.VehicleModeTypes_append(self, x)

    def empty(self):
        return _mscl.VehicleModeTypes_empty(self)

    def size(self):
        return _mscl.VehicleModeTypes_size(self)

    def swap(self, v):
        return _mscl.VehicleModeTypes_swap(self, v)

    def begin(self):
        return _mscl.VehicleModeTypes_begin(self)

    def end(self):
        return _mscl.VehicleModeTypes_end(self)

    def rbegin(self):
        return _mscl.VehicleModeTypes_rbegin(self)

    def rend(self):
        return _mscl.VehicleModeTypes_rend(self)

    def clear(self):
        return _mscl.VehicleModeTypes_clear(self)

    def get_allocator(self):
        return _mscl.VehicleModeTypes_get_allocator(self)

    def pop_back(self):
        return _mscl.VehicleModeTypes_pop_back(self)

    def erase(self, *args):
        return _mscl.VehicleModeTypes_erase(self, *args)

    def __init__(self, *args):
        _mscl.VehicleModeTypes_swiginit(self, _mscl.new_VehicleModeTypes(*args))

    def push_back(self, x):
        return _mscl.VehicleModeTypes_push_back(self, x)

    def front(self):
        return _mscl.VehicleModeTypes_front(self)

    def back(self):
        return _mscl.VehicleModeTypes_back(self)

    def assign(self, n, x):
        return _mscl.VehicleModeTypes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.VehicleModeTypes_resize(self, *args)

    def insert(self, *args):
        return _mscl.VehicleModeTypes_insert(self, *args)

    def reserve(self, n):
        return _mscl.VehicleModeTypes_reserve(self, n)

    def capacity(self):
        return _mscl.VehicleModeTypes_capacity(self)
    __swig_destroy__ = _mscl.delete_VehicleModeTypes

# Register VehicleModeTypes in _mscl:
_mscl.VehicleModeTypes_swigregister(VehicleModeTypes)

class AdaptiveFilterLevels(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.AdaptiveFilterLevels_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.AdaptiveFilterLevels___nonzero__(self)

    def __bool__(self):
        return _mscl.AdaptiveFilterLevels___bool__(self)

    def __len__(self):
        return _mscl.AdaptiveFilterLevels___len__(self)

    def __getslice__(self, i, j):
        return _mscl.AdaptiveFilterLevels___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.AdaptiveFilterLevels___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.AdaptiveFilterLevels___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.AdaptiveFilterLevels___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.AdaptiveFilterLevels___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.AdaptiveFilterLevels___setitem__(self, *args)

    def pop(self):
        return _mscl.AdaptiveFilterLevels_pop(self)

    def append(self, x):
        return _mscl.AdaptiveFilterLevels_append(self, x)

    def empty(self):
        return _mscl.AdaptiveFilterLevels_empty(self)

    def size(self):
        return _mscl.AdaptiveFilterLevels_size(self)

    def swap(self, v):
        return _mscl.AdaptiveFilterLevels_swap(self, v)

    def begin(self):
        return _mscl.AdaptiveFilterLevels_begin(self)

    def end(self):
        return _mscl.AdaptiveFilterLevels_end(self)

    def rbegin(self):
        return _mscl.AdaptiveFilterLevels_rbegin(self)

    def rend(self):
        return _mscl.AdaptiveFilterLevels_rend(self)

    def clear(self):
        return _mscl.AdaptiveFilterLevels_clear(self)

    def get_allocator(self):
        return _mscl.AdaptiveFilterLevels_get_allocator(self)

    def pop_back(self):
        return _mscl.AdaptiveFilterLevels_pop_back(self)

    def erase(self, *args):
        return _mscl.AdaptiveFilterLevels_erase(self, *args)

    def __init__(self, *args):
        _mscl.AdaptiveFilterLevels_swiginit(self, _mscl.new_AdaptiveFilterLevels(*args))

    def push_back(self, x):
        return _mscl.AdaptiveFilterLevels_push_back(self, x)

    def front(self):
        return _mscl.AdaptiveFilterLevels_front(self)

    def back(self):
        return _mscl.AdaptiveFilterLevels_back(self)

    def assign(self, n, x):
        return _mscl.AdaptiveFilterLevels_assign(self, n, x)

    def resize(self, *args):
        return _mscl.AdaptiveFilterLevels_resize(self, *args)

    def insert(self, *args):
        return _mscl.AdaptiveFilterLevels_insert(self, *args)

    def reserve(self, n):
        return _mscl.AdaptiveFilterLevels_reserve(self, n)

    def capacity(self):
        return _mscl.AdaptiveFilterLevels_capacity(self)
    __swig_destroy__ = _mscl.delete_AdaptiveFilterLevels

# Register AdaptiveFilterLevels in _mscl:
_mscl.AdaptiveFilterLevels_swigregister(AdaptiveFilterLevels)

class LowPassFilterConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.LowPassFilterConfig_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.LowPassFilterConfig___nonzero__(self)

    def __bool__(self):
        return _mscl.LowPassFilterConfig___bool__(self)

    def __len__(self):
        return _mscl.LowPassFilterConfig___len__(self)

    def __getslice__(self, i, j):
        return _mscl.LowPassFilterConfig___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.LowPassFilterConfig___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.LowPassFilterConfig___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.LowPassFilterConfig___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.LowPassFilterConfig___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.LowPassFilterConfig___setitem__(self, *args)

    def pop(self):
        return _mscl.LowPassFilterConfig_pop(self)

    def append(self, x):
        return _mscl.LowPassFilterConfig_append(self, x)

    def empty(self):
        return _mscl.LowPassFilterConfig_empty(self)

    def size(self):
        return _mscl.LowPassFilterConfig_size(self)

    def swap(self, v):
        return _mscl.LowPassFilterConfig_swap(self, v)

    def begin(self):
        return _mscl.LowPassFilterConfig_begin(self)

    def end(self):
        return _mscl.LowPassFilterConfig_end(self)

    def rbegin(self):
        return _mscl.LowPassFilterConfig_rbegin(self)

    def rend(self):
        return _mscl.LowPassFilterConfig_rend(self)

    def clear(self):
        return _mscl.LowPassFilterConfig_clear(self)

    def get_allocator(self):
        return _mscl.LowPassFilterConfig_get_allocator(self)

    def pop_back(self):
        return _mscl.LowPassFilterConfig_pop_back(self)

    def erase(self, *args):
        return _mscl.LowPassFilterConfig_erase(self, *args)

    def __init__(self, *args):
        _mscl.LowPassFilterConfig_swiginit(self, _mscl.new_LowPassFilterConfig(*args))

    def push_back(self, x):
        return _mscl.LowPassFilterConfig_push_back(self, x)

    def front(self):
        return _mscl.LowPassFilterConfig_front(self)

    def back(self):
        return _mscl.LowPassFilterConfig_back(self)

    def assign(self, n, x):
        return _mscl.LowPassFilterConfig_assign(self, n, x)

    def resize(self, *args):
        return _mscl.LowPassFilterConfig_resize(self, *args)

    def insert(self, *args):
        return _mscl.LowPassFilterConfig_insert(self, *args)

    def reserve(self, n):
        return _mscl.LowPassFilterConfig_reserve(self, n)

    def capacity(self):
        return _mscl.LowPassFilterConfig_capacity(self)
    __swig_destroy__ = _mscl.delete_LowPassFilterConfig

# Register LowPassFilterConfig in _mscl:
_mscl.LowPassFilterConfig_swigregister(LowPassFilterConfig)

class AidingMeasurementSourceOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.AidingMeasurementSourceOptions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.AidingMeasurementSourceOptions___nonzero__(self)

    def __bool__(self):
        return _mscl.AidingMeasurementSourceOptions___bool__(self)

    def __len__(self):
        return _mscl.AidingMeasurementSourceOptions___len__(self)

    def __getslice__(self, i, j):
        return _mscl.AidingMeasurementSourceOptions___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.AidingMeasurementSourceOptions___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.AidingMeasurementSourceOptions___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.AidingMeasurementSourceOptions___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.AidingMeasurementSourceOptions___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.AidingMeasurementSourceOptions___setitem__(self, *args)

    def pop(self):
        return _mscl.AidingMeasurementSourceOptions_pop(self)

    def append(self, x):
        return _mscl.AidingMeasurementSourceOptions_append(self, x)

    def empty(self):
        return _mscl.AidingMeasurementSourceOptions_empty(self)

    def size(self):
        return _mscl.AidingMeasurementSourceOptions_size(self)

    def swap(self, v):
        return _mscl.AidingMeasurementSourceOptions_swap(self, v)

    def begin(self):
        return _mscl.AidingMeasurementSourceOptions_begin(self)

    def end(self):
        return _mscl.AidingMeasurementSourceOptions_end(self)

    def rbegin(self):
        return _mscl.AidingMeasurementSourceOptions_rbegin(self)

    def rend(self):
        return _mscl.AidingMeasurementSourceOptions_rend(self)

    def clear(self):
        return _mscl.AidingMeasurementSourceOptions_clear(self)

    def get_allocator(self):
        return _mscl.AidingMeasurementSourceOptions_get_allocator(self)

    def pop_back(self):
        return _mscl.AidingMeasurementSourceOptions_pop_back(self)

    def erase(self, *args):
        return _mscl.AidingMeasurementSourceOptions_erase(self, *args)

    def __init__(self, *args):
        _mscl.AidingMeasurementSourceOptions_swiginit(self, _mscl.new_AidingMeasurementSourceOptions(*args))

    def push_back(self, x):
        return _mscl.AidingMeasurementSourceOptions_push_back(self, x)

    def front(self):
        return _mscl.AidingMeasurementSourceOptions_front(self)

    def back(self):
        return _mscl.AidingMeasurementSourceOptions_back(self)

    def assign(self, n, x):
        return _mscl.AidingMeasurementSourceOptions_assign(self, n, x)

    def resize(self, *args):
        return _mscl.AidingMeasurementSourceOptions_resize(self, *args)

    def insert(self, *args):
        return _mscl.AidingMeasurementSourceOptions_insert(self, *args)

    def reserve(self, n):
        return _mscl.AidingMeasurementSourceOptions_reserve(self, n)

    def capacity(self):
        return _mscl.AidingMeasurementSourceOptions_capacity(self)
    __swig_destroy__ = _mscl.delete_AidingMeasurementSourceOptions

# Register AidingMeasurementSourceOptions in _mscl:
_mscl.AidingMeasurementSourceOptions_swigregister(AidingMeasurementSourceOptions)

class PpsSourceOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.PpsSourceOptions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.PpsSourceOptions___nonzero__(self)

    def __bool__(self):
        return _mscl.PpsSourceOptions___bool__(self)

    def __len__(self):
        return _mscl.PpsSourceOptions___len__(self)

    def __getslice__(self, i, j):
        return _mscl.PpsSourceOptions___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.PpsSourceOptions___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.PpsSourceOptions___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.PpsSourceOptions___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.PpsSourceOptions___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.PpsSourceOptions___setitem__(self, *args)

    def pop(self):
        return _mscl.PpsSourceOptions_pop(self)

    def append(self, x):
        return _mscl.PpsSourceOptions_append(self, x)

    def empty(self):
        return _mscl.PpsSourceOptions_empty(self)

    def size(self):
        return _mscl.PpsSourceOptions_size(self)

    def swap(self, v):
        return _mscl.PpsSourceOptions_swap(self, v)

    def begin(self):
        return _mscl.PpsSourceOptions_begin(self)

    def end(self):
        return _mscl.PpsSourceOptions_end(self)

    def rbegin(self):
        return _mscl.PpsSourceOptions_rbegin(self)

    def rend(self):
        return _mscl.PpsSourceOptions_rend(self)

    def clear(self):
        return _mscl.PpsSourceOptions_clear(self)

    def get_allocator(self):
        return _mscl.PpsSourceOptions_get_allocator(self)

    def pop_back(self):
        return _mscl.PpsSourceOptions_pop_back(self)

    def erase(self, *args):
        return _mscl.PpsSourceOptions_erase(self, *args)

    def __init__(self, *args):
        _mscl.PpsSourceOptions_swiginit(self, _mscl.new_PpsSourceOptions(*args))

    def push_back(self, x):
        return _mscl.PpsSourceOptions_push_back(self, x)

    def front(self):
        return _mscl.PpsSourceOptions_front(self)

    def back(self):
        return _mscl.PpsSourceOptions_back(self)

    def assign(self, n, x):
        return _mscl.PpsSourceOptions_assign(self, n, x)

    def resize(self, *args):
        return _mscl.PpsSourceOptions_resize(self, *args)

    def insert(self, *args):
        return _mscl.PpsSourceOptions_insert(self, *args)

    def reserve(self, n):
        return _mscl.PpsSourceOptions_reserve(self, n)

    def capacity(self):
        return _mscl.PpsSourceOptions_capacity(self)
    __swig_destroy__ = _mscl.delete_PpsSourceOptions

# Register PpsSourceOptions in _mscl:
_mscl.PpsSourceOptions_swigregister(PpsSourceOptions)

class GeographicSources(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.GeographicSources_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.GeographicSources___nonzero__(self)

    def __bool__(self):
        return _mscl.GeographicSources___bool__(self)

    def __len__(self):
        return _mscl.GeographicSources___len__(self)

    def __getslice__(self, i, j):
        return _mscl.GeographicSources___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.GeographicSources___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.GeographicSources___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.GeographicSources___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.GeographicSources___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.GeographicSources___setitem__(self, *args)

    def pop(self):
        return _mscl.GeographicSources_pop(self)

    def append(self, x):
        return _mscl.GeographicSources_append(self, x)

    def empty(self):
        return _mscl.GeographicSources_empty(self)

    def size(self):
        return _mscl.GeographicSources_size(self)

    def swap(self, v):
        return _mscl.GeographicSources_swap(self, v)

    def begin(self):
        return _mscl.GeographicSources_begin(self)

    def end(self):
        return _mscl.GeographicSources_end(self)

    def rbegin(self):
        return _mscl.GeographicSources_rbegin(self)

    def rend(self):
        return _mscl.GeographicSources_rend(self)

    def clear(self):
        return _mscl.GeographicSources_clear(self)

    def get_allocator(self):
        return _mscl.GeographicSources_get_allocator(self)

    def pop_back(self):
        return _mscl.GeographicSources_pop_back(self)

    def erase(self, *args):
        return _mscl.GeographicSources_erase(self, *args)

    def __init__(self, *args):
        _mscl.GeographicSources_swiginit(self, _mscl.new_GeographicSources(*args))

    def push_back(self, x):
        return _mscl.GeographicSources_push_back(self, x)

    def front(self):
        return _mscl.GeographicSources_front(self)

    def back(self):
        return _mscl.GeographicSources_back(self)

    def assign(self, n, x):
        return _mscl.GeographicSources_assign(self, n, x)

    def resize(self, *args):
        return _mscl.GeographicSources_resize(self, *args)

    def insert(self, *args):
        return _mscl.GeographicSources_insert(self, *args)

    def reserve(self, n):
        return _mscl.GeographicSources_reserve(self, n)

    def capacity(self):
        return _mscl.GeographicSources_capacity(self)
    __swig_destroy__ = _mscl.delete_GeographicSources

# Register GeographicSources in _mscl:
_mscl.GeographicSources_swigregister(GeographicSources)

class GnssSources(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.GnssSources_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.GnssSources___nonzero__(self)

    def __bool__(self):
        return _mscl.GnssSources___bool__(self)

    def __len__(self):
        return _mscl.GnssSources___len__(self)

    def __getslice__(self, i, j):
        return _mscl.GnssSources___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.GnssSources___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.GnssSources___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.GnssSources___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.GnssSources___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.GnssSources___setitem__(self, *args)

    def pop(self):
        return _mscl.GnssSources_pop(self)

    def append(self, x):
        return _mscl.GnssSources_append(self, x)

    def empty(self):
        return _mscl.GnssSources_empty(self)

    def size(self):
        return _mscl.GnssSources_size(self)

    def swap(self, v):
        return _mscl.GnssSources_swap(self, v)

    def begin(self):
        return _mscl.GnssSources_begin(self)

    def end(self):
        return _mscl.GnssSources_end(self)

    def rbegin(self):
        return _mscl.GnssSources_rbegin(self)

    def rend(self):
        return _mscl.GnssSources_rend(self)

    def clear(self):
        return _mscl.GnssSources_clear(self)

    def get_allocator(self):
        return _mscl.GnssSources_get_allocator(self)

    def pop_back(self):
        return _mscl.GnssSources_pop_back(self)

    def erase(self, *args):
        return _mscl.GnssSources_erase(self, *args)

    def __init__(self, *args):
        _mscl.GnssSources_swiginit(self, _mscl.new_GnssSources(*args))

    def push_back(self, x):
        return _mscl.GnssSources_push_back(self, x)

    def front(self):
        return _mscl.GnssSources_front(self)

    def back(self):
        return _mscl.GnssSources_back(self)

    def assign(self, n, x):
        return _mscl.GnssSources_assign(self, n, x)

    def resize(self, *args):
        return _mscl.GnssSources_resize(self, *args)

    def insert(self, *args):
        return _mscl.GnssSources_insert(self, *args)

    def reserve(self, n):
        return _mscl.GnssSources_reserve(self, n)

    def capacity(self):
        return _mscl.GnssSources_capacity(self)
    __swig_destroy__ = _mscl.delete_GnssSources

# Register GnssSources in _mscl:
_mscl.GnssSources_swigregister(GnssSources)

class GnssSignalConfigOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.GnssSignalConfigOptions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.GnssSignalConfigOptions___nonzero__(self)

    def __bool__(self):
        return _mscl.GnssSignalConfigOptions___bool__(self)

    def __len__(self):
        return _mscl.GnssSignalConfigOptions___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.GnssSignalConfigOptions___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.GnssSignalConfigOptions___delitem__(self, key)

    def has_key(self, key):
        return _mscl.GnssSignalConfigOptions_has_key(self, key)

    def keys(self):
        return _mscl.GnssSignalConfigOptions_keys(self)

    def values(self):
        return _mscl.GnssSignalConfigOptions_values(self)

    def items(self):
        return _mscl.GnssSignalConfigOptions_items(self)

    def __contains__(self, key):
        return _mscl.GnssSignalConfigOptions___contains__(self, key)

    def key_iterator(self):
        return _mscl.GnssSignalConfigOptions_key_iterator(self)

    def value_iterator(self):
        return _mscl.GnssSignalConfigOptions_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.GnssSignalConfigOptions___setitem__(self, *args)

    def asdict(self):
        return _mscl.GnssSignalConfigOptions_asdict(self)

    def __init__(self, *args):
        _mscl.GnssSignalConfigOptions_swiginit(self, _mscl.new_GnssSignalConfigOptions(*args))

    def empty(self):
        return _mscl.GnssSignalConfigOptions_empty(self)

    def size(self):
        return _mscl.GnssSignalConfigOptions_size(self)

    def swap(self, v):
        return _mscl.GnssSignalConfigOptions_swap(self, v)

    def begin(self):
        return _mscl.GnssSignalConfigOptions_begin(self)

    def end(self):
        return _mscl.GnssSignalConfigOptions_end(self)

    def rbegin(self):
        return _mscl.GnssSignalConfigOptions_rbegin(self)

    def rend(self):
        return _mscl.GnssSignalConfigOptions_rend(self)

    def clear(self):
        return _mscl.GnssSignalConfigOptions_clear(self)

    def get_allocator(self):
        return _mscl.GnssSignalConfigOptions_get_allocator(self)

    def count(self, x):
        return _mscl.GnssSignalConfigOptions_count(self, x)

    def erase(self, *args):
        return _mscl.GnssSignalConfigOptions_erase(self, *args)

    def find(self, x):
        return _mscl.GnssSignalConfigOptions_find(self, x)

    def lower_bound(self, x):
        return _mscl.GnssSignalConfigOptions_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.GnssSignalConfigOptions_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_GnssSignalConfigOptions

# Register GnssSignalConfigOptions in _mscl:
_mscl.GnssSignalConfigOptions_swigregister(GnssSignalConfigOptions)

class NmeaMessageFormats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.NmeaMessageFormats_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.NmeaMessageFormats___nonzero__(self)

    def __bool__(self):
        return _mscl.NmeaMessageFormats___bool__(self)

    def __len__(self):
        return _mscl.NmeaMessageFormats___len__(self)

    def __getslice__(self, i, j):
        return _mscl.NmeaMessageFormats___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.NmeaMessageFormats___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.NmeaMessageFormats___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.NmeaMessageFormats___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.NmeaMessageFormats___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.NmeaMessageFormats___setitem__(self, *args)

    def pop(self):
        return _mscl.NmeaMessageFormats_pop(self)

    def append(self, x):
        return _mscl.NmeaMessageFormats_append(self, x)

    def empty(self):
        return _mscl.NmeaMessageFormats_empty(self)

    def size(self):
        return _mscl.NmeaMessageFormats_size(self)

    def swap(self, v):
        return _mscl.NmeaMessageFormats_swap(self, v)

    def begin(self):
        return _mscl.NmeaMessageFormats_begin(self)

    def end(self):
        return _mscl.NmeaMessageFormats_end(self)

    def rbegin(self):
        return _mscl.NmeaMessageFormats_rbegin(self)

    def rend(self):
        return _mscl.NmeaMessageFormats_rend(self)

    def clear(self):
        return _mscl.NmeaMessageFormats_clear(self)

    def get_allocator(self):
        return _mscl.NmeaMessageFormats_get_allocator(self)

    def pop_back(self):
        return _mscl.NmeaMessageFormats_pop_back(self)

    def erase(self, *args):
        return _mscl.NmeaMessageFormats_erase(self, *args)

    def __init__(self, *args):
        _mscl.NmeaMessageFormats_swiginit(self, _mscl.new_NmeaMessageFormats(*args))

    def push_back(self, x):
        return _mscl.NmeaMessageFormats_push_back(self, x)

    def front(self):
        return _mscl.NmeaMessageFormats_front(self)

    def back(self):
        return _mscl.NmeaMessageFormats_back(self)

    def assign(self, n, x):
        return _mscl.NmeaMessageFormats_assign(self, n, x)

    def resize(self, *args):
        return _mscl.NmeaMessageFormats_resize(self, *args)

    def insert(self, *args):
        return _mscl.NmeaMessageFormats_insert(self, *args)

    def reserve(self, n):
        return _mscl.NmeaMessageFormats_reserve(self, n)

    def capacity(self):
        return _mscl.NmeaMessageFormats_capacity(self)
    __swig_destroy__ = _mscl.delete_NmeaMessageFormats

# Register NmeaMessageFormats in _mscl:
_mscl.NmeaMessageFormats_swigregister(NmeaMessageFormats)

class GpioPinModeOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.GpioPinModeOptions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.GpioPinModeOptions___nonzero__(self)

    def __bool__(self):
        return _mscl.GpioPinModeOptions___bool__(self)

    def __len__(self):
        return _mscl.GpioPinModeOptions___len__(self)

    def __getslice__(self, i, j):
        return _mscl.GpioPinModeOptions___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.GpioPinModeOptions___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.GpioPinModeOptions___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.GpioPinModeOptions___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.GpioPinModeOptions___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.GpioPinModeOptions___setitem__(self, *args)

    def pop(self):
        return _mscl.GpioPinModeOptions_pop(self)

    def append(self, x):
        return _mscl.GpioPinModeOptions_append(self, x)

    def empty(self):
        return _mscl.GpioPinModeOptions_empty(self)

    def size(self):
        return _mscl.GpioPinModeOptions_size(self)

    def swap(self, v):
        return _mscl.GpioPinModeOptions_swap(self, v)

    def begin(self):
        return _mscl.GpioPinModeOptions_begin(self)

    def end(self):
        return _mscl.GpioPinModeOptions_end(self)

    def rbegin(self):
        return _mscl.GpioPinModeOptions_rbegin(self)

    def rend(self):
        return _mscl.GpioPinModeOptions_rend(self)

    def clear(self):
        return _mscl.GpioPinModeOptions_clear(self)

    def get_allocator(self):
        return _mscl.GpioPinModeOptions_get_allocator(self)

    def pop_back(self):
        return _mscl.GpioPinModeOptions_pop_back(self)

    def erase(self, *args):
        return _mscl.GpioPinModeOptions_erase(self, *args)

    def __init__(self, *args):
        _mscl.GpioPinModeOptions_swiginit(self, _mscl.new_GpioPinModeOptions(*args))

    def push_back(self, x):
        return _mscl.GpioPinModeOptions_push_back(self, x)

    def front(self):
        return _mscl.GpioPinModeOptions_front(self)

    def back(self):
        return _mscl.GpioPinModeOptions_back(self)

    def assign(self, n, x):
        return _mscl.GpioPinModeOptions_assign(self, n, x)

    def resize(self, *args):
        return _mscl.GpioPinModeOptions_resize(self, *args)

    def insert(self, *args):
        return _mscl.GpioPinModeOptions_insert(self, *args)

    def reserve(self, n):
        return _mscl.GpioPinModeOptions_reserve(self, n)

    def capacity(self):
        return _mscl.GpioPinModeOptions_capacity(self)
    __swig_destroy__ = _mscl.delete_GpioPinModeOptions

# Register GpioPinModeOptions in _mscl:
_mscl.GpioPinModeOptions_swigregister(GpioPinModeOptions)

class GpioBehaviorModes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.GpioBehaviorModes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.GpioBehaviorModes___nonzero__(self)

    def __bool__(self):
        return _mscl.GpioBehaviorModes___bool__(self)

    def __len__(self):
        return _mscl.GpioBehaviorModes___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.GpioBehaviorModes___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.GpioBehaviorModes___delitem__(self, key)

    def has_key(self, key):
        return _mscl.GpioBehaviorModes_has_key(self, key)

    def keys(self):
        return _mscl.GpioBehaviorModes_keys(self)

    def values(self):
        return _mscl.GpioBehaviorModes_values(self)

    def items(self):
        return _mscl.GpioBehaviorModes_items(self)

    def __contains__(self, key):
        return _mscl.GpioBehaviorModes___contains__(self, key)

    def key_iterator(self):
        return _mscl.GpioBehaviorModes_key_iterator(self)

    def value_iterator(self):
        return _mscl.GpioBehaviorModes_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.GpioBehaviorModes___setitem__(self, *args)

    def asdict(self):
        return _mscl.GpioBehaviorModes_asdict(self)

    def __init__(self, *args):
        _mscl.GpioBehaviorModes_swiginit(self, _mscl.new_GpioBehaviorModes(*args))

    def empty(self):
        return _mscl.GpioBehaviorModes_empty(self)

    def size(self):
        return _mscl.GpioBehaviorModes_size(self)

    def swap(self, v):
        return _mscl.GpioBehaviorModes_swap(self, v)

    def begin(self):
        return _mscl.GpioBehaviorModes_begin(self)

    def end(self):
        return _mscl.GpioBehaviorModes_end(self)

    def rbegin(self):
        return _mscl.GpioBehaviorModes_rbegin(self)

    def rend(self):
        return _mscl.GpioBehaviorModes_rend(self)

    def clear(self):
        return _mscl.GpioBehaviorModes_clear(self)

    def get_allocator(self):
        return _mscl.GpioBehaviorModes_get_allocator(self)

    def count(self, x):
        return _mscl.GpioBehaviorModes_count(self, x)

    def erase(self, *args):
        return _mscl.GpioBehaviorModes_erase(self, *args)

    def find(self, x):
        return _mscl.GpioBehaviorModes_find(self, x)

    def lower_bound(self, x):
        return _mscl.GpioBehaviorModes_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.GpioBehaviorModes_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_GpioBehaviorModes

# Register GpioBehaviorModes in _mscl:
_mscl.GpioBehaviorModes_swigregister(GpioBehaviorModes)

class GpioFeatureBehaviors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.GpioFeatureBehaviors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.GpioFeatureBehaviors___nonzero__(self)

    def __bool__(self):
        return _mscl.GpioFeatureBehaviors___bool__(self)

    def __len__(self):
        return _mscl.GpioFeatureBehaviors___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.GpioFeatureBehaviors___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.GpioFeatureBehaviors___delitem__(self, key)

    def has_key(self, key):
        return _mscl.GpioFeatureBehaviors_has_key(self, key)

    def keys(self):
        return _mscl.GpioFeatureBehaviors_keys(self)

    def values(self):
        return _mscl.GpioFeatureBehaviors_values(self)

    def items(self):
        return _mscl.GpioFeatureBehaviors_items(self)

    def __contains__(self, key):
        return _mscl.GpioFeatureBehaviors___contains__(self, key)

    def key_iterator(self):
        return _mscl.GpioFeatureBehaviors_key_iterator(self)

    def value_iterator(self):
        return _mscl.GpioFeatureBehaviors_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.GpioFeatureBehaviors___setitem__(self, *args)

    def asdict(self):
        return _mscl.GpioFeatureBehaviors_asdict(self)

    def __init__(self, *args):
        _mscl.GpioFeatureBehaviors_swiginit(self, _mscl.new_GpioFeatureBehaviors(*args))

    def empty(self):
        return _mscl.GpioFeatureBehaviors_empty(self)

    def size(self):
        return _mscl.GpioFeatureBehaviors_size(self)

    def swap(self, v):
        return _mscl.GpioFeatureBehaviors_swap(self, v)

    def begin(self):
        return _mscl.GpioFeatureBehaviors_begin(self)

    def end(self):
        return _mscl.GpioFeatureBehaviors_end(self)

    def rbegin(self):
        return _mscl.GpioFeatureBehaviors_rbegin(self)

    def rend(self):
        return _mscl.GpioFeatureBehaviors_rend(self)

    def clear(self):
        return _mscl.GpioFeatureBehaviors_clear(self)

    def get_allocator(self):
        return _mscl.GpioFeatureBehaviors_get_allocator(self)

    def count(self, x):
        return _mscl.GpioFeatureBehaviors_count(self, x)

    def erase(self, *args):
        return _mscl.GpioFeatureBehaviors_erase(self, *args)

    def find(self, x):
        return _mscl.GpioFeatureBehaviors_find(self, x)

    def lower_bound(self, x):
        return _mscl.GpioFeatureBehaviors_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.GpioFeatureBehaviors_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_GpioFeatureBehaviors

# Register GpioFeatureBehaviors in _mscl:
_mscl.GpioFeatureBehaviors_swigregister(GpioFeatureBehaviors)

class GpioPinOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.GpioPinOptions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.GpioPinOptions___nonzero__(self)

    def __bool__(self):
        return _mscl.GpioPinOptions___bool__(self)

    def __len__(self):
        return _mscl.GpioPinOptions___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _mscl.GpioPinOptions___getitem__(self, key)

    def __delitem__(self, key):
        return _mscl.GpioPinOptions___delitem__(self, key)

    def has_key(self, key):
        return _mscl.GpioPinOptions_has_key(self, key)

    def keys(self):
        return _mscl.GpioPinOptions_keys(self)

    def values(self):
        return _mscl.GpioPinOptions_values(self)

    def items(self):
        return _mscl.GpioPinOptions_items(self)

    def __contains__(self, key):
        return _mscl.GpioPinOptions___contains__(self, key)

    def key_iterator(self):
        return _mscl.GpioPinOptions_key_iterator(self)

    def value_iterator(self):
        return _mscl.GpioPinOptions_value_iterator(self)

    def __setitem__(self, *args):
        return _mscl.GpioPinOptions___setitem__(self, *args)

    def asdict(self):
        return _mscl.GpioPinOptions_asdict(self)

    def __init__(self, *args):
        _mscl.GpioPinOptions_swiginit(self, _mscl.new_GpioPinOptions(*args))

    def empty(self):
        return _mscl.GpioPinOptions_empty(self)

    def size(self):
        return _mscl.GpioPinOptions_size(self)

    def swap(self, v):
        return _mscl.GpioPinOptions_swap(self, v)

    def begin(self):
        return _mscl.GpioPinOptions_begin(self)

    def end(self):
        return _mscl.GpioPinOptions_end(self)

    def rbegin(self):
        return _mscl.GpioPinOptions_rbegin(self)

    def rend(self):
        return _mscl.GpioPinOptions_rend(self)

    def clear(self):
        return _mscl.GpioPinOptions_clear(self)

    def get_allocator(self):
        return _mscl.GpioPinOptions_get_allocator(self)

    def count(self, x):
        return _mscl.GpioPinOptions_count(self, x)

    def erase(self, *args):
        return _mscl.GpioPinOptions_erase(self, *args)

    def find(self, x):
        return _mscl.GpioPinOptions_find(self, x)

    def lower_bound(self, x):
        return _mscl.GpioPinOptions_lower_bound(self, x)

    def upper_bound(self, x):
        return _mscl.GpioPinOptions_upper_bound(self, x)
    __swig_destroy__ = _mscl.delete_GpioPinOptions

# Register GpioPinOptions in _mscl:
_mscl.GpioPinOptions_swigregister(GpioPinOptions)

class EventInputTriggers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.EventInputTriggers_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.EventInputTriggers___nonzero__(self)

    def __bool__(self):
        return _mscl.EventInputTriggers___bool__(self)

    def __len__(self):
        return _mscl.EventInputTriggers___len__(self)

    def __getslice__(self, i, j):
        return _mscl.EventInputTriggers___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.EventInputTriggers___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.EventInputTriggers___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.EventInputTriggers___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.EventInputTriggers___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.EventInputTriggers___setitem__(self, *args)

    def __init__(self, *args):
        _mscl.EventInputTriggers_swiginit(self, _mscl.new_EventInputTriggers(*args))

    def empty(self):
        return _mscl.EventInputTriggers_empty(self)

    def size(self):
        return _mscl.EventInputTriggers_size(self)

    def swap(self, v):
        return _mscl.EventInputTriggers_swap(self, v)

    def begin(self):
        return _mscl.EventInputTriggers_begin(self)

    def end(self):
        return _mscl.EventInputTriggers_end(self)

    def rbegin(self):
        return _mscl.EventInputTriggers_rbegin(self)

    def rend(self):
        return _mscl.EventInputTriggers_rend(self)

    def front(self):
        return _mscl.EventInputTriggers_front(self)

    def back(self):
        return _mscl.EventInputTriggers_back(self)

    def fill(self, u):
        return _mscl.EventInputTriggers_fill(self, u)
    __swig_destroy__ = _mscl.delete_EventInputTriggers

# Register EventInputTriggers in _mscl:
_mscl.EventInputTriggers_swigregister(EventInputTriggers)

class EventTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.EventTypes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.EventTypes___nonzero__(self)

    def __bool__(self):
        return _mscl.EventTypes___bool__(self)

    def __len__(self):
        return _mscl.EventTypes___len__(self)

    def __getslice__(self, i, j):
        return _mscl.EventTypes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.EventTypes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.EventTypes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.EventTypes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.EventTypes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.EventTypes___setitem__(self, *args)

    def pop(self):
        return _mscl.EventTypes_pop(self)

    def append(self, x):
        return _mscl.EventTypes_append(self, x)

    def empty(self):
        return _mscl.EventTypes_empty(self)

    def size(self):
        return _mscl.EventTypes_size(self)

    def swap(self, v):
        return _mscl.EventTypes_swap(self, v)

    def begin(self):
        return _mscl.EventTypes_begin(self)

    def end(self):
        return _mscl.EventTypes_end(self)

    def rbegin(self):
        return _mscl.EventTypes_rbegin(self)

    def rend(self):
        return _mscl.EventTypes_rend(self)

    def clear(self):
        return _mscl.EventTypes_clear(self)

    def get_allocator(self):
        return _mscl.EventTypes_get_allocator(self)

    def pop_back(self):
        return _mscl.EventTypes_pop_back(self)

    def erase(self, *args):
        return _mscl.EventTypes_erase(self, *args)

    def __init__(self, *args):
        _mscl.EventTypes_swiginit(self, _mscl.new_EventTypes(*args))

    def push_back(self, x):
        return _mscl.EventTypes_push_back(self, x)

    def front(self):
        return _mscl.EventTypes_front(self)

    def back(self):
        return _mscl.EventTypes_back(self)

    def assign(self, n, x):
        return _mscl.EventTypes_assign(self, n, x)

    def resize(self, *args):
        return _mscl.EventTypes_resize(self, *args)

    def insert(self, *args):
        return _mscl.EventTypes_insert(self, *args)

    def reserve(self, n):
        return _mscl.EventTypes_reserve(self, n)

    def capacity(self):
        return _mscl.EventTypes_capacity(self)
    __swig_destroy__ = _mscl.delete_EventTypes

# Register EventTypes in _mscl:
_mscl.EventTypes_swigregister(EventTypes)

class Bins(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _mscl.Bins_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mscl.Bins___nonzero__(self)

    def __bool__(self):
        return _mscl.Bins___bool__(self)

    def __len__(self):
        return _mscl.Bins___len__(self)

    def __getslice__(self, i, j):
        return _mscl.Bins___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mscl.Bins___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mscl.Bins___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mscl.Bins___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mscl.Bins___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mscl.Bins___setitem__(self, *args)

    def pop(self):
        return _mscl.Bins_pop(self)

    def append(self, x):
        return _mscl.Bins_append(self, x)

    def empty(self):
        return _mscl.Bins_empty(self)

    def size(self):
        return _mscl.Bins_size(self)

    def swap(self, v):
        return _mscl.Bins_swap(self, v)

    def begin(self):
        return _mscl.Bins_begin(self)

    def end(self):
        return _mscl.Bins_end(self)

    def rbegin(self):
        return _mscl.Bins_rbegin(self)

    def rend(self):
        return _mscl.Bins_rend(self)

    def clear(self):
        return _mscl.Bins_clear(self)

    def get_allocator(self):
        return _mscl.Bins_get_allocator(self)

    def pop_back(self):
        return _mscl.Bins_pop_back(self)

    def erase(self, *args):
        return _mscl.Bins_erase(self, *args)

    def __init__(self, *args):
        _mscl.Bins_swiginit(self, _mscl.new_Bins(*args))

    def push_back(self, x):
        return _mscl.Bins_push_back(self, x)

    def front(self):
        return _mscl.Bins_front(self)

    def back(self):
        return _mscl.Bins_back(self)

    def assign(self, n, x):
        return _mscl.Bins_assign(self, n, x)

    def insert(self, *args):
        return _mscl.Bins_insert(self, *args)

    def reserve(self, n):
        return _mscl.Bins_reserve(self, n)

    def capacity(self):
        return _mscl.Bins_capacity(self)
    __swig_destroy__ = _mscl.delete_Bins

# Register Bins in _mscl:
_mscl.Bins_swigregister(Bins)

class Error(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Error_swiginit(self, _mscl.new_Error(*args))
    __swig_destroy__ = _mscl.delete_Error

    def what(self):
        return _mscl.Error_what(self)

    def __str__(self):
        return _mscl.Error___str__(self)

# Register Error in _mscl:
_mscl.Error_swigregister(Error)

class Error_NotSupported(Error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Error_NotSupported_swiginit(self, _mscl.new_Error_NotSupported(*args))
    __swig_destroy__ = _mscl.delete_Error_NotSupported

# Register Error_NotSupported in _mscl:
_mscl.Error_NotSupported_swigregister(Error_NotSupported)

class Error_NoData(Error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Error_NoData_swiginit(self, _mscl.new_Error_NoData(*args))
    __swig_destroy__ = _mscl.delete_Error_NoData

# Register Error_NoData in _mscl:
_mscl.Error_NoData_swigregister(Error_NoData)

class Error_BadDataType(Error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _mscl.Error_BadDataType_swiginit(self, _mscl.new_Error_BadDataType())
    __swig_destroy__ = _mscl.delete_Error_BadDataType

# Register Error_BadDataType in _mscl:
_mscl.Error_BadDataType_swigregister(Error_BadDataType)

class Error_UnknownSampleRate(Error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Error_UnknownSampleRate_swiginit(self, _mscl.new_Error_UnknownSampleRate(*args))
    __swig_destroy__ = _mscl.delete_Error_UnknownSampleRate

# Register Error_UnknownSampleRate in _mscl:
_mscl.Error_UnknownSampleRate_swigregister(Error_UnknownSampleRate)

class Error_Communication(Error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Error_Communication_swiginit(self, _mscl.new_Error_Communication(*args))
    __swig_destroy__ = _mscl.delete_Error_Communication

# Register Error_Communication in _mscl:
_mscl.Error_Communication_swigregister(Error_Communication)

class Error_NodeCommunication(Error_Communication):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Error_NodeCommunication_swiginit(self, _mscl.new_Error_NodeCommunication(*args))

    def nodeAddress(self):
        return _mscl.Error_NodeCommunication_nodeAddress(self)
    __swig_destroy__ = _mscl.delete_Error_NodeCommunication

# Register Error_NodeCommunication in _mscl:
_mscl.Error_NodeCommunication_swigregister(Error_NodeCommunication)

class Error_Connection(Error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Error_Connection_swiginit(self, _mscl.new_Error_Connection(*args))
    __swig_destroy__ = _mscl.delete_Error_Connection

    def code(self):
        return _mscl.Error_Connection_code(self)

    def value(self):
        return _mscl.Error_Connection_value(self)

# Register Error_Connection in _mscl:
_mscl.Error_Connection_swigregister(Error_Connection)

class Error_InvalidSerialPort(Error_Connection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, code):
        _mscl.Error_InvalidSerialPort_swiginit(self, _mscl.new_Error_InvalidSerialPort(code))
    __swig_destroy__ = _mscl.delete_Error_InvalidSerialPort

# Register Error_InvalidSerialPort in _mscl:
_mscl.Error_InvalidSerialPort_swigregister(Error_InvalidSerialPort)

class Error_InvalidTcpServer(Error_Connection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, code, message):
        _mscl.Error_InvalidTcpServer_swiginit(self, _mscl.new_Error_InvalidTcpServer(code, message))
    __swig_destroy__ = _mscl.delete_Error_InvalidTcpServer

# Register Error_InvalidTcpServer in _mscl:
_mscl.Error_InvalidTcpServer_swigregister(Error_InvalidTcpServer)

class Error_InvalidUnixSocket(Error_Connection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, code, message):
        _mscl.Error_InvalidUnixSocket_swiginit(self, _mscl.new_Error_InvalidUnixSocket(code, message))
    __swig_destroy__ = _mscl.delete_Error_InvalidUnixSocket

# Register Error_InvalidUnixSocket in _mscl:
_mscl.Error_InvalidUnixSocket_swigregister(Error_InvalidUnixSocket)

class Error_MipCmdFailed(Error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Error_MipCmdFailed_swiginit(self, _mscl.new_Error_MipCmdFailed(*args))
    __swig_destroy__ = _mscl.delete_Error_MipCmdFailed

    def code(self):
        return _mscl.Error_MipCmdFailed_code(self)

    def value(self):
        return _mscl.Error_MipCmdFailed_value(self)

# Register Error_MipCmdFailed in _mscl:
_mscl.Error_MipCmdFailed_swigregister(Error_MipCmdFailed)

class Error_InvalidConfig(Error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _mscl.Error_InvalidConfig_swiginit(self, _mscl.new_Error_InvalidConfig(*args))
    __swig_destroy__ = _mscl.delete_Error_InvalidConfig

    def issues(self):
        return _mscl.Error_InvalidConfig_issues(self)

# Register Error_InvalidConfig in _mscl:
_mscl.Error_InvalidConfig_swigregister(Error_InvalidConfig)

class Error_InvalidNodeConfig(Error_InvalidConfig):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, issues, nodeAddress):
        _mscl.Error_InvalidNodeConfig_swiginit(self, _mscl.new_Error_InvalidNodeConfig(issues, nodeAddress))
    __swig_destroy__ = _mscl.delete_Error_InvalidNodeConfig

    def nodeAddress(self):
        return _mscl.Error_InvalidNodeConfig_nodeAddress(self)

# Register Error_InvalidNodeConfig in _mscl:
_mscl.Error_InvalidNodeConfig_swigregister(Error_InvalidNodeConfig)



